/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * freee人事労務 API
 * 
<p>freee人事労務のAPI仕様です。</p>

<hr />

<h2 id="start_guide">スタートガイド</h2>

<p>freee API開発がはじめての方は<a href="https://developer.freee.co.jp/getting-started">freee API スタートガイド</a>を参照してください。</p>

<hr />
<h2 id="specification">仕様</h2>

<h3 id="api_endpoint">APIエンドポイント</h3>

<p>https://api.freee.co.jp/hr</p>

<h3 id="about_authorize">認証について</h3>

<p>OAuth2.0を利用します。<a href="https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc" target="_blank">詳細はリファレンスの認証に関する記載を参照してください。</a></p>

<h3 id="data_format">データフォーマット</h3>

<p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>

<h3 id="compatibility">後方互換性ありの変更</h3>

<p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>

<ul>
<li>新しいAPIリソース・エンドポイントの追加</li>
<li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li>
<li>既存のAPIレスポンスに対する新しいプロパティの追加</li>
<li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li>
<li>keyとなっているidやcodeの長さの変更（長くする）</li>
<li>エラーメッセージの変更</li>
</ul>

<h3 id="common_response_header">共通レスポンスヘッダー</h3>

<p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>

<ul>
<li>
<p>X-Request-Id</p>
<ul>
<li>各リクエスト毎に発行されるID</li>
</ul>
</li>
</ul>

<h3 id="error_response">共通エラーレスポンス</h3>

<p>APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。</p>

  <table border="1">
  <tbody>
    <tr>
      <th style="padding: 10px"><strong>ステータスコード</strong></th>
      <th style="padding: 10px"><strong>原因</strong></th>
    </tr>
    <tr><td style="padding: 10px">400</td><td style="padding: 10px">リクエストパラメータが不正</td></tr>
    <tr><td style="padding: 10px">401</td><td style="padding: 10px">アクセストークンが無効</td></tr>
    <tr><td style="padding: 10px">403</td><td style="padding: 10px">アクセス権限がない</td></tr>
    <tr><td style="padding: 10px">404</td><td style="padding: 10px">リソースが存在しない</td></tr>
    <tr><td style="padding: 10px">429</td><td style="padding: 10px">リクエスト回数制限を超えた</td></tr>
    <tr><td style="padding: 10px">503</td><td style="padding: 10px">システム内で予期しないエラーが発生</td></tr>
  </tbody>
</table>

<p>メッセージボディ内の <code>messages</code> にはエラー内容を説明する文字列が入ります。</p>
<pre><code>  {
    &quot;status_code&quot; : 400,
    &quot;errors&quot; : [
      {
        &quot;type&quot; : &quot;bad_request&quot;,
        &quot;messages&quot; : [
          &quot;リクエストの形式が不正です。&quot;
        ]
      }
    ]
  }  </code></pre>

</br>

<h3 id="api_rate_limit">API使用制限</h3> 
<p>APIリクエストは1時間で10000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。</p>
<pre><code>X-Ratelimit-Limit:10000
X-Ratelimit-Remaining:9998
X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z
</code></pre>

<br> 各ヘッダの意味は次のとおりです。</p>

 <table border="1">
  <tbody>
    <tr>
      <th style="padding: 10px"><strong>ヘッダ名</strong></th>
      <th style="padding: 10px"><strong>説明</strong></th>
    </tr>
    <tr><td style="padding: 10px">X-RateLimit-Limit</td><td style="padding: 10px">使用回数の上限</td></tr>
    <tr><td style="padding: 10px">X-RateLimit-Remaining</td><td style="padding: 10px">残り使用回数</td></tr>
    <tr><td style="padding: 10px">X-RateLimit-Reset</td><td style="padding: 10px">使用回数がリセットされる時刻</td></tr>
  </tbody>
</table>

<p>上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。<br> その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>

</br>

<h3 id="api_rate_limit">プランごとの利用可能API</h3> 

<p>契約プランごとに利用可能なfreee人事労務APIはfreee人事労務のWeb版でご利用できる機能と同様です。例えば、スタンダードプラン（または旧ベーシックプラン）を契約している場合、Web版では打刻機能をご利用いただけますので、APIでもタイムレコーダー(打刻)APIが利用可能です。<a href="https://support.freee.co.jp/hc/ja/articles/203309710" target="_blank">freee人事労務のWeb版のプラン別機能比較はfreee人事労務のプラン・料金についてのヘルプを参照してください。</a></p>

</br>

<hr />
 * OpenAPI spec version: 2022-02-01
 */
import { customFetch } from './custom-fetch';
import {
  GetCompanyEmployeesParams,
  GetEmployeesParams,
  CreateEmployeeBody,
  GetEmployeeParams,
  UpdateEmployeeBody,
  DestroyEmployeeParams,
  GetEmployeeProfileRuleParams,
  UpdateEmployeeProfileRuleBody,
  GetEmployeeHealthInsuranceRuleParams,
  UpdateEmployeeHealthInsuranceRuleBody,
  GetEmployeeWelfarePensionInsuranceRuleParams,
  UpdateEmployeeWelfarePensionInsuranceRuleBody,
  GetEmployeeDependentRulesParams,
  BulkUpdateEmployeeDependentRulesBody,
  GetEmployeeBankAccountRuleParams,
  UpdateEmployeeBankAccountRuleBody,
  GetEmployeeBasicPayRuleParams,
  UpdateEmployeeBasicPayRuleBody,
  GetEmployeeProfileCustomFieldsRuleParams,
  GetEmployeeWorkRecordParams,
  UpdateEmployeeWorkRecordBody,
  DestroyEmployeeWorkRecordParams,
  GetEmployeeWorkRecordSummaryParams,
  UpdateEmployeeWorkRecordSummaryBody,
  GetEmployeeTimeClocksParams,
  CreateEmployeeTimeClockBody,
  GetEmployeeTimeClockParams,
  GetEmployeeTimeClocksAvailableTypesParams,
  GetEmployeesSpecialHolidaysParams,
  GetEmployeesAttendanceTagSummariesParams,
  UpdateEmployeesAttendanceTagSummariesBody,
  GetEmployeesAttendanceTagsParams,
  GetEmployeesAttendanceTagsByDateParams,
  UpdateEmployeesAttendanceTagsBody,
  GetSalariesEmployeePayrollStatementsParams,
  GetSalariesEmployeePayrollStatementParams,
  GetBonusesEmployeePayrollStatementsParams,
  GetBonusesEmployeePayrollStatementParams,
  GetEmployeeGroupMembershipsParams,
  GetGroupsParams,
  CreateGroupBody,
  UpdateGroupBody,
  DestroyGroupParams,
  GetPositionsParams,
  CreatePositionBody,
  UpdatePositionBody,
  DestroyPositionParams,
  GetApprovalRequestsMonthlyAttendancesParams,
  CreateApprovalRequestsMonthlyAttendanceBody,
  GetApprovalRequestsMonthlyAttendanceParams,
  UpdateApprovalRequestsMonthlyAttendanceBody,
  DestroyApprovalRequestsMonthlyAttendanceParams,
  ActionApprovalRequestsMonthlyAttendanceBody,
  GetApprovalRequestsWorkTimesParams,
  CreateApprovalRequestsWorkTimeBody,
  GetApprovalRequestsWorkTimeParams,
  UpdateApprovalRequestsWorkTimeBody,
  DestroyApprovalRequestsWorkTimeParams,
  ActionApprovalRequestsWorkTimeBody,
  GetApprovalRequestsPaidHolidaysParams,
  CreateApprovalRequestsPaidHolidayBody,
  GetApprovalRequestsPaidHolidayParams,
  UpdateApprovalRequestsPaidHolidayBody,
  DestroyApprovalRequestsPaidHolidayParams,
  ActionApprovalRequestsPaidHolidayBody,
  GetApprovalRequestsSpecialHolidaysParams,
  CreateApprovalRequestsSpecialHolidayBody,
  GetApprovalRequestsSpecialHolidayParams,
  UpdateApprovalRequestsSpecialHolidayBody,
  DestroyApprovalRequestsSpecialHolidayParams,
  ActionApprovalRequestsSpecialHolidayBody,
  GetApprovalRequestsOvertimeWorksParams,
  CreateApprovalRequestsOvertimeWorkBody,
  GetApprovalRequestsOvertimeWorkParams,
  UpdateApprovalRequestsOvertimeWorkBody,
  DestroyApprovalRequestsOvertimeWorkParams,
  ActionApprovalRequestsOvertimeWorkBody,
  GetApprovalRequestsOvertimeWorkSettingParams,
  GetApprovalFlowRoutesParams,
  GetApprovalFlowRouteParams,
  GetYearendAdjustmentEmployeesParams,
  GetYearendAdjustmentEmployeeParams,
  PutYearendAdjustmentEmployeeBody,
  PutYearendAdjustmentPayrollAndBonusBody,
  PutYearendAdjustmentDependentsBody,
  PutYearendAdjustmentPreviousJobBody,
  DestroyYearendAdjustmentPreviousJobParams,
  PostYearendAdjustmentInsurancesBody,
  PutYearendAdjustmentInsurancesBody,
  DestroyYearendAdjustmentInsurancesParams,
  PutYearendAdjustmentHousingLoanDeductionBody,
  PostYearendAdjustmentHousingLoanBody,
  PutYearendAdjustmentHousingLoanBody,
  DestroyYearendAdjustmentHousingLoanParams
} from './http-schemas';

import {
  getUsersMe,
  getCompanyEmployees,
  getEmployees,
  createEmployee,
  getEmployee,
  updateEmployee,
  destroyEmployee,
  getEmployeeProfileRule,
  updateEmployeeProfileRule,
  getEmployeeHealthInsuranceRule,
  updateEmployeeHealthInsuranceRule,
  getEmployeeWelfarePensionInsuranceRule,
  updateEmployeeWelfarePensionInsuranceRule,
  getEmployeeDependentRules,
  bulkUpdateEmployeeDependentRules,
  getEmployeeBankAccountRule,
  updateEmployeeBankAccountRule,
  getEmployeeBasicPayRule,
  updateEmployeeBasicPayRule,
  getEmployeeProfileCustomFieldsRule,
  getEmployeeWorkRecord,
  updateEmployeeWorkRecord,
  destroyEmployeeWorkRecord,
  getEmployeeWorkRecordSummary,
  updateEmployeeWorkRecordSummary,
  getEmployeeTimeClocks,
  createEmployeeTimeClock,
  getEmployeeTimeClock,
  getEmployeeTimeClocksAvailableTypes,
  getEmployeesSpecialHolidays,
  getEmployeesAttendanceTagSummaries,
  updateEmployeesAttendanceTagSummaries,
  getEmployeesAttendanceTags,
  getEmployeesAttendanceTagsByDate,
  updateEmployeesAttendanceTags,
  getSalariesEmployeePayrollStatements,
  getSalariesEmployeePayrollStatement,
  getBonusesEmployeePayrollStatements,
  getBonusesEmployeePayrollStatement,
  getEmployeeGroupMemberships,
  getGroups,
  createGroup,
  updateGroup,
  destroyGroup,
  getPositions,
  createPosition,
  updatePosition,
  destroyPosition,
  getApprovalRequestsMonthlyAttendances,
  createApprovalRequestsMonthlyAttendance,
  getApprovalRequestsMonthlyAttendance,
  updateApprovalRequestsMonthlyAttendance,
  destroyApprovalRequestsMonthlyAttendance,
  actionApprovalRequestsMonthlyAttendance,
  getApprovalRequestsWorkTimes,
  createApprovalRequestsWorkTime,
  getApprovalRequestsWorkTime,
  updateApprovalRequestsWorkTime,
  destroyApprovalRequestsWorkTime,
  actionApprovalRequestsWorkTime,
  getApprovalRequestsPaidHolidays,
  createApprovalRequestsPaidHoliday,
  getApprovalRequestsPaidHoliday,
  updateApprovalRequestsPaidHoliday,
  destroyApprovalRequestsPaidHoliday,
  actionApprovalRequestsPaidHoliday,
  getApprovalRequestsSpecialHolidays,
  createApprovalRequestsSpecialHoliday,
  getApprovalRequestsSpecialHoliday,
  updateApprovalRequestsSpecialHoliday,
  destroyApprovalRequestsSpecialHoliday,
  actionApprovalRequestsSpecialHoliday,
  getApprovalRequestsOvertimeWorks,
  createApprovalRequestsOvertimeWork,
  getApprovalRequestsOvertimeWork,
  updateApprovalRequestsOvertimeWork,
  destroyApprovalRequestsOvertimeWork,
  actionApprovalRequestsOvertimeWork,
  getApprovalRequestsOvertimeWorkSetting,
  getApprovalFlowRoutes,
  getApprovalFlowRoute,
  getYearendAdjustmentEmployees,
  getYearendAdjustmentEmployee,
  putYearendAdjustmentEmployee,
  putYearendAdjustmentPayrollAndBonus,
  putYearendAdjustmentDependents,
  putYearendAdjustmentPreviousJob,
  destroyYearendAdjustmentPreviousJob,
  postYearendAdjustmentInsurances,
  putYearendAdjustmentInsurances,
  destroyYearendAdjustmentInsurances,
  putYearendAdjustmentHousingLoanDeduction,
  postYearendAdjustmentHousingLoan,
  putYearendAdjustmentHousingLoan,
  destroyYearendAdjustmentHousingLoan
} from './http-client';
  
/**
 * <h2 id="">概要</h2>
<p>このリクエストの認可セッションにおけるログインユーザーの情報を返します。</p>
<p>freee人事労務では一人のログインユーザーを複数の事業所に関連付けられるため、このユーザーと関連のあるすべての事業所の情報をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>他のAPIのパラメータとしてcompany_idが求められる場合は、このAPIで取得したcompany_idを使用します。</li>
  <li>給与計算対象外の従業員のemployee_idとdisplay_nameは取得できません。</li>
</ul>
 * @summary ログインユーザーの取得
 */

export const getUsersMeHandler = async () => {
  const res = await getUsersMe();

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所に所属する従業員をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>退職ユーザーも含めて取得可能です。</li>
</ul>
 * @summary 全期間の従業員一覧の取得
 */

export type getCompanyEmployeesArgs = {
  pathParams: {
    companyId: number
  };
  queryParams: GetCompanyEmployeesParams;
}

export const getCompanyEmployeesHandler = async (args: getCompanyEmployeesArgs) => {
  const res = await getCompanyEmployees(args.pathParams.company_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した対象年月に事業所に所属する従業員をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>指定した年月に退職済みユーザーは取得できません。</li>
  <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の健康保険料の計算方法が自動計算の場合、給与計算時の健康保険料の直接指定金額はnullが返されます)</li>
  <li>事業所が定額制の健康保険組合に加入している場合、保険料の直接指定金額は無視されnullが返されます。</li>
</ul>
 * @summary 従業員一覧の取得
 */

export type getEmployeesArgs = {
  queryParams: GetEmployeesParams;
}

export const getEmployeesHandler = async (args: getEmployeesArgs) => {
  const res = await getEmployees(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>従業員を新規作成します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 従業員の作成
 */

export type createEmployeeArgs = {
  bodyParams: ApiV1EmployeesControllerCreateBody;
}

export const createEmployeeHandler = async (args: createEmployeeArgs) => {
  const res = await createEmployee(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定したIDの従業員を返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>指定した年月に退職済みユーザーは取得できません。</li>
  <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の健康保険料の計算方法が自動計算の場合、給与計算時の健康保険料の直接指定金額はnullが返されます)</li>
  <li>事業所が定額制の健康保険組合に加入している場合、保険料の直接指定金額は無視されnullが返されます。</li>
</ul>
 * @summary 従業員の取得
 */

export type getEmployeeArgs = {
  pathParams: {
    id: number
  };
  queryParams: GetEmployeeParams;
}

export const getEmployeeHandler = async (args: getEmployeeArgs) => {
  const res = await getEmployee(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 従業員の更新
 */

export type updateEmployeeArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1EmployeesControllerUpdateBody;
}

export const updateEmployeeHandler = async (args: updateEmployeeArgs) => {
  const res = await updateEmployee(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定したIDの従業員を削除します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 従業員の削除
 */

export type destroyEmployeeArgs = {
  pathParams: {
    id: number
  };
  queryParams: DestroyEmployeeParams;
}

export const destroyEmployeeHandler = async (args: destroyEmployeeArgs) => {
  const res = await destroyEmployee(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の姓名などの情報を返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、給与計算対象外の従業員には非対応です。employee_idに給与計算対象外の従業員IDを指定した場合、本APIを利用できません。</li>
</ul>
 * @summary 従業員の姓名・住所などの取得
 */

export type getEmployeeProfileRuleArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeeProfileRuleParams;
}

export const getEmployeeProfileRuleHandler = async (args: getEmployeeProfileRuleArgs) => {
  const res = await getEmployeeProfileRule(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の姓名・住所などを更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、給与計算対象外の従業員には非対応です。employee_idに給与計算対象外の従業員IDを指定した場合、本APIを利用できません。</li>
</ul>
 * @summary 従業員の姓名・住所などの更新
 */

export type updateEmployeeProfileRuleArgs = {
  pathParams: {
    employeeId: number
  };
  bodyParams: ApiV1EmployeesProfileRulesControllerUpdateBody;
}

export const updateEmployeeProfileRuleHandler = async (args: updateEmployeeProfileRuleArgs) => {
  const res = await updateEmployeeProfileRule(args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の健康保険情報を返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の健康保険料の計算方法が自動計算の場合、給与計算時の健康保険料の直接指定金額はnullが返されます)</li>
</ul>
 * @summary 従業員の健康保険の取得
 */

export type getEmployeeHealthInsuranceRuleArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeeHealthInsuranceRuleParams;
}

export const getEmployeeHealthInsuranceRuleHandler = async (args: getEmployeeHealthInsuranceRuleArgs) => {
  const res = await getEmployeeHealthInsuranceRule(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の健康保険情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の健康保険料の計算方法が自動計算の場合、給与計算時の健康保険料の直接指定金額はnullが返されます)</li>
  <li>事業所が定額制の健康保険組合に加入している場合、保険料の直接指定金額は無視されnullが返されます。</li>
  <li>事業所が定額制の健康保険組合に加入している場合、保険料の計算方法と保険料の更新はできません。</li>
</ul>
 * @summary 従業員の健康保険の更新
 */

export type updateEmployeeHealthInsuranceRuleArgs = {
  pathParams: {
    employeeId: number
  };
  bodyParams: ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody;
}

export const updateEmployeeHealthInsuranceRuleHandler = async (args: updateEmployeeHealthInsuranceRuleArgs) => {
  const res = await updateEmployeeHealthInsuranceRule(args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の厚生年金保険情報を返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の厚生年金保険料の計算方法が自動計算の場合、給与計算時の厚生年金保険料の直接指定金額はnullが返されます)</li>
</ul>
 * @summary 従業員の厚生年金保険の取得
 */

export type getEmployeeWelfarePensionInsuranceRuleArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeeWelfarePensionInsuranceRuleParams;
}

export const getEmployeeWelfarePensionInsuranceRuleHandler = async (args: getEmployeeWelfarePensionInsuranceRuleArgs) => {
  const res = await getEmployeeWelfarePensionInsuranceRule(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の厚生年金保険情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の厚生年金保険料の計算方法が自動計算の場合、給与計算時の厚生年金保険料の直接指定金額はnullが返されます)</li>
</ul>
 * @summary 従業員の厚生年金保険の更新
 */

export type updateEmployeeWelfarePensionInsuranceRuleArgs = {
  pathParams: {
    employeeId: number
  };
  bodyParams: ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody;
}

export const updateEmployeeWelfarePensionInsuranceRuleHandler = async (args: updateEmployeeWelfarePensionInsuranceRuleArgs) => {
  const res = await updateEmployeeWelfarePensionInsuranceRule(args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の家族情報を返します。</p>
 * @summary 従業員の家族情報の取得
 */

export type getEmployeeDependentRulesArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeeDependentRulesParams;
}

export const getEmployeeDependentRulesHandler = async (args: getEmployeeDependentRulesArgs) => {
  const res = await getEmployeeDependentRules(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の家族情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>idがない場合は新規作成、destroyがtrueの場合は削除になります。</li>
  <li>residence_type=live_in: 同居の場合、以下のパラメータに指定した値はWebに反映されません。</li>
  <ul>
    <li>zipcode1</li>
    <li>zipcode2</li>
    <li>prefecture_code</li>
    <li>address</li>
    <li>address_kana</li>
    <li>annual_remittance_amount</li>
  </ul>
  <li>residence_type=non_resident: 別居(国外)の場合、以下のパラメータに指定した値はWebに反映されません。</li>
  <ul>
    <li>prefecture_code</li>
  </ul>
</ul>
 * @summary 従業員の家族情報の更新
 */

export type bulkUpdateEmployeeDependentRulesArgs = {
  pathParams: {
    employeeId: number
  };
  bodyParams: ApiV1EmployeesDependentRulesControllerBulkUpdateBody;
}

export const bulkUpdateEmployeeDependentRulesHandler = async (args: bulkUpdateEmployeeDependentRulesArgs) => {
  const res = await bulkUpdateEmployeeDependentRules(args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の銀行口座情報を返します。</p>
 * @summary 従業員の銀行口座の取得
 */

export type getEmployeeBankAccountRuleArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeeBankAccountRuleParams;
}

export const getEmployeeBankAccountRuleHandler = async (args: getEmployeeBankAccountRuleArgs) => {
  const res = await getEmployeeBankAccountRule(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の銀行口座1の情報を更新します。</p>
 * @summary 従業員の銀行口座の更新
 */

export type updateEmployeeBankAccountRuleArgs = {
  pathParams: {
    employeeId: number
  };
  bodyParams: ApiV1EmployeesBankAccountRulesControllerUpdateBody;
}

export const updateEmployeeBankAccountRuleHandler = async (args: updateEmployeeBankAccountRuleArgs) => {
  const res = await updateEmployeeBankAccountRule(args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の基本給情報を返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 従業員の基本給の取得
 */

export type getEmployeeBasicPayRuleArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeeBasicPayRuleParams;
}

export const getEmployeeBasicPayRuleHandler = async (args: getEmployeeBasicPayRuleArgs) => {
  const res = await getEmployeeBasicPayRule(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の基本給情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 従業員の基本給の更新
 */

export type updateEmployeeBasicPayRuleArgs = {
  pathParams: {
    employeeId: number
  };
  bodyParams: ApiV1EmployeesBasicPayRulesControllerUpdateBody;
}

export const updateEmployeeBasicPayRuleHandler = async (args: updateEmployeeBasicPayRuleArgs) => {
  const res = await updateEmployeeBasicPayRule(args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付のカスタム項目情報を返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>指定年月に在籍していない従業員および給与計算対象外の従業員ではデータが存在しないため、空の配列が返ります。</li>
</ul>
 * @summary 従業員のカスタム項目の取得
 */

export type getEmployeeProfileCustomFieldsRuleArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeeProfileCustomFieldsRuleParams;
}

export const getEmployeeProfileCustomFieldsRuleHandler = async (args: getEmployeeProfileCustomFieldsRuleArgs) => {
  const res = await getEmployeeProfileCustomFieldsRule(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の勤怠情報を返します。</p>
 * @summary 勤怠の取得
 */

export type getEmployeeWorkRecordArgs = {
  pathParams: {
    employeeId: number,
    date: string
  };
  queryParams: GetEmployeeWorkRecordParams;
}

export const getEmployeeWorkRecordHandler = async (args: getEmployeeWorkRecordArgs) => {
  const res = await getEmployeeWorkRecord(args.pathParams.employee_id, args.pathParams.date, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の勤怠情報を更新します。</p>
<h2 id="_1">注意点</h2>
<ul>
  <li>振替出勤・振替休日・代休出勤・代休の登録はAPIでは行うことができません。</li>
</ul>

<h2 id="_2">examples</h2>
<ul>
  <li>出勤日について出退勤時刻および休憩時間を更新する場合は以下のようなパラメータをリクエストします。
    <pre>
      <code>
      {
        "company_id": 1,
        "break_records": [
          {
            "clock_in_at": "2017-05-25 12:00:00",
            "clock_out_at": "2017-05-25 13:00:00"
          }
        ],
        "work_record_segments": [
          {
            "clock_in_at": "2017-05-25 09:10:00",
            "clock_out_at": "2017-05-25 18:20:00"
          }
        ]
      }
      </code>
    </pre>
  </li>

  <li>勤務パターンや既定の所定労働時間を変更する場合は use_default_work_pattern に false を指定するとともに、各設定を上書きするパラメータをリクエストします。
    <pre>
      <code>
      {
        "company_id": 1,
        "break_records": [
          {
            "clock_in_at": "2017-05-25 12:00:00",
            "clock_out_at": "2017-05-25 13:00:00"
          }
        ],
        "work_record_segments": [
          {
            "clock_in_at": "2017-05-25 09:10:00",
            "clock_out_at": "2017-05-25 18:20:00:00"
          }
        ],
        "day_pattern": "normal_day",
        "normal_work_clock_in_at": "2017-05-25 11:00:00",
        "normal_work_clock_out_at": "2017-12-20 20:00:00",
        "normal_work_mins": 0,
        "use_default_work_pattern": false
      }
      </code>
    </pre>
  </li>

  <li>有給取得時の連携について半休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の要素を指定することで API での勤怠をつけることができます。
    <pre>
      <code>
      {
        "company_id": 1,
        "break_records": [
          {
            "clock_in_at": "2023-12-22 12:00:00",
            "clock_out_at": "2023-12-22 13:00:00"
          }
        ],
        "work_record_segments": [
          {
            "clock_in_at": "2017-05-25 09:10:00",
            "clock_out_at": "2017-05-25 18:20:00:00"
          }
        ],
        "paid_holidays": [
          {
            "type": "half"
            "mins": 240
          }
        ]
      }
      </code>
    </pre>
  </li>

  <li>有給取得時の連携について午前休または午後休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の要素を指定することで API での勤怠をつけることができます。
    <pre>
      <code>
      {
        "company_id": 1,
        "break_records": [
          {
            "clock_in_at": "2023-12-22 16:00:00",
            "clock_out_at": "2023-12-22 16:30:00"
          }
        ],
        "clock_in_at": "2023-12-22 14:00:00",
        "clock_out_at": "2023-12-22 18:00:00",
        "paid_holidays": [
          {
            "type": "morning_off"
          }
        ]
      }
      </code>
    </pre>
  </li>

  <li>有給取得時の連携について半日単位の年次有給休暇と時間単位の年次有給休暇を同日に取得する場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の要素を指定することで API での勤怠をつけることができます。
    <pre>
      <code>
      {
        "company_id": 1,
        "break_records": [
          {
            "clock_in_at": "2023-12-22 16:00:00",
            "clock_out_at": "2023-12-22 16:30:00"
          }
        ],
        "clock_in_at": "2023-12-22 14:00:00",
        "clock_out_at": "2023-12-22 18:00:00",
        "paid_holidays": [
          {
            "type": "half",
            "mins": 240
          },
          {
            "type": "hourly",
            "mins": 120
          },
        ]
      }
      </code>
    </pre>
  </li>

  <li>特別休暇取得時の連携について全休の場合は以下の要素を指定することで API での勤怠をつけることができます。
    <ul>
      <li>special_holiday (全休の場合1.0を指定します)</li>
      <li>special_holiday_setting_id (特別休暇設定IDを指定します)</li>
    </ul>
    <pre>
      <code>
      {
        "company_id": 1,
        "special_holiday": 1.0
        "special_holiday_setting_id": 1
      }
      </code>
    </pre>
  </li>

  <li>特別休暇取得時の連携について時間休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の要素を指定することで API での勤怠をつけることができます。
    <ul>
      <li>special_holiday_setting_id (特別休暇設定IDを指定します)</li>
      <li>hourly_special_holiday_mins (時間休により計上される所定労働時間を分で指定します)</li>
    </ul>
    <pre>
      <code>
      {
        "company_id": 1,
        "break_records": [
          {
            "clock_in_at": "2023-12-22 12:00:00",
            "clock_out_at": "2023-12-22 13:00:00"
          }
        ],
        "work_record_segments": [
          {
            "clock_in_at": "2017-05-25 09:10:00",
            "clock_out_at": "2017-05-25 18:20:00:00"
          }
        ],
        "special_holiday_setting_id": 1,
        "hourly_special_holiday_mins": 120
      }
      </code>
    </pre>
  </li>

  <li>特別休暇取得時の連携について午前休または午後休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の要素を指定することで API での勤怠をつけることができます。
    <ul>
      <li>special_holiday_setting_id (特別休暇設定IDを指定します)</li>
      <li>half_holiday_type (morning_off または afternoon_off を指定します)</li>
    </ul>
    <pre>
      <code>
      {
        "company_id": 1,
        "break_records": [
          {
            "clock_in_at": "2023-12-22 12:00:00",
            "clock_out_at": "2023-12-22 12:30:00"
          }
        ],
        "clock_in_at": "2023-12-22 09:00:00",
        "clock_out_at": "2023-12-22 13:00:00",
        "special_holiday_setting_id": 1,
        "half_holiday_type": "afternoon_off"
      }
      </code>
    </pre>
  </li>

  <li>欠勤を付ける場合は company_idとis_absence 以外のパラメータは必要ありません。
    <pre>
      <code>
      {
        "company_id": 1,
        "is_absence": true
      }
      </code>
    </pre>
  </li>

</ul>
 * @summary 勤怠の更新
 */

export type updateEmployeeWorkRecordArgs = {
  pathParams: {
    employeeId: number,
    date: string
  };
  bodyParams: UpdateEmployeeWorkRecordBody;
}

export const updateEmployeeWorkRecordHandler = async (args: updateEmployeeWorkRecordArgs) => {
  const res = await updateEmployeeWorkRecord(args.pathParams.employee_id, args.pathParams.date, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の勤怠情報を削除します。</p>
 * @summary 勤怠の削除
 */

export type destroyEmployeeWorkRecordArgs = {
  pathParams: {
    employeeId: number,
    date: string
  };
  queryParams: DestroyEmployeeWorkRecordParams;
}

export const destroyEmployeeWorkRecordHandler = async (args: destroyEmployeeWorkRecordArgs) => {
  const res = await destroyEmployeeWorkRecord(args.pathParams.employee_id, args.pathParams.date, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員、月の勤怠情報のサマリを返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>work_recordsオプションにtrueを指定することで、明細となる日次の勤怠情報もあわせて返却します。</li>
</ul>
 * @summary 勤怠情報月次サマリの取得
 */

export type getEmployeeWorkRecordSummaryArgs = {
  pathParams: {
    employeeId: number,
    year: number,
    month: number
  };
  queryParams: GetEmployeeWorkRecordSummaryParams;
}

export const getEmployeeWorkRecordSummaryHandler = async (args: getEmployeeWorkRecordSummaryArgs) => {
  const res = await getEmployeeWorkRecordSummary(args.pathParams.employee_id, args.pathParams.year, args.pathParams.month, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員、月の勤怠情報のサマリを更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>日毎の勤怠の更新はこのAPIではできません。日毎の勤怠の操作には勤怠APIを使用して下さい。</li>
  <li>勤怠データが存在しない場合は新規作成、既に存在する場合は上書き更新されます。</li>
  <li>値が設定された項目のみ更新されます。値が設定されなかった場合は自動的に0が設定されます。</li>
</ul>
 * @summary 勤怠情報月次サマリの更新
 */

export type updateEmployeeWorkRecordSummaryArgs = {
  pathParams: {
    employeeId: number,
    year: number,
    month: number
  };
  bodyParams: ApiV1EmployeesWorkRecordSummaryControllerUpdateBody;
}

export const updateEmployeeWorkRecordSummaryHandler = async (args: updateEmployeeWorkRecordSummaryArgs) => {
  const res = await updateEmployeeWorkRecordSummary(args.pathParams.employee_id, args.pathParams.year, args.pathParams.month, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・期間の打刻情報を返します。</p>
 * @summary 打刻一覧の取得
 */

export type getEmployeeTimeClocksArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeeTimeClocksParams;
}

export const getEmployeeTimeClocksHandler = async (args: getEmployeeTimeClocksArgs) => {
  const res = await getEmployeeTimeClocks(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の打刻情報を登録します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>休憩開始の連続や退勤のみなど、整合性の取れていない打刻は登録できません。
打刻可能種別の取得APIを呼ぶことで、その従業員がその時点で登録可能な打刻種別が取得できます。</li>

  <li>出勤の打刻は</li>
  <ul>
    <li>前日の出勤時刻から24時間以内の場合、前日の退勤打刻が必須です。</li>
    <li> 前日の出勤時刻から24時間経過している場合は、前日の退勤打刻がなくとも出勤打刻を登録することができます。</li>
  </ul>

  <li>退勤の打刻は</li>
  <ul>
    <li><a href=\"https://support.freee.co.jp/hc/ja/articles/900004490226-%E5%8B%A4%E6%80%A0%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86#h_01EYPYTR9HZ7YB8V5F18VMD1BT"target=\"_blank\">『退勤を自動打刻する』</a>の設定を使用している場合は、出勤打刻から24時間経過しても退勤打刻がない場合に、退勤打刻が自動で登録されます。</li>
    <li>すでに登録されている退勤打刻よりも後の時刻であれば上書き登録することができます。</li>
  </ul>

  <li>打刻が日をまたぐ場合は、base_date(打刻日)に前日の日付を指定してください。</li>

  <li>datetime(打刻日時)を指定できるのは管理者の権限を持ったユーザーのみです。</li>
</ul>
 * @summary 打刻の登録
 */

export type createEmployeeTimeClockArgs = {
  pathParams: {
    employeeId: number
  };
  bodyParams: ApiV1EmployeesTimeClocksControllerCreateBody;
}

export const createEmployeeTimeClockHandler = async (args: createEmployeeTimeClockArgs) => {
  const res = await createEmployeeTimeClock(args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・指定した打刻の詳細情報を返します。</p>
 * @summary 打刻の取得
 */

export type getEmployeeTimeClockArgs = {
  pathParams: {
    employeeId: number,
    id: number
  };
  queryParams: GetEmployeeTimeClockParams;
}

export const getEmployeeTimeClockHandler = async (args: getEmployeeTimeClockArgs) => {
  const res = await getEmployeeTimeClock(args.pathParams.employee_id, args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の打刻可能種別と打刻基準日を返します。</p>
<p>例: すでに出勤した状態だと、休憩開始、退勤が配列で返ります。</p>
 * @summary 打刻可能種別の取得
 */

export type getEmployeeTimeClocksAvailableTypesArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeeTimeClocksAvailableTypesParams;
}

export const getEmployeeTimeClocksAvailableTypesHandler = async (args: getEmployeeTimeClocksAvailableTypesArgs) => {
  const res = await getEmployeeTimeClocksAvailableTypes(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員に付与された特別休暇情報をリストで返します。</p>
 * @summary 従業員の特別休暇一覧の取得
 */

export type getEmployeesSpecialHolidaysArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeesSpecialHolidaysParams;
}

export const getEmployeesSpecialHolidaysHandler = async (args: getEmployeesSpecialHolidaysArgs) => {
  const res = await getEmployeesSpecialHolidays(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>
  指定した従業員・年月の勤怠タグサマリを更新します。<br />
  年月は給与支払い月を指定してください。
</p>
 * @summary 勤怠タグ月次サマリの取得
 */

export type getEmployeesAttendanceTagSummariesArgs = {
  pathParams: {
    employeeId: number,
    year: number,
    month: number
  };
  queryParams: GetEmployeesAttendanceTagSummariesParams;
}

export const getEmployeesAttendanceTagSummariesHandler = async (args: getEmployeesAttendanceTagSummariesArgs) => {
  const res = await getEmployeesAttendanceTagSummaries(args.pathParams.employee_id, args.pathParams.year, args.pathParams.month, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>
  指定した従業員・年月の勤怠タグサマリを更新します。<br />
  年月は給与支払い月を指定してください。
</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>指定した従業員・年月の勤怠タグサマリが存在する場合は、上書き更新されます。</li>
  <li>指定がなかった勤怠タグは自動的に0が設定されます。</li>
</ul>
 * @summary 勤怠タグ月次サマリの更新
 */

export type updateEmployeesAttendanceTagSummariesArgs = {
  pathParams: {
    employeeId: number,
    year: number,
    month: number
  };
  bodyParams: ApiV1EmployeesAttendanceTagSummariesControllerUpdateBody;
}

export const updateEmployeesAttendanceTagSummariesHandler = async (args: updateEmployeesAttendanceTagSummariesArgs) => {
  const res = await updateEmployeesAttendanceTagSummaries(args.pathParams.employee_id, args.pathParams.year, args.pathParams.month, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の利用可能な勤怠タグの一覧を返します。</p>
 * @summary 勤怠タグ一覧の取得
 */

export type getEmployeesAttendanceTagsArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetEmployeesAttendanceTagsParams;
}

export const getEmployeesAttendanceTagsHandler = async (args: getEmployeesAttendanceTagsArgs) => {
  const res = await getEmployeesAttendanceTags(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の勤怠タグと利用回数の一覧を返します。</p>
 * @summary 勤怠タグと利用回数の取得
 */

export type getEmployeesAttendanceTagsByDateArgs = {
  pathParams: {
    employeeId: number,
    date: string
  };
  queryParams: GetEmployeesAttendanceTagsByDateParams;
}

export const getEmployeesAttendanceTagsByDateHandler = async (args: getEmployeesAttendanceTagsByDateArgs) => {
  const res = await getEmployeesAttendanceTagsByDate(args.pathParams.employee_id, args.pathParams.date, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の勤怠タグを更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>指定した従業員・日付の勤怠タグが存在する場合は、上書き更新されます。</li>
  <li>指定がなかった勤怠タグは削除されます。</li>
</ul>
 * @summary 勤怠タグの更新
 */

export type updateEmployeesAttendanceTagsArgs = {
  pathParams: {
    employeeId: number,
    date: string
  };
  bodyParams: ApiV1EmployeesAttendanceTagsControllerUpdateBody;
}

export const updateEmployeesAttendanceTagsHandler = async (args: updateEmployeesAttendanceTagsArgs) => {
  const res = await updateEmployeesAttendanceTags(args.pathParams.employee_id, args.pathParams.date, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所に所属する従業員の給与明細をリストで返します。</p>
<p>指定した年月に支払いのある給与明細が返されます。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>複数時給を設定している場合はpaymentsに内訳が返されます。</li>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>給与計算中の場合は、各パラメータはnullおよび空配列が返ります。</li>
</ul>
 * @summary 給与明細一覧の取得
 */

export type getSalariesEmployeePayrollStatementsArgs = {
  queryParams: GetSalariesEmployeePayrollStatementsParams;
}

export const getSalariesEmployeePayrollStatementsHandler = async (args: getSalariesEmployeePayrollStatementsArgs) => {
  const res = await getSalariesEmployeePayrollStatements(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員ID、年月の給与明細を返します。</p>
<p>指定した年月に支払いのある給与明細が返されます。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>複数時給を設定している場合はpaymentsに内訳が返されます。</li>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>給与計算中の場合は、各パラメータはnullおよび空配列が返ります。</li>
</ul>

<h2 id="_2">examples</h2>
<pre>
  <code>
  {
  "employee_payroll_statement": {
    "id": 1,
    "company_id": 1,
    "employee_id": 1,
    "employee_name": "給与 太郎",
    "employee_display_name": "給与 太郎",
    "employee_num": "001",
    "pay_date": "2018-02-25",
    "start_date": "2018-02-01",
    "closing_date": "2018-02-28",
    "variable_pay_start_date": "2018-01-01",
    "variable_pay_closing_date": "2018-01-31",
    "fixed": true,
    "calc_status": "calculated",
    "calculated_at": "2018-09-27T05:06:45.315Z",
    "pay_calc_type": "monthly",
    "board_member_remuneration_amount": "400000.0",
    "basic_pay_amount": "300000.0",
    "work_days": "21.0",
    "normal_work_time": "8.0",
    "normal_work_days": "21.0",
    "work_mins_by_paid_holiday": "480.0",
    "num_paid_holidays": "1.0",
    "is_board_member": true,
    "total_attendance_deduction_amount": "0.0",
    "total_allowance_amount": "0.0",
    "total_deduction_amount": "23830.0",
    "total_deduction_employer_share": "16830.0",
    "net_payment_amount": "277170.0",
    "gross_payment_amount": "301000.0",
    "total_worked_days_count": "21.0",
    "total_taxable_payment_amount": "301000.0",
    "total_expense_amount": "0.0",
    "total_transfer_amount": "277170.0",
    "total_annual_payment_amount": "600000.0",
    "payments": [{ "name": "基本給", "amount": "300000.0"},{ "name": "残業代", "amount": "1000.0"}],
    "deductions": [{"name": "所得税", "amount": "7000.0"}, {"name": "健康保険料", "amount": "16830.0"}],
    "deductions_emloyers_share": [{"name": "健康保険料(会社負担分)", "amount": "16830.0"}],
    "attendances": [{"name": "遅刻・早退", "time": "0.0", "amount": "0.0"}],
    "overtime_pays": [{ "name": "時間外労働", "time": "60.0", "amount": "1000.0", "code": null }, { "name": "カスタム固定残業代", "time": null, "amount": "10000.0", "code": "a001" }],
    "remark": "備考"
    }
  }
  </code>
</pre>
 * @summary 給与明細の取得
 */

export type getSalariesEmployeePayrollStatementArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetSalariesEmployeePayrollStatementParams;
}

export const getSalariesEmployeePayrollStatementHandler = async (args: getSalariesEmployeePayrollStatementArgs) => {
  const res = await getSalariesEmployeePayrollStatement(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所に所属する従業員の賞与明細をリストで返します。</p>
<p>指定した年月に支払いのある賞与明細が返されます。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 賞与明細一覧の取得
 */

export type getBonusesEmployeePayrollStatementsArgs = {
  queryParams: GetBonusesEmployeePayrollStatementsParams;
}

export const getBonusesEmployeePayrollStatementsHandler = async (args: getBonusesEmployeePayrollStatementsArgs) => {
  const res = await getBonusesEmployeePayrollStatements(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員ID、年月の賞与明細を返します。</p>
<p>指定した年月に支払いのある賞与明細が返されます。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>

<h2 id="_2">examples</h2>
<pre>
  <code>
    {
    "employee_payroll_statement": {
      "id": 1,
      "company_id": 1,
      "employee_id": 1,
      "employee_name": "給与 太郎",
      "employee_display_name": "給与 太郎",
      "employee_num": "001",
      "closing_date": "2018-03-31",
      "pay_date": "2018-03-31",
      "fixed": true,
      "calc_status": "calculated",
      "calculated_at": "2018-09-27T05:06:45.315Z",
      "bonus_amount": "300000.0",
      "total_allowance_amount": "0.0",
      "total_deduction_amount": "23830.0",
      "net_payment_amount": "268000.0",
      "gross_payment_amount": "330000.0",
      "total_taxable_payment_amount": "330000.0",
      "allowances": [{"name": "地域手当", "amount": "30000.0"}],
      "deductions": [{"name": "所得税", "amount": "46000.0"}, {"name": "健康保険料", "amount": "16000.0"}],
      "remark": "備考"
    }
    }
  </code>
</pre>
 * @summary 賞与明細の取得
 */

export type getBonusesEmployeePayrollStatementArgs = {
  pathParams: {
    employeeId: number
  };
  queryParams: GetBonusesEmployeePayrollStatementParams;
}

export const getBonusesEmployeePayrollStatementHandler = async (args: getBonusesEmployeePayrollStatementArgs) => {
  const res = await getBonusesEmployeePayrollStatement(args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の指定日付時点における所属情報をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 所属一覧の取得
 */

export type getEmployeeGroupMembershipsArgs = {
  queryParams: GetEmployeeGroupMembershipsParams;
}

export const getEmployeeGroupMembershipsHandler = async (args: getEmployeeGroupMembershipsArgs) => {
  const res = await getEmployeeGroupMemberships(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の指定日付時点における部門情報をリストで返します。</p>
<p>部門APIの使い方については、<a href="https://developer.freee.co.jp/tips/groups-api-hierarchy" target="_blank">部門APIを利用した組織図の取得について</a> をご参照ください。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 部門一覧の取得
 */

export type getGroupsArgs = {
  queryParams: GetGroupsParams;
}

export const getGroupsHandler = async (args: getGroupsArgs) => {
  const res = await getGroups(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の部門を新規作成します。</p>
<p>部門APIの使い方については、<a href="https://developer.freee.co.jp/tips/groups-api-hierarchy" target="_blank">部門APIを利用した組織図の取得について</a> をご参照ください。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 部門の作成
 */

export type createGroupArgs = {
  bodyParams: ApiV1GroupCreateRequest;
}

export const createGroupHandler = async (args: createGroupArgs) => {
  const res = await createGroup(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の部門の情報を更新します。</p>
<p>部門APIの使い方については、<a href="https://developer.freee.co.jp/tips/groups-api-hierarchy" target="_blank">部門APIを利用した組織図の取得について</a> をご参照ください。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 部門の更新
 */

export type updateGroupArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1GroupUpdateRequest;
}

export const updateGroupHandler = async (args: updateGroupArgs) => {
  const res = await updateGroup(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の部門の情報を削除します。</p>
<p>部門APIの使い方については、<a href="https://developer.freee.co.jp/tips/groups-api-hierarchy" target="_blank">部門APIを利用した組織図の取得について</a> をご参照ください。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 部門の削除
 */

export type destroyGroupArgs = {
  pathParams: {
    id: number
  };
  queryParams: DestroyGroupParams;
}

export const destroyGroupHandler = async (args: destroyGroupArgs) => {
  const res = await destroyGroup(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の指定日付時点における役職情報をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 役職一覧の取得
 */

export type getPositionsArgs = {
  queryParams: GetPositionsParams;
}

export const getPositionsHandler = async (args: getPositionsArgs) => {
  const res = await getPositions(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の役職を新規作成します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 役職の作成
 */

export type createPositionArgs = {
  bodyParams: ApiV1PositionRequest;
}

export const createPositionHandler = async (args: createPositionArgs) => {
  const res = await createPosition(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の役職の情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
</ul>
 * @summary 役職の更新
 */

export type updatePositionArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1PositionRequest;
}

export const updatePositionHandler = async (args: updatePositionArgs) => {
  const res = await updatePosition(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の役職の情報を削除します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>管理者権限を持ったユーザーのみ実行可能です。</li>
  <li>従業員に役職が適用されている場合、従業員の役職情報も削除されます。</li>
</ul>
 * @summary 役職の削除
 */

export type destroyPositionArgs = {
  pathParams: {
    id: number
  };
  queryParams: DestroyPositionParams;
}

export const destroyPositionHandler = async (args: destroyPositionArgs) => {
  const res = await destroyPosition(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の指定日付時点における月次勤怠締め申請情報をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 月次勤怠締め申請一覧の取得
 */

export type getApprovalRequestsMonthlyAttendancesArgs = {
  queryParams: GetApprovalRequestsMonthlyAttendancesParams;
}

export const getApprovalRequestsMonthlyAttendancesHandler = async (args: getApprovalRequestsMonthlyAttendancesArgs) => {
  const res = await getApprovalRequestsMonthlyAttendances(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の月次勤怠締め申請を新規作成します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 月次勤怠締め申請の作成
 */

export type createApprovalRequestsMonthlyAttendanceArgs = {
  bodyParams: ApiV1MonthlyAttendanceCreateRequest;
}

export const createApprovalRequestsMonthlyAttendanceHandler = async (args: createApprovalRequestsMonthlyAttendanceArgs) => {
  const res = await createApprovalRequestsMonthlyAttendance(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の月次勤怠締め申請情報を取得します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 月次勤怠締め申請の取得
 */

export type getApprovalRequestsMonthlyAttendanceArgs = {
  pathParams: {
    id: number
  };
  queryParams: GetApprovalRequestsMonthlyAttendanceParams;
}

export const getApprovalRequestsMonthlyAttendanceHandler = async (args: getApprovalRequestsMonthlyAttendanceArgs) => {
  const res = await getApprovalRequestsMonthlyAttendance(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の月次勤怠締め申請情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 月次勤怠締め申請の更新
 */

export type updateApprovalRequestsMonthlyAttendanceArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1MonthlyAttendanceUpdateRequest;
}

export const updateApprovalRequestsMonthlyAttendanceHandler = async (args: updateApprovalRequestsMonthlyAttendanceArgs) => {
  const res = await updateApprovalRequestsMonthlyAttendance(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の月次勤怠締め申請情報を削除します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 月次勤怠締め申請の削除
 */

export type destroyApprovalRequestsMonthlyAttendanceArgs = {
  pathParams: {
    id: number
  };
  queryParams: DestroyApprovalRequestsMonthlyAttendanceParams;
}

export const destroyApprovalRequestsMonthlyAttendanceHandler = async (args: destroyApprovalRequestsMonthlyAttendanceArgs) => {
  const res = await destroyApprovalRequestsMonthlyAttendance(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の月次勤怠締め申請情報を承認操作します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 月次勤怠締め申請の承認操作
 */

export type actionApprovalRequestsMonthlyAttendanceArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1ApprovalActionRequest;
}

export const actionApprovalRequestsMonthlyAttendanceHandler = async (args: actionApprovalRequestsMonthlyAttendanceArgs) => {
  const res = await actionApprovalRequestsMonthlyAttendance(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の指定日付時点における勤務時間修正申請情報をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 勤務時間修正申請一覧の取得
 */

export type getApprovalRequestsWorkTimesArgs = {
  queryParams: GetApprovalRequestsWorkTimesParams;
}

export const getApprovalRequestsWorkTimesHandler = async (args: getApprovalRequestsWorkTimesArgs) => {
  const res = await getApprovalRequestsWorkTimes(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の勤務時間修正を新規作成します。</p>

<h2 id="_2">examples</h2>
<ul>
  <li>勤務時間を修正する場合は以下のようなパラメータを指定します。
    <pre>
      <code>
        {
          "company_id": 1,
          "target_date": "2017-05-25",
          "break_records": [
            {
              "clock_in_at": "2017-05-25 12:00:00",
              "clock_out_at": "2017-05-25 13:00:00"
            }
          ],
          "work_records": [
            {
              "clock_in_at": "2017-05-25 09:10:00",
              "clock_out_at": "2017-05-25 18:20:00"
            }
          ],
          "approval_flow_route_id": 1
        }
      </code>
    </pre>
  </li>
</ul>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 勤務時間修正申請の作成
 */

export type createApprovalRequestsWorkTimeArgs = {
  bodyParams: CreateApprovalRequestsWorkTimeBody;
}

export const createApprovalRequestsWorkTimeHandler = async (args: createApprovalRequestsWorkTimeArgs) => {
  const res = await createApprovalRequestsWorkTime(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の勤務時間修正申請情報を取得します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 勤務時間修正申請の取得
 */

export type getApprovalRequestsWorkTimeArgs = {
  pathParams: {
    id: number
  };
  queryParams: GetApprovalRequestsWorkTimeParams;
}

export const getApprovalRequestsWorkTimeHandler = async (args: getApprovalRequestsWorkTimeArgs) => {
  const res = await getApprovalRequestsWorkTime(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の勤務時間修正申請情報を更新します。</p>

<h2 id="_2">examples</h2>
<ul>
  <li>勤務時間を修正する場合は以下のようなパラメータを指定します。
    <pre>
      <code>
        {
          "company_id": 1,
          "target_date": "2017-05-25",
          "break_records": [
            {
              "clock_in_at": "2017-05-25 12:00:00",
              "clock_out_at": "2017-05-25 13:00:00"
            }
          ],
          "work_records": [
            {
              "clock_in_at": "2017-05-25 09:10:00",
              "clock_out_at": "2017-05-25 18:20:00"
            }
          ],
          "approval_flow_route_id": 1
        }
      </code>
    </pre>
  </li>
</ul>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 勤務時間修正申請の更新
 */

export type updateApprovalRequestsWorkTimeArgs = {
  pathParams: {
    id: number
  };
  bodyParams: Schema;
}

export const updateApprovalRequestsWorkTimeHandler = async (args: updateApprovalRequestsWorkTimeArgs) => {
  const res = await updateApprovalRequestsWorkTime(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の勤務時間修正申請情報を削除します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 勤務時間修正申請の削除
 */

export type destroyApprovalRequestsWorkTimeArgs = {
  pathParams: {
    id: number
  };
  queryParams: DestroyApprovalRequestsWorkTimeParams;
}

export const destroyApprovalRequestsWorkTimeHandler = async (args: destroyApprovalRequestsWorkTimeArgs) => {
  const res = await destroyApprovalRequestsWorkTime(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の勤務時間修正申請情報を承認操作します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 勤務時間修正申請の承認操作
 */

export type actionApprovalRequestsWorkTimeArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1ApprovalActionRequest;
}

export const actionApprovalRequestsWorkTimeHandler = async (args: actionApprovalRequestsWorkTimeArgs) => {
  const res = await actionApprovalRequestsWorkTime(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の指定日付時点における有給申請情報をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 有給申請一覧の取得
 */

export type getApprovalRequestsPaidHolidaysArgs = {
  queryParams: GetApprovalRequestsPaidHolidaysParams;
}

export const getApprovalRequestsPaidHolidaysHandler = async (args: getApprovalRequestsPaidHolidaysArgs) => {
  const res = await getApprovalRequestsPaidHolidays(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の有給申請を新規作成します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 有給申請の作成
 */

export type createApprovalRequestsPaidHolidayArgs = {
  bodyParams: CreateApprovalRequestsPaidHolidayBody;
}

export const createApprovalRequestsPaidHolidayHandler = async (args: createApprovalRequestsPaidHolidayArgs) => {
  const res = await createApprovalRequestsPaidHoliday(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の有給申請情報を取得します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 有給申請の取得
 */

export type getApprovalRequestsPaidHolidayArgs = {
  pathParams: {
    id: number
  };
  queryParams: GetApprovalRequestsPaidHolidayParams;
}

export const getApprovalRequestsPaidHolidayHandler = async (args: getApprovalRequestsPaidHolidayArgs) => {
  const res = await getApprovalRequestsPaidHoliday(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の有給申請情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 有給申請の更新
 */

export type updateApprovalRequestsPaidHolidayArgs = {
  pathParams: {
    id: number
  };
  bodyParams: UpdateApprovalRequestsPaidHolidayBody;
}

export const updateApprovalRequestsPaidHolidayHandler = async (args: updateApprovalRequestsPaidHolidayArgs) => {
  const res = await updateApprovalRequestsPaidHoliday(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の有給申請情報を削除します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 有給申請の削除
 */

export type destroyApprovalRequestsPaidHolidayArgs = {
  pathParams: {
    id: number
  };
  queryParams: DestroyApprovalRequestsPaidHolidayParams;
}

export const destroyApprovalRequestsPaidHolidayHandler = async (args: destroyApprovalRequestsPaidHolidayArgs) => {
  const res = await destroyApprovalRequestsPaidHoliday(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の有給申請情報を承認操作します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>全休の有給申請は承認されると申請者の有給の残数が減ります。</li>
  <li>半休と時間休の有給申請は承認されても申請者の有給の残数が減らない場合があります。以下の条件を満たす場合、申請者の有給の残数が減ります。</li>
  <ul>
    <li>申請承認後、申請者が申請の対象日に出勤打刻と退勤打刻をする。</li>
    <li>申請承認前に、申請者が申請の対象日に勤怠を登録している。</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 有給申請の承認操作
 */

export type actionApprovalRequestsPaidHolidayArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1ApprovalActionRequest;
}

export const actionApprovalRequestsPaidHolidayHandler = async (args: actionApprovalRequestsPaidHolidayArgs) => {
  const res = await actionApprovalRequestsPaidHoliday(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の指定日付時点における特別休暇申請情報をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 特別休暇申請一覧の取得
 */

export type getApprovalRequestsSpecialHolidaysArgs = {
  queryParams: GetApprovalRequestsSpecialHolidaysParams;
}

export const getApprovalRequestsSpecialHolidaysHandler = async (args: getApprovalRequestsSpecialHolidaysArgs) => {
  const res = await getApprovalRequestsSpecialHolidays(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の特別休暇申請を新規作成します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 特別休暇申請の作成
 */

export type createApprovalRequestsSpecialHolidayArgs = {
  bodyParams: ApiV1specialHolidayRequest;
}

export const createApprovalRequestsSpecialHolidayHandler = async (args: createApprovalRequestsSpecialHolidayArgs) => {
  const res = await createApprovalRequestsSpecialHoliday(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の特別休暇申請情報を取得します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 特別休暇申請の取得
 */

export type getApprovalRequestsSpecialHolidayArgs = {
  pathParams: {
    id: number
  };
  queryParams: GetApprovalRequestsSpecialHolidayParams;
}

export const getApprovalRequestsSpecialHolidayHandler = async (args: getApprovalRequestsSpecialHolidayArgs) => {
  const res = await getApprovalRequestsSpecialHoliday(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の特別休暇申請情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 特別休暇申請の更新
 */

export type updateApprovalRequestsSpecialHolidayArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1specialHolidayRequest;
}

export const updateApprovalRequestsSpecialHolidayHandler = async (args: updateApprovalRequestsSpecialHolidayArgs) => {
  const res = await updateApprovalRequestsSpecialHoliday(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の特別休暇申請情報を削除します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 特別休暇申請の削除
 */

export type destroyApprovalRequestsSpecialHolidayArgs = {
  pathParams: {
    id: number
  };
  queryParams: DestroyApprovalRequestsSpecialHolidayParams;
}

export const destroyApprovalRequestsSpecialHolidayHandler = async (args: destroyApprovalRequestsSpecialHolidayArgs) => {
  const res = await destroyApprovalRequestsSpecialHoliday(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の特別休暇申請情報を承認操作します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>全休の特別休暇申請は承認されると申請者の特別休暇の残数が減ります。</li>
  <li>半休と時間休の特別休暇申請は承認されても申請者の特別休暇の残数が減らない場合があります。以下の条件を満たす場合、申請者の特別休暇の残数が減ります。</li>
  <ul>
    <li>申請承認後、申請者が申請の対象日に出勤打刻と退勤打刻をする。</li>
    <li>申請承認前に、申請者が申請の対象日に勤怠を登録している。</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 特別休暇申請の承認操作
 */

export type actionApprovalRequestsSpecialHolidayArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1ApprovalActionRequest;
}

export const actionApprovalRequestsSpecialHolidayHandler = async (args: actionApprovalRequestsSpecialHolidayArgs) => {
  const res = await actionApprovalRequestsSpecialHoliday(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の指定日付時点における残業申請情報をリストで返します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 残業申請一覧の取得
 */

export type getApprovalRequestsOvertimeWorksArgs = {
  queryParams: GetApprovalRequestsOvertimeWorksParams;
}

export const getApprovalRequestsOvertimeWorksHandler = async (args: getApprovalRequestsOvertimeWorksArgs) => {
  const res = await getApprovalRequestsOvertimeWorks(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の残業申請を新規作成します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請の内容を勤怠に反映させるかの設定次第でリクエスト時に指定するパラメータが異なります。残業申請に必要な設定情報の取得APIで確認してください。</li>
  <ul>
    <li>勤怠に反映する設定の場合</li>
    <ul>
      <li>設定情報の取得APIで受け取った値を用いてパラメータを指定します。</li>
      <li>早出（early_work_start_at, early_work_end_at）か残業（overtime_work_start_at, overtime_work_end_at）のどちらか、もしくは両方を指定してください。</li>
      <ul>
        <li>早出・残業両方とも指定しなかった場合は取り消し申請となります。対象日の承認済み残業申請は全て取り消され、打刻データがあれば勤怠に反映し直します。</li>
      </ul>
      <li>早出の終了時刻（early_work_end_at）は所定の出勤時刻と同じ、残業の開始時刻（overtime_work_start_at）は所定の退勤時刻と同じ時刻を指定する必要があります。</li>
      <li>早出・残業の時刻に指定できる分の単位はそれぞれ設定（early_work_mins_unit, overtime_work_mins_unit）の通りです。</li>
    </ul>
    <li>勤怠に反映しない設定の場合</li>
    <ul>
      <li>残業開始（start_at）と残業終了（end_at）を指定してください。</li>
    </ul>
  </ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 残業申請の作成
 */

export type createApprovalRequestsOvertimeWorkArgs = {
  bodyParams: ApiV1OvertimeWorkRequest;
}

export const createApprovalRequestsOvertimeWorkHandler = async (args: createApprovalRequestsOvertimeWorkArgs) => {
  const res = await createApprovalRequestsOvertimeWork(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の残業申請情報を取得します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 残業申請の取得
 */

export type getApprovalRequestsOvertimeWorkArgs = {
  pathParams: {
    id: number
  };
  queryParams: GetApprovalRequestsOvertimeWorkParams;
}

export const getApprovalRequestsOvertimeWorkHandler = async (args: getApprovalRequestsOvertimeWorkArgs) => {
  const res = await getApprovalRequestsOvertimeWork(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の残業申請情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請の内容を勤怠に反映させるかの設定次第でリクエスト時に指定するパラメータが異なります。残業申請に必要な設定情報の取得APIで確認してください。</li>
  <ul>
    <li>勤怠に反映する設定の場合</li>
    <ul>
      <li>設定情報の取得APIで受け取った値を用いてパラメータを指定します。</li>
      <li>早出（early_work_start_at, early_work_end_at）か残業（overtime_work_start_at, overtime_work_end_at）のどちらか、もしくは両方を指定してください。</li>
      <ul>
        <li>早出・残業両方とも指定しなかった場合は取り消し申請となります。対象日の承認済み残業申請は全て取り消され、打刻データがあれば勤怠に反映し直します。</li>
      </ul>
      <li>早出の終了時刻（early_work_end_at）は所定の出勤時刻と同じ、残業の開始時刻（overtime_work_start_at）は所定の退勤時刻と同じ時刻を指定する必要があります。</li>
      <li>早出・残業の時刻に指定できる分の単位はそれぞれ設定（early_work_mins_unit, overtime_work_mins_unit）の通りです。</li>
    </ul>
    <li>勤怠に反映しない設定の場合</li>
    <ul>
      <li>残業開始（start_at）と残業終了（end_at）を指定してください。</li>
    </ul>
  </ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 残業申請の更新
 */

export type updateApprovalRequestsOvertimeWorkArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1OvertimeWorkRequest;
}

export const updateApprovalRequestsOvertimeWorkHandler = async (args: updateApprovalRequestsOvertimeWorkArgs) => {
  const res = await updateApprovalRequestsOvertimeWork(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の残業申請情報を削除します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 残業申請の削除
 */

export type destroyApprovalRequestsOvertimeWorkArgs = {
  pathParams: {
    id: number
  };
  queryParams: DestroyApprovalRequestsOvertimeWorkParams;
}

export const destroyApprovalRequestsOvertimeWorkHandler = async (args: destroyApprovalRequestsOvertimeWorkArgs) => {
  const res = await destroyApprovalRequestsOvertimeWork(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の残業申請情報を承認操作します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
  <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
  <ul>
    <li>status: draft</li>
    <li>approval_flow_logs.action: cancel</li>
  </ul>
</ul>
 * @summary 残業申請の承認操作
 */

export type actionApprovalRequestsOvertimeWorkArgs = {
  pathParams: {
    id: number
  };
  bodyParams: ApiV1ApprovalActionRequest;
}

export const actionApprovalRequestsOvertimeWorkHandler = async (args: actionApprovalRequestsOvertimeWorkArgs) => {
  const res = await actionApprovalRequestsOvertimeWork(args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員・日付の残業申請に必要な設定情報を取得します。</p>
<ul>
  <li>取得できる設定の一覧</li>
  <ul>
    <li>勤怠カレンダーに申請を反映するかどうかの設定</li>
    <ul>
      <li>この設定により、残業申請の作成や更新のリクエスト時に使用するパラメータが変わります。詳細は、残業申請の作成や更新の仕様を参照してください。</li>
    </ul>
    <li>所定の出退勤時間</li>
    <ul>
      <li>反映あり申請の場合、残業申請の作成や更新のリクエスト時に所定の出退勤時間が必要になります。詳細は、残業申請の作成や更新の仕様を参照してください。</li>
    </ul>
    <li>申請で指定できる分の単位</li>
    <ul>
      <li>反映あり申請の場合、勤務賃金設定の申請の単位設定によって、残業申請できる分単位が変わります。</li>
    </ul>
  </ul>
</ul>
 * @summary 残業申請に必要な設定情報の取得
 */

export type getApprovalRequestsOvertimeWorkSettingArgs = {
  queryParams: GetApprovalRequestsOvertimeWorkSettingParams;
}

export const getApprovalRequestsOvertimeWorkSettingHandler = async (args: getApprovalRequestsOvertimeWorkSettingArgs) => {
  const res = await getApprovalRequestsOvertimeWorkSetting(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の申請経路一覧を取得する。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>指定した事業所の従業員に紐づくユーザーのみ実行可能です。</li>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 申請経路一覧の取得
 */

export type getApprovalFlowRoutesArgs = {
  queryParams: GetApprovalFlowRoutesParams;
}

export const getApprovalFlowRoutesHandler = async (args: getApprovalFlowRoutesArgs) => {
  const res = await getApprovalFlowRoutes(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した事業所の申請経路を取得する。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>指定した事業所の従業員に紐づくユーザーのみ実行可能です。</li>
  <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
  <ul>
    <li>役職指定（申請者の所属部門）</li>
    <li>役職指定（申請時に部門指定）</li>
    <li>部門および役職指定</li>
  </ul>
</ul>
 * @summary 申請経路の取得
 */

export type getApprovalFlowRouteArgs = {
  pathParams: {
    id: number
  };
  queryParams: GetApprovalFlowRouteParams;
}

export const getApprovalFlowRouteHandler = async (args: getApprovalFlowRouteArgs) => {
  const res = await getApprovalFlowRoute(args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * 
指定した年の年末調整対象のリスト返します。
 * @summary 年末調整対象一覧の取得
 */

export type getYearendAdjustmentEmployeesArgs = {
  pathParams: {
    year: number
  };
  queryParams: GetYearendAdjustmentEmployeesParams;
}

export const getYearendAdjustmentEmployeesHandler = async (args: getYearendAdjustmentEmployeesArgs) => {
  const res = await getYearendAdjustmentEmployees(args.pathParams.year, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * 指定した年、従業員IDの年末調整の詳細内容を返します。<br>
年末調整対象外の従業員は、本人情報、給与・賞与、前職情報のみが取得できます。
 * @summary 年末調整の取得
 */

export type getYearendAdjustmentEmployeeArgs = {
  pathParams: {
    year: number,
    employeeId: number
  };
  queryParams: GetYearendAdjustmentEmployeeParams;
}

export const getYearendAdjustmentEmployeeHandler = async (args: getYearendAdjustmentEmployeeArgs) => {
  const res = await getYearendAdjustmentEmployee(args.pathParams.year, args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の姓名・住所などを更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員情報の更新
 */

export type putYearendAdjustmentEmployeeArgs = {
  pathParams: {
    year: number,
    employeeId: number
  };
  bodyParams: ApiV1EmployeeYearendAdjustmentControllerUpdateEmployeeBody;
}

export const putYearendAdjustmentEmployeeHandler = async (args: putYearendAdjustmentEmployeeArgs) => {
  const res = await putYearendAdjustmentEmployee(args.pathParams.year, args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の給与・賞与を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員給与・賞与の更新
 */

export type putYearendAdjustmentPayrollAndBonusArgs = {
  pathParams: {
    year: number,
    employeeId: number
  };
  bodyParams: ApiV1EmployeeYearendAdjustmentControllerUpdatePayrollAndBonusBody;
}

export const putYearendAdjustmentPayrollAndBonusHandler = async (args: putYearendAdjustmentPayrollAndBonusArgs) => {
  const res = await putYearendAdjustmentPayrollAndBonus(args.pathParams.year, args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した年末調整の家族情報を更新します。</p>
<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
  <li>idがない場合は新規作成、destroyがtrueの場合は削除になります。</li>
</ul>
 * @summary 年末調整家族情報の更新
 */

export type putYearendAdjustmentDependentsArgs = {
  pathParams: {
    year: number,
    employeeId: number
  };
  bodyParams: ApiV1EmployeeYearendAdjustmentControllerUpdateDependentsBody;
}

export const putYearendAdjustmentDependentsHandler = async (args: putYearendAdjustmentDependentsArgs) => {
  const res = await putYearendAdjustmentDependents(args.pathParams.year, args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の前職情報を更新します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員前職情報の更新
 */

export type putYearendAdjustmentPreviousJobArgs = {
  pathParams: {
    year: number,
    employeeId: number
  };
  bodyParams: ApiV1EmployeeYearendAdjustmentControllerUpdatePreviousJobBody;
}

export const putYearendAdjustmentPreviousJobHandler = async (args: putYearendAdjustmentPreviousJobArgs) => {
  const res = await putYearendAdjustmentPreviousJob(args.pathParams.year, args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の前職情報を削除します。</p>

<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員前職情報の削除
 */

export type destroyYearendAdjustmentPreviousJobArgs = {
  pathParams: {
    year: number,
    employeeId: number
  };
  queryParams: DestroyYearendAdjustmentPreviousJobParams;
}

export const destroyYearendAdjustmentPreviousJobHandler = async (args: destroyYearendAdjustmentPreviousJobArgs) => {
  const res = await destroyYearendAdjustmentPreviousJob(args.pathParams.year, args.pathParams.employee_id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の保険料情報を作成します。</p>
<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員保険料情報の作成
 */

export type postYearendAdjustmentInsurancesArgs = {
  pathParams: {
    year: number,
    employeeId: number
  };
  bodyParams: ApiV1EmployeeYearendAdjustmentControllerUpdateInsuranceBody;
}

export const postYearendAdjustmentInsurancesHandler = async (args: postYearendAdjustmentInsurancesArgs) => {
  const res = await postYearendAdjustmentInsurances(args.pathParams.year, args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の保険料情報を更新します。</p>
<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
  <li>certification_type="xml"の場合、recipient_first_name、recipient_last_name、recipient_relationshipのみが更新の対象となります。</li>
</ul>
 * @summary 年末調整従業員保険料情報の更新
 */

export type putYearendAdjustmentInsurancesArgs = {
  pathParams: {
    year: number,
    employeeId: number,
    id: number
  };
  bodyParams: ApiV1EmployeeYearendAdjustmentControllerUpdateInsuranceBody;
}

export const putYearendAdjustmentInsurancesHandler = async (args: putYearendAdjustmentInsurancesArgs) => {
  const res = await putYearendAdjustmentInsurances(args.pathParams.year, args.pathParams.employee_id, args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の保険料情報を削除します。</p>
<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員保険料情報の削除
 */

export type destroyYearendAdjustmentInsurancesArgs = {
  pathParams: {
    year: number,
    employeeId: number,
    id: number
  };
  queryParams: DestroyYearendAdjustmentInsurancesParams;
}

export const destroyYearendAdjustmentInsurancesHandler = async (args: destroyYearendAdjustmentInsurancesArgs) => {
  const res = await destroyYearendAdjustmentInsurances(args.pathParams.year, args.pathParams.employee_id, args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の住宅ローン控除額を更新します。</p>
<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員住宅ローン控除額の更新
 */

export type putYearendAdjustmentHousingLoanDeductionArgs = {
  pathParams: {
    year: number,
    employeeId: number
  };
  bodyParams: PutYearendAdjustmentHousingLoanDeductionBody;
}

export const putYearendAdjustmentHousingLoanDeductionHandler = async (args: putYearendAdjustmentHousingLoanDeductionArgs) => {
  const res = await putYearendAdjustmentHousingLoanDeduction(args.pathParams.year, args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の住宅ローンを作成します。</p>
<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員住宅ローンの作成
 */

export type postYearendAdjustmentHousingLoanArgs = {
  pathParams: {
    year: number,
    employeeId: number
  };
  bodyParams: ApiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanBody;
}

export const postYearendAdjustmentHousingLoanHandler = async (args: postYearendAdjustmentHousingLoanArgs) => {
  const res = await postYearendAdjustmentHousingLoan(args.pathParams.year, args.pathParams.employee_id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の住宅ローンを更新します。</p>
<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員住宅ローンの更新
 */

export type putYearendAdjustmentHousingLoanArgs = {
  pathParams: {
    year: number,
    employeeId: number,
    id: number
  };
  bodyParams: ApiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanBody;
}

export const putYearendAdjustmentHousingLoanHandler = async (args: putYearendAdjustmentHousingLoanArgs) => {
  const res = await putYearendAdjustmentHousingLoan(args.pathParams.year, args.pathParams.employee_id, args.pathParams.id, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * <h2 id="">概要</h2>
<p>指定した従業員の住宅ローンを削除します。</p>
<h2 id="_1">注意点</h2>
<ul>
  <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
</ul>
 * @summary 年末調整従業員住宅ローンの削除
 */

export type destroyYearendAdjustmentHousingLoanArgs = {
  pathParams: {
    year: number,
    employeeId: number,
    id: number
  };
  queryParams: DestroyYearendAdjustmentHousingLoanParams;
}

export const destroyYearendAdjustmentHousingLoanHandler = async (args: destroyYearendAdjustmentHousingLoanArgs) => {
  const res = await destroyYearendAdjustmentHousingLoan(args.pathParams.year, args.pathParams.employee_id, args.pathParams.id, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
