/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * freee人事労務 API
 * 
<p>freee人事労務のAPI仕様です。</p>

<hr />

<h2 id="start_guide">スタートガイド</h2>

<p>freee API開発がはじめての方は<a href="https://developer.freee.co.jp/getting-started">freee API スタートガイド</a>を参照してください。</p>

<hr />
<h2 id="specification">仕様</h2>

<h3 id="api_endpoint">APIエンドポイント</h3>

<p>https://api.freee.co.jp/hr</p>

<h3 id="about_authorize">認証について</h3>

<p>OAuth2.0を利用します。<a href="https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc" target="_blank">詳細はリファレンスの認証に関する記載を参照してください。</a></p>

<h3 id="data_format">データフォーマット</h3>

<p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>

<h3 id="compatibility">後方互換性ありの変更</h3>

<p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>

<ul>
<li>新しいAPIリソース・エンドポイントの追加</li>
<li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li>
<li>既存のAPIレスポンスに対する新しいプロパティの追加</li>
<li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li>
<li>keyとなっているidやcodeの長さの変更（長くする）</li>
<li>エラーメッセージの変更</li>
</ul>

<h3 id="common_response_header">共通レスポンスヘッダー</h3>

<p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>

<ul>
<li>
<p>X-Request-Id</p>
<ul>
<li>各リクエスト毎に発行されるID</li>
</ul>
</li>
</ul>

<h3 id="error_response">共通エラーレスポンス</h3>

<p>APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。</p>

  <table border="1">
  <tbody>
    <tr>
      <th style="padding: 10px"><strong>ステータスコード</strong></th>
      <th style="padding: 10px"><strong>原因</strong></th>
    </tr>
    <tr><td style="padding: 10px">400</td><td style="padding: 10px">リクエストパラメータが不正</td></tr>
    <tr><td style="padding: 10px">401</td><td style="padding: 10px">アクセストークンが無効</td></tr>
    <tr><td style="padding: 10px">403</td><td style="padding: 10px">アクセス権限がない</td></tr>
    <tr><td style="padding: 10px">404</td><td style="padding: 10px">リソースが存在しない</td></tr>
    <tr><td style="padding: 10px">429</td><td style="padding: 10px">リクエスト回数制限を超えた</td></tr>
    <tr><td style="padding: 10px">503</td><td style="padding: 10px">システム内で予期しないエラーが発生</td></tr>
  </tbody>
</table>

<p>メッセージボディ内の <code>messages</code> にはエラー内容を説明する文字列が入ります。</p>
<pre><code>  {
    &quot;status_code&quot; : 400,
    &quot;errors&quot; : [
      {
        &quot;type&quot; : &quot;bad_request&quot;,
        &quot;messages&quot; : [
          &quot;リクエストの形式が不正です。&quot;
        ]
      }
    ]
  }  </code></pre>

</br>

<h3 id="api_rate_limit">API使用制限</h3> 
<p>APIリクエストは1時間で10000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。</p>
<pre><code>X-Ratelimit-Limit:10000
X-Ratelimit-Remaining:9998
X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z
</code></pre>

<br> 各ヘッダの意味は次のとおりです。</p>

 <table border="1">
  <tbody>
    <tr>
      <th style="padding: 10px"><strong>ヘッダ名</strong></th>
      <th style="padding: 10px"><strong>説明</strong></th>
    </tr>
    <tr><td style="padding: 10px">X-RateLimit-Limit</td><td style="padding: 10px">使用回数の上限</td></tr>
    <tr><td style="padding: 10px">X-RateLimit-Remaining</td><td style="padding: 10px">残り使用回数</td></tr>
    <tr><td style="padding: 10px">X-RateLimit-Reset</td><td style="padding: 10px">使用回数がリセットされる時刻</td></tr>
  </tbody>
</table>

<p>上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。<br> その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>

</br>

<h3 id="api_rate_limit">プランごとの利用可能API</h3> 

<p>契約プランごとに利用可能なfreee人事労務APIはfreee人事労務のWeb版でご利用できる機能と同様です。例えば、スタンダードプラン（または旧ベーシックプラン）を契約している場合、Web版では打刻機能をご利用いただけますので、APIでもタイムレコーダー(打刻)APIが利用可能です。<a href="https://support.freee.co.jp/hc/ja/articles/203309710" target="_blank">freee人事労務のWeb版のプラン別機能比較はfreee人事労務のプラン・料金についてのヘルプを参照してください。</a></p>

</br>

<hr />
 * OpenAPI spec version: 2022-02-01
 */

import { ApiV1UsersMeSerializer,
Error,
UnauthorizedError,
ForbiddenError,
AccessDeniedError,
InternalServerError,
ApiV1CompaniesEmployeeSerializer,
GetCompanyEmployeesParams,
ApiV1EmployeesIndexSerializer,
GetEmployeesParams,
ApiV1EmployeesControllerCreateResponse,
ApiV1EmployeesControllerCreateBody,
ApiV1EmployeesControllerShowResponse,
NotfoundError,
GetEmployeeParams,
ApiV1EmployeesControllerUpdateResponse,
ApiV1EmployeesControllerUpdateBody,
DestroyEmployeeParams,
ApiV1EmployeesProfileRulesControllerShowResponse,
GetEmployeeProfileRuleParams,
ApiV1EmployeesProfileRulesControllerUpdateResponse,
ApiV1EmployeesProfileRulesControllerUpdateBody,
ApiV1EmployeesHealthInsuranceRulesControllerShowResponse,
GetEmployeeHealthInsuranceRuleParams,
ApiV1EmployeesHealthInsuranceRulesControllerUpdateResponse,
ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody,
ApiV1EmployeesWelfarePensionInsuranceRulesControllerShowResponse,
GetEmployeeWelfarePensionInsuranceRuleParams,
ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateResponse,
ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody,
ApiV1EmployeesDependentRulesControllerIndexResponse,
GetEmployeeDependentRulesParams,
ApiV1EmployeesDependentRulesControllerBulkUpdateResponse,
ApiV1EmployeesDependentRulesControllerBulkUpdateBody,
ApiV1EmployeesBankAccountRulesControllerShowResponse,
GetEmployeeBankAccountRuleParams,
ApiV1EmployeesBankAccountRulesControllerUpdateResponse,
ApiV1EmployeesBankAccountRulesControllerUpdateBody,
ApiV1EmployeesBasicPayRulesControllerShowResponse,
GetEmployeeBasicPayRuleParams,
ApiV1EmployeesBasicPayRulesControllerUpdateResponse,
ApiV1EmployeesBasicPayRulesControllerUpdateBody,
ApiV1EmployeesProfileCustomFieldRulesControllerIndexResponse,
GetEmployeeProfileCustomFieldsRuleParams,
GetEmployeeWorkRecord200,
GetEmployeeWorkRecordParams,
ApiV1EmployeesWorkRecordSerializer,
UpdateEmployeeWorkRecordBody,
DestroyEmployeeWorkRecordParams,
ApiV1EmployeesWorkRecordSummarySerializer,
GetEmployeeWorkRecordSummaryParams,
ApiV1EmployeesWorkRecordSummaryControllerUpdateBody,
ApiV1EmployeesTimeClocksControllerIndexResponse,
GetEmployeeTimeClocksParams,
ApiV1EmployeesTimeClocksControllerCreateResponse,
ApiV1EmployeesTimeClocksControllerCreateBody,
ApiV1EmployeesTimeClocksControllerShowResponse,
GetEmployeeTimeClockParams,
ApiV1EmployeesTimeClocksControllerAvailableTypesResponse,
GetEmployeeTimeClocksAvailableTypesParams,
GetEmployeesSpecialHolidays200,
GetEmployeesSpecialHolidaysParams,
ApiV1EmployeesAttendanceTagSummariesControllerShowResponse,
GetEmployeesAttendanceTagSummariesParams,
ApiV1EmployeesAttendanceTagSummariesControllerUpdateResponse,
ApiV1EmployeesAttendanceTagSummariesControllerUpdateBody,
ApiV1EmployeesAttendanceTagsControllerIndexResponse,
GetEmployeesAttendanceTagsParams,
ApiV1EmployeesAttendanceTagsControllerShowResponse,
GetEmployeesAttendanceTagsByDateParams,
UpdateEmployeesAttendanceTags200,
ApiV1EmployeesAttendanceTagsControllerUpdateBody,
ApiV1SalariesEmployeePayrollStatementsControllerIndexResponse,
GetSalariesEmployeePayrollStatementsParams,
ApiV1SalariesEmployeePayrollStatementsControllerShowResponse,
GetSalariesEmployeePayrollStatementParams,
ApiV1BonusesEmployeePayrollStatementsIndexSerializer,
GetBonusesEmployeePayrollStatementsParams,
ApiV1BonusesEmployeePayrollStatementsControllerShowResponse,
GetBonusesEmployeePayrollStatementParams,
ApiV1EmployeeGroupMembershipsIndexSerializer,
GetEmployeeGroupMembershipsParams,
ApiV1GroupsIndexResponse,
GetGroupsParams,
ApiV1GroupResponse,
ApiV1GroupCreateRequest,
ApiV1GroupUpdateRequest,
DestroyGroupParams,
ApiV1PositionIndexResponse,
GetPositionsParams,
ApiV1PositionResponse,
ApiV1PositionRequest,
DestroyPositionParams,
ApiV1MonthlyAttendanceIndexResponse,
GetApprovalRequestsMonthlyAttendancesParams,
ApiV1MonthlyAttendanceResponse,
ApiV1MonthlyAttendanceCreateRequest,
GetApprovalRequestsMonthlyAttendanceParams,
ApiV1MonthlyAttendanceUpdateRequest,
DestroyApprovalRequestsMonthlyAttendanceParams,
ApiV1ApprovalActionRequest,
GetApprovalRequestsWorkTimes200,
GetApprovalRequestsWorkTimesParams,
CreateApprovalRequestsWorkTime201,
CreateApprovalRequestsWorkTimeBody,
Schema,
GetApprovalRequestsWorkTimeParams,
DestroyApprovalRequestsWorkTimeParams,
ApiV1PaidHolidayIndexResponse,
GetApprovalRequestsPaidHolidaysParams,
ApiV1PaidHolidayResponse,
CreateApprovalRequestsPaidHolidayBody,
GetApprovalRequestsPaidHolidayParams,
UpdateApprovalRequestsPaidHolidayBody,
DestroyApprovalRequestsPaidHolidayParams,
ApiV1specialHolidayIndexResponse,
GetApprovalRequestsSpecialHolidaysParams,
ApiV1specialHolidayResponse,
ApiV1specialHolidayRequest,
GetApprovalRequestsSpecialHolidayParams,
DestroyApprovalRequestsSpecialHolidayParams,
ApiV1OvertimeWorkIndexResponse,
GetApprovalRequestsOvertimeWorksParams,
ApiV1OvertimeWorkResponse,
ApiV1OvertimeWorkRequest,
GetApprovalRequestsOvertimeWorkParams,
DestroyApprovalRequestsOvertimeWorkParams,
GetApprovalRequestsOvertimeWorkSetting200,
GetApprovalRequestsOvertimeWorkSettingParams,
ApiV1ApprovalFlowRoutesIndexResponse,
GetApprovalFlowRoutesParams,
ApiV1ApprovalFlowRouteResponse,
GetApprovalFlowRouteParams,
ApiV1EmployeeYearendAdjustmentControllerIndexResponse,
GetYearendAdjustmentEmployeesParams,
ApiV1EmployeeYearendAdjustmentControllerShowResponse,
GetYearendAdjustmentEmployeeParams,
ApiV1EmployeeYearendAdjustmentControllerUpdateEmployeeResponse,
ApiV1EmployeeYearendAdjustmentControllerUpdateEmployeeBody,
ApiV1EmployeeYearendAdjustmentControllerUpdatePayrollAndBonusResponse,
ApiV1EmployeeYearendAdjustmentControllerUpdatePayrollAndBonusBody,
ApiV1EmployeeYearendAdjustmentControllerUpdateDependentsResponse,
ApiV1EmployeeYearendAdjustmentControllerUpdateDependentsBody,
ApiV1EmployeeYearendAdjustmentControllerUpdatePreviousJobResponse,
ApiV1EmployeeYearendAdjustmentControllerUpdatePreviousJobBody,
DestroyYearendAdjustmentPreviousJobParams,
ApiV1EmployeeYearendAdjustmentControllerUpdateInsuranceResponse,
ApiV1EmployeeYearendAdjustmentControllerUpdateInsuranceBody,
DestroyYearendAdjustmentInsurancesParams,
PutYearendAdjustmentHousingLoanDeduction200,
PutYearendAdjustmentHousingLoanDeductionBody,
ApiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanResponse,
ApiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanBody,
DestroyYearendAdjustmentHousingLoanParams } from './http-schemas';

import { customFetch } from './custom-fetch';
export type getUsersMeResponse200 = {
  data: ApiV1UsersMeSerializer
  status: 200
}

export type getUsersMeResponse400 = {
  data: Error
  status: 400
}

export type getUsersMeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getUsersMeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getUsersMeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getUsersMeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getUsersMeResponseComposite = getUsersMeResponse200 | getUsersMeResponse400 | getUsersMeResponse401 | getUsersMeResponse403ApplicationProblemJson | getUsersMeResponse403ApplicationJson | getUsersMeResponse500;
    
export type getUsersMeResponse = getUsersMeResponseComposite & {
  headers: Headers;
}

export const getGetUsersMeUrl = () => {


  

  return `https://api.freee.co.jp/hr/api/v1/users/me`
}

export const getUsersMe = async ( options?: RequestInit): Promise<getUsersMeResponse> => {
  
  return customFetch<getUsersMeResponse>(getGetUsersMeUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getCompanyEmployeesResponse200 = {
  data: ApiV1CompaniesEmployeeSerializer[]
  status: 200
}

export type getCompanyEmployeesResponse400 = {
  data: Error
  status: 400
}

export type getCompanyEmployeesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getCompanyEmployeesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getCompanyEmployeesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getCompanyEmployeesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getCompanyEmployeesResponseComposite = getCompanyEmployeesResponse200 | getCompanyEmployeesResponse400 | getCompanyEmployeesResponse401 | getCompanyEmployeesResponse403ApplicationProblemJson | getCompanyEmployeesResponse403ApplicationJson | getCompanyEmployeesResponse500;
    
export type getCompanyEmployeesResponse = getCompanyEmployeesResponseComposite & {
  headers: Headers;
}

export const getGetCompanyEmployeesUrl = (companyId: number,
    params?: GetCompanyEmployeesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/companies/${companyId}/employees?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/companies/${companyId}/employees`
}

export const getCompanyEmployees = async (companyId: number,
    params?: GetCompanyEmployeesParams, options?: RequestInit): Promise<getCompanyEmployeesResponse> => {
  
  return customFetch<getCompanyEmployeesResponse>(getGetCompanyEmployeesUrl(companyId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getEmployeesResponse200 = {
  data: ApiV1EmployeesIndexSerializer
  status: 200
}

export type getEmployeesResponse400 = {
  data: Error
  status: 400
}

export type getEmployeesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeesResponseComposite = getEmployeesResponse200 | getEmployeesResponse400 | getEmployeesResponse401 | getEmployeesResponse403ApplicationProblemJson | getEmployeesResponse403ApplicationJson | getEmployeesResponse500;
    
export type getEmployeesResponse = getEmployeesResponseComposite & {
  headers: Headers;
}

export const getGetEmployeesUrl = (params: GetEmployeesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees`
}

export const getEmployees = async (params: GetEmployeesParams, options?: RequestInit): Promise<getEmployeesResponse> => {
  
  return customFetch<getEmployeesResponse>(getGetEmployeesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createEmployeeResponse201 = {
  data: ApiV1EmployeesControllerCreateResponse
  status: 201
}

export type createEmployeeResponse400 = {
  data: Error
  status: 400
}

export type createEmployeeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type createEmployeeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type createEmployeeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type createEmployeeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type createEmployeeResponseComposite = createEmployeeResponse201 | createEmployeeResponse400 | createEmployeeResponse401 | createEmployeeResponse403ApplicationProblemJson | createEmployeeResponse403ApplicationJson | createEmployeeResponse500;
    
export type createEmployeeResponse = createEmployeeResponseComposite & {
  headers: Headers;
}

export const getCreateEmployeeUrl = () => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees`
}

export const createEmployee = async (apiV1EmployeesControllerCreateBody?: ApiV1EmployeesControllerCreateBody, options?: RequestInit): Promise<createEmployeeResponse> => {
  
  return customFetch<createEmployeeResponse>(getCreateEmployeeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesControllerCreateBody,)
  }
);}



export type getEmployeeResponse200 = {
  data: ApiV1EmployeesControllerShowResponse
  status: 200
}

export type getEmployeeResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeResponse404 = {
  data: NotfoundError
  status: 404
}

export type getEmployeeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeResponseComposite = getEmployeeResponse200 | getEmployeeResponse400 | getEmployeeResponse401 | getEmployeeResponse403ApplicationProblemJson | getEmployeeResponse403ApplicationJson | getEmployeeResponse404 | getEmployeeResponse500;
    
export type getEmployeeResponse = getEmployeeResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeUrl = (id: number,
    params: GetEmployeeParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${id}`
}

export const getEmployee = async (id: number,
    params: GetEmployeeParams, options?: RequestInit): Promise<getEmployeeResponse> => {
  
  return customFetch<getEmployeeResponse>(getGetEmployeeUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeeResponse200 = {
  data: ApiV1EmployeesControllerUpdateResponse
  status: 200
}

export type updateEmployeeResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeeResponse404 = {
  data: NotfoundError
  status: 404
}

export type updateEmployeeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeeResponseComposite = updateEmployeeResponse200 | updateEmployeeResponse400 | updateEmployeeResponse401 | updateEmployeeResponse403ApplicationProblemJson | updateEmployeeResponse403ApplicationJson | updateEmployeeResponse404 | updateEmployeeResponse500;
    
export type updateEmployeeResponse = updateEmployeeResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeeUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${id}`
}

export const updateEmployee = async (id: number,
    apiV1EmployeesControllerUpdateBody?: ApiV1EmployeesControllerUpdateBody, options?: RequestInit): Promise<updateEmployeeResponse> => {
  
  return customFetch<updateEmployeeResponse>(getUpdateEmployeeUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesControllerUpdateBody,)
  }
);}



export type destroyEmployeeResponse204 = {
  data: null
  status: 204
}

export type destroyEmployeeResponse400 = {
  data: Error
  status: 400
}

export type destroyEmployeeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyEmployeeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyEmployeeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyEmployeeResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyEmployeeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyEmployeeResponseComposite = destroyEmployeeResponse204 | destroyEmployeeResponse400 | destroyEmployeeResponse401 | destroyEmployeeResponse403ApplicationProblemJson | destroyEmployeeResponse403ApplicationJson | destroyEmployeeResponse404 | destroyEmployeeResponse500;
    
export type destroyEmployeeResponse = destroyEmployeeResponseComposite & {
  headers: Headers;
}

export const getDestroyEmployeeUrl = (id: number,
    params: DestroyEmployeeParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${id}`
}

export const destroyEmployee = async (id: number,
    params: DestroyEmployeeParams, options?: RequestInit): Promise<destroyEmployeeResponse> => {
  
  return customFetch<destroyEmployeeResponse>(getDestroyEmployeeUrl(id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getEmployeeProfileRuleResponse200 = {
  data: ApiV1EmployeesProfileRulesControllerShowResponse
  status: 200
}

export type getEmployeeProfileRuleResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeProfileRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeProfileRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeProfileRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeProfileRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeProfileRuleResponseComposite = getEmployeeProfileRuleResponse200 | getEmployeeProfileRuleResponse400 | getEmployeeProfileRuleResponse401 | getEmployeeProfileRuleResponse403ApplicationProblemJson | getEmployeeProfileRuleResponse403ApplicationJson | getEmployeeProfileRuleResponse500;
    
export type getEmployeeProfileRuleResponse = getEmployeeProfileRuleResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeProfileRuleUrl = (employeeId: number,
    params: GetEmployeeProfileRuleParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/profile_rule?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/profile_rule`
}

export const getEmployeeProfileRule = async (employeeId: number,
    params: GetEmployeeProfileRuleParams, options?: RequestInit): Promise<getEmployeeProfileRuleResponse> => {
  
  return customFetch<getEmployeeProfileRuleResponse>(getGetEmployeeProfileRuleUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeeProfileRuleResponse200 = {
  data: ApiV1EmployeesProfileRulesControllerUpdateResponse
  status: 200
}

export type updateEmployeeProfileRuleResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeeProfileRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeeProfileRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeeProfileRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeeProfileRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeeProfileRuleResponseComposite = updateEmployeeProfileRuleResponse200 | updateEmployeeProfileRuleResponse400 | updateEmployeeProfileRuleResponse401 | updateEmployeeProfileRuleResponse403ApplicationProblemJson | updateEmployeeProfileRuleResponse403ApplicationJson | updateEmployeeProfileRuleResponse500;
    
export type updateEmployeeProfileRuleResponse = updateEmployeeProfileRuleResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeeProfileRuleUrl = (employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/profile_rule`
}

export const updateEmployeeProfileRule = async (employeeId: number,
    apiV1EmployeesProfileRulesControllerUpdateBody?: ApiV1EmployeesProfileRulesControllerUpdateBody, options?: RequestInit): Promise<updateEmployeeProfileRuleResponse> => {
  
  return customFetch<updateEmployeeProfileRuleResponse>(getUpdateEmployeeProfileRuleUrl(employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesProfileRulesControllerUpdateBody,)
  }
);}



export type getEmployeeHealthInsuranceRuleResponse200 = {
  data: ApiV1EmployeesHealthInsuranceRulesControllerShowResponse
  status: 200
}

export type getEmployeeHealthInsuranceRuleResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeHealthInsuranceRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeHealthInsuranceRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeHealthInsuranceRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeHealthInsuranceRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeHealthInsuranceRuleResponseComposite = getEmployeeHealthInsuranceRuleResponse200 | getEmployeeHealthInsuranceRuleResponse400 | getEmployeeHealthInsuranceRuleResponse401 | getEmployeeHealthInsuranceRuleResponse403ApplicationProblemJson | getEmployeeHealthInsuranceRuleResponse403ApplicationJson | getEmployeeHealthInsuranceRuleResponse500;
    
export type getEmployeeHealthInsuranceRuleResponse = getEmployeeHealthInsuranceRuleResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeHealthInsuranceRuleUrl = (employeeId: number,
    params: GetEmployeeHealthInsuranceRuleParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/health_insurance_rule?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/health_insurance_rule`
}

export const getEmployeeHealthInsuranceRule = async (employeeId: number,
    params: GetEmployeeHealthInsuranceRuleParams, options?: RequestInit): Promise<getEmployeeHealthInsuranceRuleResponse> => {
  
  return customFetch<getEmployeeHealthInsuranceRuleResponse>(getGetEmployeeHealthInsuranceRuleUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeeHealthInsuranceRuleResponse200 = {
  data: ApiV1EmployeesHealthInsuranceRulesControllerUpdateResponse
  status: 200
}

export type updateEmployeeHealthInsuranceRuleResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeeHealthInsuranceRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeeHealthInsuranceRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeeHealthInsuranceRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeeHealthInsuranceRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeeHealthInsuranceRuleResponseComposite = updateEmployeeHealthInsuranceRuleResponse200 | updateEmployeeHealthInsuranceRuleResponse400 | updateEmployeeHealthInsuranceRuleResponse401 | updateEmployeeHealthInsuranceRuleResponse403ApplicationProblemJson | updateEmployeeHealthInsuranceRuleResponse403ApplicationJson | updateEmployeeHealthInsuranceRuleResponse500;
    
export type updateEmployeeHealthInsuranceRuleResponse = updateEmployeeHealthInsuranceRuleResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeeHealthInsuranceRuleUrl = (employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/health_insurance_rule`
}

export const updateEmployeeHealthInsuranceRule = async (employeeId: number,
    apiV1EmployeesHealthInsuranceRulesControllerUpdateBody?: ApiV1EmployeesHealthInsuranceRulesControllerUpdateBody, options?: RequestInit): Promise<updateEmployeeHealthInsuranceRuleResponse> => {
  
  return customFetch<updateEmployeeHealthInsuranceRuleResponse>(getUpdateEmployeeHealthInsuranceRuleUrl(employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesHealthInsuranceRulesControllerUpdateBody,)
  }
);}



export type getEmployeeWelfarePensionInsuranceRuleResponse200 = {
  data: ApiV1EmployeesWelfarePensionInsuranceRulesControllerShowResponse
  status: 200
}

export type getEmployeeWelfarePensionInsuranceRuleResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeWelfarePensionInsuranceRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeWelfarePensionInsuranceRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeWelfarePensionInsuranceRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeWelfarePensionInsuranceRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeWelfarePensionInsuranceRuleResponseComposite = getEmployeeWelfarePensionInsuranceRuleResponse200 | getEmployeeWelfarePensionInsuranceRuleResponse400 | getEmployeeWelfarePensionInsuranceRuleResponse401 | getEmployeeWelfarePensionInsuranceRuleResponse403ApplicationProblemJson | getEmployeeWelfarePensionInsuranceRuleResponse403ApplicationJson | getEmployeeWelfarePensionInsuranceRuleResponse500;
    
export type getEmployeeWelfarePensionInsuranceRuleResponse = getEmployeeWelfarePensionInsuranceRuleResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeWelfarePensionInsuranceRuleUrl = (employeeId: number,
    params: GetEmployeeWelfarePensionInsuranceRuleParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/welfare_pension_insurance_rule?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/welfare_pension_insurance_rule`
}

export const getEmployeeWelfarePensionInsuranceRule = async (employeeId: number,
    params: GetEmployeeWelfarePensionInsuranceRuleParams, options?: RequestInit): Promise<getEmployeeWelfarePensionInsuranceRuleResponse> => {
  
  return customFetch<getEmployeeWelfarePensionInsuranceRuleResponse>(getGetEmployeeWelfarePensionInsuranceRuleUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeeWelfarePensionInsuranceRuleResponse200 = {
  data: ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateResponse
  status: 200
}

export type updateEmployeeWelfarePensionInsuranceRuleResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeeWelfarePensionInsuranceRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeeWelfarePensionInsuranceRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeeWelfarePensionInsuranceRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeeWelfarePensionInsuranceRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeeWelfarePensionInsuranceRuleResponseComposite = updateEmployeeWelfarePensionInsuranceRuleResponse200 | updateEmployeeWelfarePensionInsuranceRuleResponse400 | updateEmployeeWelfarePensionInsuranceRuleResponse401 | updateEmployeeWelfarePensionInsuranceRuleResponse403ApplicationProblemJson | updateEmployeeWelfarePensionInsuranceRuleResponse403ApplicationJson | updateEmployeeWelfarePensionInsuranceRuleResponse500;
    
export type updateEmployeeWelfarePensionInsuranceRuleResponse = updateEmployeeWelfarePensionInsuranceRuleResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeeWelfarePensionInsuranceRuleUrl = (employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/welfare_pension_insurance_rule`
}

export const updateEmployeeWelfarePensionInsuranceRule = async (employeeId: number,
    apiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody?: ApiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody, options?: RequestInit): Promise<updateEmployeeWelfarePensionInsuranceRuleResponse> => {
  
  return customFetch<updateEmployeeWelfarePensionInsuranceRuleResponse>(getUpdateEmployeeWelfarePensionInsuranceRuleUrl(employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesWelfarePensionInsuranceRulesControllerUpdateBody,)
  }
);}



export type getEmployeeDependentRulesResponse200 = {
  data: ApiV1EmployeesDependentRulesControllerIndexResponse
  status: 200
}

export type getEmployeeDependentRulesResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeDependentRulesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeDependentRulesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeDependentRulesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeDependentRulesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeDependentRulesResponseComposite = getEmployeeDependentRulesResponse200 | getEmployeeDependentRulesResponse400 | getEmployeeDependentRulesResponse401 | getEmployeeDependentRulesResponse403ApplicationProblemJson | getEmployeeDependentRulesResponse403ApplicationJson | getEmployeeDependentRulesResponse500;
    
export type getEmployeeDependentRulesResponse = getEmployeeDependentRulesResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeDependentRulesUrl = (employeeId: number,
    params: GetEmployeeDependentRulesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/dependent_rules?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/dependent_rules`
}

export const getEmployeeDependentRules = async (employeeId: number,
    params: GetEmployeeDependentRulesParams, options?: RequestInit): Promise<getEmployeeDependentRulesResponse> => {
  
  return customFetch<getEmployeeDependentRulesResponse>(getGetEmployeeDependentRulesUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type bulkUpdateEmployeeDependentRulesResponse200 = {
  data: ApiV1EmployeesDependentRulesControllerBulkUpdateResponse
  status: 200
}

export type bulkUpdateEmployeeDependentRulesResponse400 = {
  data: Error
  status: 400
}

export type bulkUpdateEmployeeDependentRulesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type bulkUpdateEmployeeDependentRulesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type bulkUpdateEmployeeDependentRulesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type bulkUpdateEmployeeDependentRulesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type bulkUpdateEmployeeDependentRulesResponseComposite = bulkUpdateEmployeeDependentRulesResponse200 | bulkUpdateEmployeeDependentRulesResponse400 | bulkUpdateEmployeeDependentRulesResponse401 | bulkUpdateEmployeeDependentRulesResponse403ApplicationProblemJson | bulkUpdateEmployeeDependentRulesResponse403ApplicationJson | bulkUpdateEmployeeDependentRulesResponse500;
    
export type bulkUpdateEmployeeDependentRulesResponse = bulkUpdateEmployeeDependentRulesResponseComposite & {
  headers: Headers;
}

export const getBulkUpdateEmployeeDependentRulesUrl = (employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/dependent_rules/bulk_update`
}

export const bulkUpdateEmployeeDependentRules = async (employeeId: number,
    apiV1EmployeesDependentRulesControllerBulkUpdateBody?: ApiV1EmployeesDependentRulesControllerBulkUpdateBody, options?: RequestInit): Promise<bulkUpdateEmployeeDependentRulesResponse> => {
  
  return customFetch<bulkUpdateEmployeeDependentRulesResponse>(getBulkUpdateEmployeeDependentRulesUrl(employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesDependentRulesControllerBulkUpdateBody,)
  }
);}



export type getEmployeeBankAccountRuleResponse200 = {
  data: ApiV1EmployeesBankAccountRulesControllerShowResponse
  status: 200
}

export type getEmployeeBankAccountRuleResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeBankAccountRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeBankAccountRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeBankAccountRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeBankAccountRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeBankAccountRuleResponseComposite = getEmployeeBankAccountRuleResponse200 | getEmployeeBankAccountRuleResponse400 | getEmployeeBankAccountRuleResponse401 | getEmployeeBankAccountRuleResponse403ApplicationProblemJson | getEmployeeBankAccountRuleResponse403ApplicationJson | getEmployeeBankAccountRuleResponse500;
    
export type getEmployeeBankAccountRuleResponse = getEmployeeBankAccountRuleResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeBankAccountRuleUrl = (employeeId: number,
    params: GetEmployeeBankAccountRuleParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/bank_account_rule?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/bank_account_rule`
}

export const getEmployeeBankAccountRule = async (employeeId: number,
    params: GetEmployeeBankAccountRuleParams, options?: RequestInit): Promise<getEmployeeBankAccountRuleResponse> => {
  
  return customFetch<getEmployeeBankAccountRuleResponse>(getGetEmployeeBankAccountRuleUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeeBankAccountRuleResponse200 = {
  data: ApiV1EmployeesBankAccountRulesControllerUpdateResponse
  status: 200
}

export type updateEmployeeBankAccountRuleResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeeBankAccountRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeeBankAccountRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeeBankAccountRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeeBankAccountRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeeBankAccountRuleResponseComposite = updateEmployeeBankAccountRuleResponse200 | updateEmployeeBankAccountRuleResponse400 | updateEmployeeBankAccountRuleResponse401 | updateEmployeeBankAccountRuleResponse403ApplicationProblemJson | updateEmployeeBankAccountRuleResponse403ApplicationJson | updateEmployeeBankAccountRuleResponse500;
    
export type updateEmployeeBankAccountRuleResponse = updateEmployeeBankAccountRuleResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeeBankAccountRuleUrl = (employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/bank_account_rule`
}

export const updateEmployeeBankAccountRule = async (employeeId: number,
    apiV1EmployeesBankAccountRulesControllerUpdateBody?: ApiV1EmployeesBankAccountRulesControllerUpdateBody, options?: RequestInit): Promise<updateEmployeeBankAccountRuleResponse> => {
  
  return customFetch<updateEmployeeBankAccountRuleResponse>(getUpdateEmployeeBankAccountRuleUrl(employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesBankAccountRulesControllerUpdateBody,)
  }
);}



export type getEmployeeBasicPayRuleResponse200 = {
  data: ApiV1EmployeesBasicPayRulesControllerShowResponse
  status: 200
}

export type getEmployeeBasicPayRuleResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeBasicPayRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeBasicPayRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeBasicPayRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeBasicPayRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeBasicPayRuleResponseComposite = getEmployeeBasicPayRuleResponse200 | getEmployeeBasicPayRuleResponse400 | getEmployeeBasicPayRuleResponse401 | getEmployeeBasicPayRuleResponse403ApplicationProblemJson | getEmployeeBasicPayRuleResponse403ApplicationJson | getEmployeeBasicPayRuleResponse500;
    
export type getEmployeeBasicPayRuleResponse = getEmployeeBasicPayRuleResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeBasicPayRuleUrl = (employeeId: number,
    params: GetEmployeeBasicPayRuleParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/basic_pay_rule?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/basic_pay_rule`
}

export const getEmployeeBasicPayRule = async (employeeId: number,
    params: GetEmployeeBasicPayRuleParams, options?: RequestInit): Promise<getEmployeeBasicPayRuleResponse> => {
  
  return customFetch<getEmployeeBasicPayRuleResponse>(getGetEmployeeBasicPayRuleUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeeBasicPayRuleResponse200 = {
  data: ApiV1EmployeesBasicPayRulesControllerUpdateResponse
  status: 200
}

export type updateEmployeeBasicPayRuleResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeeBasicPayRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeeBasicPayRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeeBasicPayRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeeBasicPayRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeeBasicPayRuleResponseComposite = updateEmployeeBasicPayRuleResponse200 | updateEmployeeBasicPayRuleResponse400 | updateEmployeeBasicPayRuleResponse401 | updateEmployeeBasicPayRuleResponse403ApplicationProblemJson | updateEmployeeBasicPayRuleResponse403ApplicationJson | updateEmployeeBasicPayRuleResponse500;
    
export type updateEmployeeBasicPayRuleResponse = updateEmployeeBasicPayRuleResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeeBasicPayRuleUrl = (employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/basic_pay_rule`
}

export const updateEmployeeBasicPayRule = async (employeeId: number,
    apiV1EmployeesBasicPayRulesControllerUpdateBody?: ApiV1EmployeesBasicPayRulesControllerUpdateBody, options?: RequestInit): Promise<updateEmployeeBasicPayRuleResponse> => {
  
  return customFetch<updateEmployeeBasicPayRuleResponse>(getUpdateEmployeeBasicPayRuleUrl(employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesBasicPayRulesControllerUpdateBody,)
  }
);}



export type getEmployeeProfileCustomFieldsRuleResponse200 = {
  data: ApiV1EmployeesProfileCustomFieldRulesControllerIndexResponse
  status: 200
}

export type getEmployeeProfileCustomFieldsRuleResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeProfileCustomFieldsRuleResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeProfileCustomFieldsRuleResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeProfileCustomFieldsRuleResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeProfileCustomFieldsRuleResponse404 = {
  data: NotfoundError
  status: 404
}

export type getEmployeeProfileCustomFieldsRuleResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeProfileCustomFieldsRuleResponseComposite = getEmployeeProfileCustomFieldsRuleResponse200 | getEmployeeProfileCustomFieldsRuleResponse400 | getEmployeeProfileCustomFieldsRuleResponse401 | getEmployeeProfileCustomFieldsRuleResponse403ApplicationProblemJson | getEmployeeProfileCustomFieldsRuleResponse403ApplicationJson | getEmployeeProfileCustomFieldsRuleResponse404 | getEmployeeProfileCustomFieldsRuleResponse500;
    
export type getEmployeeProfileCustomFieldsRuleResponse = getEmployeeProfileCustomFieldsRuleResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeProfileCustomFieldsRuleUrl = (employeeId: number,
    params: GetEmployeeProfileCustomFieldsRuleParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/profile_custom_fields?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/profile_custom_fields`
}

export const getEmployeeProfileCustomFieldsRule = async (employeeId: number,
    params: GetEmployeeProfileCustomFieldsRuleParams, options?: RequestInit): Promise<getEmployeeProfileCustomFieldsRuleResponse> => {
  
  return customFetch<getEmployeeProfileCustomFieldsRuleResponse>(getGetEmployeeProfileCustomFieldsRuleUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getEmployeeWorkRecordResponse200 = {
  data: GetEmployeeWorkRecord200
  status: 200
}

export type getEmployeeWorkRecordResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeWorkRecordResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeWorkRecordResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeWorkRecordResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeWorkRecordResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeWorkRecordResponseComposite = getEmployeeWorkRecordResponse200 | getEmployeeWorkRecordResponse400 | getEmployeeWorkRecordResponse401 | getEmployeeWorkRecordResponse403ApplicationProblemJson | getEmployeeWorkRecordResponse403ApplicationJson | getEmployeeWorkRecordResponse500;
    
export type getEmployeeWorkRecordResponse = getEmployeeWorkRecordResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeWorkRecordUrl = (employeeId: number,
    date: string,
    params: GetEmployeeWorkRecordParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/work_records/${date}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/work_records/${date}`
}

export const getEmployeeWorkRecord = async (employeeId: number,
    date: string,
    params: GetEmployeeWorkRecordParams, options?: RequestInit): Promise<getEmployeeWorkRecordResponse> => {
  
  return customFetch<getEmployeeWorkRecordResponse>(getGetEmployeeWorkRecordUrl(employeeId,date,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeeWorkRecordResponse200 = {
  data: ApiV1EmployeesWorkRecordSerializer
  status: 200
}

export type updateEmployeeWorkRecordResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeeWorkRecordResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeeWorkRecordResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeeWorkRecordResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeeWorkRecordResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeeWorkRecordResponseComposite = updateEmployeeWorkRecordResponse200 | updateEmployeeWorkRecordResponse400 | updateEmployeeWorkRecordResponse401 | updateEmployeeWorkRecordResponse403ApplicationProblemJson | updateEmployeeWorkRecordResponse403ApplicationJson | updateEmployeeWorkRecordResponse500;
    
export type updateEmployeeWorkRecordResponse = updateEmployeeWorkRecordResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeeWorkRecordUrl = (employeeId: number,
    date: string,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/work_records/${date}`
}

export const updateEmployeeWorkRecord = async (employeeId: number,
    date: string,
    updateEmployeeWorkRecordBody?: UpdateEmployeeWorkRecordBody, options?: RequestInit): Promise<updateEmployeeWorkRecordResponse> => {
  
  return customFetch<updateEmployeeWorkRecordResponse>(getUpdateEmployeeWorkRecordUrl(employeeId,date),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateEmployeeWorkRecordBody,)
  }
);}



export type destroyEmployeeWorkRecordResponse204 = {
  data: null
  status: 204
}

export type destroyEmployeeWorkRecordResponse400 = {
  data: Error
  status: 400
}

export type destroyEmployeeWorkRecordResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyEmployeeWorkRecordResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyEmployeeWorkRecordResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyEmployeeWorkRecordResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyEmployeeWorkRecordResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyEmployeeWorkRecordResponseComposite = destroyEmployeeWorkRecordResponse204 | destroyEmployeeWorkRecordResponse400 | destroyEmployeeWorkRecordResponse401 | destroyEmployeeWorkRecordResponse403ApplicationProblemJson | destroyEmployeeWorkRecordResponse403ApplicationJson | destroyEmployeeWorkRecordResponse404 | destroyEmployeeWorkRecordResponse500;
    
export type destroyEmployeeWorkRecordResponse = destroyEmployeeWorkRecordResponseComposite & {
  headers: Headers;
}

export const getDestroyEmployeeWorkRecordUrl = (employeeId: number,
    date: string,
    params: DestroyEmployeeWorkRecordParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/work_records/${date}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/work_records/${date}`
}

export const destroyEmployeeWorkRecord = async (employeeId: number,
    date: string,
    params: DestroyEmployeeWorkRecordParams, options?: RequestInit): Promise<destroyEmployeeWorkRecordResponse> => {
  
  return customFetch<destroyEmployeeWorkRecordResponse>(getDestroyEmployeeWorkRecordUrl(employeeId,date,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getEmployeeWorkRecordSummaryResponse200 = {
  data: ApiV1EmployeesWorkRecordSummarySerializer
  status: 200
}

export type getEmployeeWorkRecordSummaryResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeWorkRecordSummaryResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeWorkRecordSummaryResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeWorkRecordSummaryResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeWorkRecordSummaryResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeWorkRecordSummaryResponseComposite = getEmployeeWorkRecordSummaryResponse200 | getEmployeeWorkRecordSummaryResponse400 | getEmployeeWorkRecordSummaryResponse401 | getEmployeeWorkRecordSummaryResponse403ApplicationProblemJson | getEmployeeWorkRecordSummaryResponse403ApplicationJson | getEmployeeWorkRecordSummaryResponse500;
    
export type getEmployeeWorkRecordSummaryResponse = getEmployeeWorkRecordSummaryResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeWorkRecordSummaryUrl = (employeeId: number,
    year: number,
    month: number,
    params: GetEmployeeWorkRecordSummaryParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/work_record_summaries/${year}/${month}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/work_record_summaries/${year}/${month}`
}

export const getEmployeeWorkRecordSummary = async (employeeId: number,
    year: number,
    month: number,
    params: GetEmployeeWorkRecordSummaryParams, options?: RequestInit): Promise<getEmployeeWorkRecordSummaryResponse> => {
  
  return customFetch<getEmployeeWorkRecordSummaryResponse>(getGetEmployeeWorkRecordSummaryUrl(employeeId,year,month,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeeWorkRecordSummaryResponse200 = {
  data: ApiV1EmployeesWorkRecordSummarySerializer
  status: 200
}

export type updateEmployeeWorkRecordSummaryResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeeWorkRecordSummaryResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeeWorkRecordSummaryResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeeWorkRecordSummaryResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeeWorkRecordSummaryResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeeWorkRecordSummaryResponseComposite = updateEmployeeWorkRecordSummaryResponse200 | updateEmployeeWorkRecordSummaryResponse400 | updateEmployeeWorkRecordSummaryResponse401 | updateEmployeeWorkRecordSummaryResponse403ApplicationProblemJson | updateEmployeeWorkRecordSummaryResponse403ApplicationJson | updateEmployeeWorkRecordSummaryResponse500;
    
export type updateEmployeeWorkRecordSummaryResponse = updateEmployeeWorkRecordSummaryResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeeWorkRecordSummaryUrl = (employeeId: number,
    year: number,
    month: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/work_record_summaries/${year}/${month}`
}

export const updateEmployeeWorkRecordSummary = async (employeeId: number,
    year: number,
    month: number,
    apiV1EmployeesWorkRecordSummaryControllerUpdateBody?: ApiV1EmployeesWorkRecordSummaryControllerUpdateBody, options?: RequestInit): Promise<updateEmployeeWorkRecordSummaryResponse> => {
  
  return customFetch<updateEmployeeWorkRecordSummaryResponse>(getUpdateEmployeeWorkRecordSummaryUrl(employeeId,year,month),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesWorkRecordSummaryControllerUpdateBody,)
  }
);}



export type getEmployeeTimeClocksResponse200 = {
  data: ApiV1EmployeesTimeClocksControllerIndexResponse
  status: 200
}

export type getEmployeeTimeClocksResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeTimeClocksResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeTimeClocksResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeTimeClocksResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeTimeClocksResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeTimeClocksResponseComposite = getEmployeeTimeClocksResponse200 | getEmployeeTimeClocksResponse400 | getEmployeeTimeClocksResponse401 | getEmployeeTimeClocksResponse403ApplicationProblemJson | getEmployeeTimeClocksResponse403ApplicationJson | getEmployeeTimeClocksResponse500;
    
export type getEmployeeTimeClocksResponse = getEmployeeTimeClocksResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeTimeClocksUrl = (employeeId: number,
    params: GetEmployeeTimeClocksParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/time_clocks?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/time_clocks`
}

export const getEmployeeTimeClocks = async (employeeId: number,
    params: GetEmployeeTimeClocksParams, options?: RequestInit): Promise<getEmployeeTimeClocksResponse> => {
  
  return customFetch<getEmployeeTimeClocksResponse>(getGetEmployeeTimeClocksUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createEmployeeTimeClockResponse201 = {
  data: ApiV1EmployeesTimeClocksControllerCreateResponse
  status: 201
}

export type createEmployeeTimeClockResponse400 = {
  data: Error
  status: 400
}

export type createEmployeeTimeClockResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type createEmployeeTimeClockResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type createEmployeeTimeClockResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type createEmployeeTimeClockResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type createEmployeeTimeClockResponseComposite = createEmployeeTimeClockResponse201 | createEmployeeTimeClockResponse400 | createEmployeeTimeClockResponse401 | createEmployeeTimeClockResponse403ApplicationProblemJson | createEmployeeTimeClockResponse403ApplicationJson | createEmployeeTimeClockResponse500;
    
export type createEmployeeTimeClockResponse = createEmployeeTimeClockResponseComposite & {
  headers: Headers;
}

export const getCreateEmployeeTimeClockUrl = (employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/time_clocks`
}

export const createEmployeeTimeClock = async (employeeId: number,
    apiV1EmployeesTimeClocksControllerCreateBody?: ApiV1EmployeesTimeClocksControllerCreateBody, options?: RequestInit): Promise<createEmployeeTimeClockResponse> => {
  
  return customFetch<createEmployeeTimeClockResponse>(getCreateEmployeeTimeClockUrl(employeeId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesTimeClocksControllerCreateBody,)
  }
);}



export type getEmployeeTimeClockResponse200 = {
  data: ApiV1EmployeesTimeClocksControllerShowResponse
  status: 200
}

export type getEmployeeTimeClockResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeTimeClockResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeTimeClockResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeTimeClockResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeTimeClockResponse404 = {
  data: NotfoundError
  status: 404
}

export type getEmployeeTimeClockResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeTimeClockResponseComposite = getEmployeeTimeClockResponse200 | getEmployeeTimeClockResponse400 | getEmployeeTimeClockResponse401 | getEmployeeTimeClockResponse403ApplicationProblemJson | getEmployeeTimeClockResponse403ApplicationJson | getEmployeeTimeClockResponse404 | getEmployeeTimeClockResponse500;
    
export type getEmployeeTimeClockResponse = getEmployeeTimeClockResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeTimeClockUrl = (employeeId: number,
    id: number,
    params: GetEmployeeTimeClockParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/time_clocks/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/time_clocks/${id}`
}

export const getEmployeeTimeClock = async (employeeId: number,
    id: number,
    params: GetEmployeeTimeClockParams, options?: RequestInit): Promise<getEmployeeTimeClockResponse> => {
  
  return customFetch<getEmployeeTimeClockResponse>(getGetEmployeeTimeClockUrl(employeeId,id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getEmployeeTimeClocksAvailableTypesResponse200 = {
  data: ApiV1EmployeesTimeClocksControllerAvailableTypesResponse
  status: 200
}

export type getEmployeeTimeClocksAvailableTypesResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeTimeClocksAvailableTypesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeTimeClocksAvailableTypesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeTimeClocksAvailableTypesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeTimeClocksAvailableTypesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeTimeClocksAvailableTypesResponseComposite = getEmployeeTimeClocksAvailableTypesResponse200 | getEmployeeTimeClocksAvailableTypesResponse400 | getEmployeeTimeClocksAvailableTypesResponse401 | getEmployeeTimeClocksAvailableTypesResponse403ApplicationProblemJson | getEmployeeTimeClocksAvailableTypesResponse403ApplicationJson | getEmployeeTimeClocksAvailableTypesResponse500;
    
export type getEmployeeTimeClocksAvailableTypesResponse = getEmployeeTimeClocksAvailableTypesResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeTimeClocksAvailableTypesUrl = (employeeId: number,
    params: GetEmployeeTimeClocksAvailableTypesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/time_clocks/available_types?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/time_clocks/available_types`
}

export const getEmployeeTimeClocksAvailableTypes = async (employeeId: number,
    params: GetEmployeeTimeClocksAvailableTypesParams, options?: RequestInit): Promise<getEmployeeTimeClocksAvailableTypesResponse> => {
  
  return customFetch<getEmployeeTimeClocksAvailableTypesResponse>(getGetEmployeeTimeClocksAvailableTypesUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getEmployeesSpecialHolidaysResponse200 = {
  data: GetEmployeesSpecialHolidays200
  status: 200
}

export type getEmployeesSpecialHolidaysResponse400 = {
  data: Error
  status: 400
}

export type getEmployeesSpecialHolidaysResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeesSpecialHolidaysResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeesSpecialHolidaysResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeesSpecialHolidaysResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeesSpecialHolidaysResponseComposite = getEmployeesSpecialHolidaysResponse200 | getEmployeesSpecialHolidaysResponse400 | getEmployeesSpecialHolidaysResponse401 | getEmployeesSpecialHolidaysResponse403ApplicationProblemJson | getEmployeesSpecialHolidaysResponse403ApplicationJson | getEmployeesSpecialHolidaysResponse500;
    
export type getEmployeesSpecialHolidaysResponse = getEmployeesSpecialHolidaysResponseComposite & {
  headers: Headers;
}

export const getGetEmployeesSpecialHolidaysUrl = (employeeId: number,
    params: GetEmployeesSpecialHolidaysParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/special_holidays?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/special_holidays`
}

export const getEmployeesSpecialHolidays = async (employeeId: number,
    params: GetEmployeesSpecialHolidaysParams, options?: RequestInit): Promise<getEmployeesSpecialHolidaysResponse> => {
  
  return customFetch<getEmployeesSpecialHolidaysResponse>(getGetEmployeesSpecialHolidaysUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getEmployeesAttendanceTagSummariesResponse200 = {
  data: ApiV1EmployeesAttendanceTagSummariesControllerShowResponse
  status: 200
}

export type getEmployeesAttendanceTagSummariesResponse400 = {
  data: Error
  status: 400
}

export type getEmployeesAttendanceTagSummariesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeesAttendanceTagSummariesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeesAttendanceTagSummariesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeesAttendanceTagSummariesResponse404 = {
  data: NotfoundError
  status: 404
}

export type getEmployeesAttendanceTagSummariesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeesAttendanceTagSummariesResponseComposite = getEmployeesAttendanceTagSummariesResponse200 | getEmployeesAttendanceTagSummariesResponse400 | getEmployeesAttendanceTagSummariesResponse401 | getEmployeesAttendanceTagSummariesResponse403ApplicationProblemJson | getEmployeesAttendanceTagSummariesResponse403ApplicationJson | getEmployeesAttendanceTagSummariesResponse404 | getEmployeesAttendanceTagSummariesResponse500;
    
export type getEmployeesAttendanceTagSummariesResponse = getEmployeesAttendanceTagSummariesResponseComposite & {
  headers: Headers;
}

export const getGetEmployeesAttendanceTagSummariesUrl = (employeeId: number,
    year: number,
    month: number,
    params: GetEmployeesAttendanceTagSummariesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/attendance_tag_summaries/${year}/${month}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/attendance_tag_summaries/${year}/${month}`
}

export const getEmployeesAttendanceTagSummaries = async (employeeId: number,
    year: number,
    month: number,
    params: GetEmployeesAttendanceTagSummariesParams, options?: RequestInit): Promise<getEmployeesAttendanceTagSummariesResponse> => {
  
  return customFetch<getEmployeesAttendanceTagSummariesResponse>(getGetEmployeesAttendanceTagSummariesUrl(employeeId,year,month,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeesAttendanceTagSummariesResponse200 = {
  data: ApiV1EmployeesAttendanceTagSummariesControllerUpdateResponse
  status: 200
}

export type updateEmployeesAttendanceTagSummariesResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeesAttendanceTagSummariesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeesAttendanceTagSummariesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeesAttendanceTagSummariesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeesAttendanceTagSummariesResponse404 = {
  data: NotfoundError
  status: 404
}

export type updateEmployeesAttendanceTagSummariesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeesAttendanceTagSummariesResponseComposite = updateEmployeesAttendanceTagSummariesResponse200 | updateEmployeesAttendanceTagSummariesResponse400 | updateEmployeesAttendanceTagSummariesResponse401 | updateEmployeesAttendanceTagSummariesResponse403ApplicationProblemJson | updateEmployeesAttendanceTagSummariesResponse403ApplicationJson | updateEmployeesAttendanceTagSummariesResponse404 | updateEmployeesAttendanceTagSummariesResponse500;
    
export type updateEmployeesAttendanceTagSummariesResponse = updateEmployeesAttendanceTagSummariesResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeesAttendanceTagSummariesUrl = (employeeId: number,
    year: number,
    month: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/attendance_tag_summaries/${year}/${month}`
}

export const updateEmployeesAttendanceTagSummaries = async (employeeId: number,
    year: number,
    month: number,
    apiV1EmployeesAttendanceTagSummariesControllerUpdateBody: ApiV1EmployeesAttendanceTagSummariesControllerUpdateBody, options?: RequestInit): Promise<updateEmployeesAttendanceTagSummariesResponse> => {
  
  return customFetch<updateEmployeesAttendanceTagSummariesResponse>(getUpdateEmployeesAttendanceTagSummariesUrl(employeeId,year,month),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesAttendanceTagSummariesControllerUpdateBody,)
  }
);}



export type getEmployeesAttendanceTagsResponse200 = {
  data: ApiV1EmployeesAttendanceTagsControllerIndexResponse
  status: 200
}

export type getEmployeesAttendanceTagsResponse400 = {
  data: Error
  status: 400
}

export type getEmployeesAttendanceTagsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeesAttendanceTagsResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeesAttendanceTagsResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeesAttendanceTagsResponse404 = {
  data: NotfoundError
  status: 404
}

export type getEmployeesAttendanceTagsResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeesAttendanceTagsResponseComposite = getEmployeesAttendanceTagsResponse200 | getEmployeesAttendanceTagsResponse400 | getEmployeesAttendanceTagsResponse401 | getEmployeesAttendanceTagsResponse403ApplicationProblemJson | getEmployeesAttendanceTagsResponse403ApplicationJson | getEmployeesAttendanceTagsResponse404 | getEmployeesAttendanceTagsResponse500;
    
export type getEmployeesAttendanceTagsResponse = getEmployeesAttendanceTagsResponseComposite & {
  headers: Headers;
}

export const getGetEmployeesAttendanceTagsUrl = (employeeId: number,
    params: GetEmployeesAttendanceTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/attendance_tags?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/attendance_tags`
}

export const getEmployeesAttendanceTags = async (employeeId: number,
    params: GetEmployeesAttendanceTagsParams, options?: RequestInit): Promise<getEmployeesAttendanceTagsResponse> => {
  
  return customFetch<getEmployeesAttendanceTagsResponse>(getGetEmployeesAttendanceTagsUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getEmployeesAttendanceTagsByDateResponse200 = {
  data: ApiV1EmployeesAttendanceTagsControllerShowResponse
  status: 200
}

export type getEmployeesAttendanceTagsByDateResponse400 = {
  data: Error
  status: 400
}

export type getEmployeesAttendanceTagsByDateResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeesAttendanceTagsByDateResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeesAttendanceTagsByDateResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeesAttendanceTagsByDateResponse404 = {
  data: NotfoundError
  status: 404
}

export type getEmployeesAttendanceTagsByDateResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeesAttendanceTagsByDateResponseComposite = getEmployeesAttendanceTagsByDateResponse200 | getEmployeesAttendanceTagsByDateResponse400 | getEmployeesAttendanceTagsByDateResponse401 | getEmployeesAttendanceTagsByDateResponse403ApplicationProblemJson | getEmployeesAttendanceTagsByDateResponse403ApplicationJson | getEmployeesAttendanceTagsByDateResponse404 | getEmployeesAttendanceTagsByDateResponse500;
    
export type getEmployeesAttendanceTagsByDateResponse = getEmployeesAttendanceTagsByDateResponseComposite & {
  headers: Headers;
}

export const getGetEmployeesAttendanceTagsByDateUrl = (employeeId: number,
    date: string,
    params: GetEmployeesAttendanceTagsByDateParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/attendance_tags/${date}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/attendance_tags/${date}`
}

export const getEmployeesAttendanceTagsByDate = async (employeeId: number,
    date: string,
    params: GetEmployeesAttendanceTagsByDateParams, options?: RequestInit): Promise<getEmployeesAttendanceTagsByDateResponse> => {
  
  return customFetch<getEmployeesAttendanceTagsByDateResponse>(getGetEmployeesAttendanceTagsByDateUrl(employeeId,date,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateEmployeesAttendanceTagsResponse200 = {
  data: UpdateEmployeesAttendanceTags200
  status: 200
}

export type updateEmployeesAttendanceTagsResponse400 = {
  data: Error
  status: 400
}

export type updateEmployeesAttendanceTagsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateEmployeesAttendanceTagsResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateEmployeesAttendanceTagsResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateEmployeesAttendanceTagsResponse404 = {
  data: NotfoundError
  status: 404
}

export type updateEmployeesAttendanceTagsResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateEmployeesAttendanceTagsResponseComposite = updateEmployeesAttendanceTagsResponse200 | updateEmployeesAttendanceTagsResponse400 | updateEmployeesAttendanceTagsResponse401 | updateEmployeesAttendanceTagsResponse403ApplicationProblemJson | updateEmployeesAttendanceTagsResponse403ApplicationJson | updateEmployeesAttendanceTagsResponse404 | updateEmployeesAttendanceTagsResponse500;
    
export type updateEmployeesAttendanceTagsResponse = updateEmployeesAttendanceTagsResponseComposite & {
  headers: Headers;
}

export const getUpdateEmployeesAttendanceTagsUrl = (employeeId: number,
    date: string,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/employees/${employeeId}/attendance_tags/${date}`
}

export const updateEmployeesAttendanceTags = async (employeeId: number,
    date: string,
    apiV1EmployeesAttendanceTagsControllerUpdateBody: ApiV1EmployeesAttendanceTagsControllerUpdateBody, options?: RequestInit): Promise<updateEmployeesAttendanceTagsResponse> => {
  
  return customFetch<updateEmployeesAttendanceTagsResponse>(getUpdateEmployeesAttendanceTagsUrl(employeeId,date),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeesAttendanceTagsControllerUpdateBody,)
  }
);}



export type getSalariesEmployeePayrollStatementsResponse200 = {
  data: ApiV1SalariesEmployeePayrollStatementsControllerIndexResponse
  status: 200
}

export type getSalariesEmployeePayrollStatementsResponse400 = {
  data: Error
  status: 400
}

export type getSalariesEmployeePayrollStatementsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getSalariesEmployeePayrollStatementsResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getSalariesEmployeePayrollStatementsResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getSalariesEmployeePayrollStatementsResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getSalariesEmployeePayrollStatementsResponseComposite = getSalariesEmployeePayrollStatementsResponse200 | getSalariesEmployeePayrollStatementsResponse400 | getSalariesEmployeePayrollStatementsResponse401 | getSalariesEmployeePayrollStatementsResponse403ApplicationProblemJson | getSalariesEmployeePayrollStatementsResponse403ApplicationJson | getSalariesEmployeePayrollStatementsResponse500;
    
export type getSalariesEmployeePayrollStatementsResponse = getSalariesEmployeePayrollStatementsResponseComposite & {
  headers: Headers;
}

export const getGetSalariesEmployeePayrollStatementsUrl = (params: GetSalariesEmployeePayrollStatementsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/salaries/employee_payroll_statements?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/salaries/employee_payroll_statements`
}

export const getSalariesEmployeePayrollStatements = async (params: GetSalariesEmployeePayrollStatementsParams, options?: RequestInit): Promise<getSalariesEmployeePayrollStatementsResponse> => {
  
  return customFetch<getSalariesEmployeePayrollStatementsResponse>(getGetSalariesEmployeePayrollStatementsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getSalariesEmployeePayrollStatementResponse200 = {
  data: ApiV1SalariesEmployeePayrollStatementsControllerShowResponse
  status: 200
}

export type getSalariesEmployeePayrollStatementResponse400 = {
  data: Error
  status: 400
}

export type getSalariesEmployeePayrollStatementResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getSalariesEmployeePayrollStatementResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getSalariesEmployeePayrollStatementResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getSalariesEmployeePayrollStatementResponse404 = {
  data: NotfoundError
  status: 404
}

export type getSalariesEmployeePayrollStatementResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getSalariesEmployeePayrollStatementResponseComposite = getSalariesEmployeePayrollStatementResponse200 | getSalariesEmployeePayrollStatementResponse400 | getSalariesEmployeePayrollStatementResponse401 | getSalariesEmployeePayrollStatementResponse403ApplicationProblemJson | getSalariesEmployeePayrollStatementResponse403ApplicationJson | getSalariesEmployeePayrollStatementResponse404 | getSalariesEmployeePayrollStatementResponse500;
    
export type getSalariesEmployeePayrollStatementResponse = getSalariesEmployeePayrollStatementResponseComposite & {
  headers: Headers;
}

export const getGetSalariesEmployeePayrollStatementUrl = (employeeId: number,
    params: GetSalariesEmployeePayrollStatementParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/salaries/employee_payroll_statements/${employeeId}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/salaries/employee_payroll_statements/${employeeId}`
}

export const getSalariesEmployeePayrollStatement = async (employeeId: number,
    params: GetSalariesEmployeePayrollStatementParams, options?: RequestInit): Promise<getSalariesEmployeePayrollStatementResponse> => {
  
  return customFetch<getSalariesEmployeePayrollStatementResponse>(getGetSalariesEmployeePayrollStatementUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getBonusesEmployeePayrollStatementsResponse200 = {
  data: ApiV1BonusesEmployeePayrollStatementsIndexSerializer
  status: 200
}

export type getBonusesEmployeePayrollStatementsResponse400 = {
  data: Error
  status: 400
}

export type getBonusesEmployeePayrollStatementsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getBonusesEmployeePayrollStatementsResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getBonusesEmployeePayrollStatementsResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getBonusesEmployeePayrollStatementsResponse404 = {
  data: NotfoundError
  status: 404
}

export type getBonusesEmployeePayrollStatementsResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getBonusesEmployeePayrollStatementsResponseComposite = getBonusesEmployeePayrollStatementsResponse200 | getBonusesEmployeePayrollStatementsResponse400 | getBonusesEmployeePayrollStatementsResponse401 | getBonusesEmployeePayrollStatementsResponse403ApplicationProblemJson | getBonusesEmployeePayrollStatementsResponse403ApplicationJson | getBonusesEmployeePayrollStatementsResponse404 | getBonusesEmployeePayrollStatementsResponse500;
    
export type getBonusesEmployeePayrollStatementsResponse = getBonusesEmployeePayrollStatementsResponseComposite & {
  headers: Headers;
}

export const getGetBonusesEmployeePayrollStatementsUrl = (params: GetBonusesEmployeePayrollStatementsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/bonuses/employee_payroll_statements?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/bonuses/employee_payroll_statements`
}

export const getBonusesEmployeePayrollStatements = async (params: GetBonusesEmployeePayrollStatementsParams, options?: RequestInit): Promise<getBonusesEmployeePayrollStatementsResponse> => {
  
  return customFetch<getBonusesEmployeePayrollStatementsResponse>(getGetBonusesEmployeePayrollStatementsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getBonusesEmployeePayrollStatementResponse200 = {
  data: ApiV1BonusesEmployeePayrollStatementsControllerShowResponse
  status: 200
}

export type getBonusesEmployeePayrollStatementResponse400 = {
  data: Error
  status: 400
}

export type getBonusesEmployeePayrollStatementResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getBonusesEmployeePayrollStatementResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getBonusesEmployeePayrollStatementResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getBonusesEmployeePayrollStatementResponse404 = {
  data: NotfoundError
  status: 404
}

export type getBonusesEmployeePayrollStatementResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getBonusesEmployeePayrollStatementResponseComposite = getBonusesEmployeePayrollStatementResponse200 | getBonusesEmployeePayrollStatementResponse400 | getBonusesEmployeePayrollStatementResponse401 | getBonusesEmployeePayrollStatementResponse403ApplicationProblemJson | getBonusesEmployeePayrollStatementResponse403ApplicationJson | getBonusesEmployeePayrollStatementResponse404 | getBonusesEmployeePayrollStatementResponse500;
    
export type getBonusesEmployeePayrollStatementResponse = getBonusesEmployeePayrollStatementResponseComposite & {
  headers: Headers;
}

export const getGetBonusesEmployeePayrollStatementUrl = (employeeId: number,
    params: GetBonusesEmployeePayrollStatementParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/bonuses/employee_payroll_statements/${employeeId}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/bonuses/employee_payroll_statements/${employeeId}`
}

export const getBonusesEmployeePayrollStatement = async (employeeId: number,
    params: GetBonusesEmployeePayrollStatementParams, options?: RequestInit): Promise<getBonusesEmployeePayrollStatementResponse> => {
  
  return customFetch<getBonusesEmployeePayrollStatementResponse>(getGetBonusesEmployeePayrollStatementUrl(employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getEmployeeGroupMembershipsResponse200 = {
  data: ApiV1EmployeeGroupMembershipsIndexSerializer
  status: 200
}

export type getEmployeeGroupMembershipsResponse400 = {
  data: Error
  status: 400
}

export type getEmployeeGroupMembershipsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getEmployeeGroupMembershipsResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getEmployeeGroupMembershipsResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getEmployeeGroupMembershipsResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getEmployeeGroupMembershipsResponseComposite = getEmployeeGroupMembershipsResponse200 | getEmployeeGroupMembershipsResponse400 | getEmployeeGroupMembershipsResponse401 | getEmployeeGroupMembershipsResponse403ApplicationProblemJson | getEmployeeGroupMembershipsResponse403ApplicationJson | getEmployeeGroupMembershipsResponse500;
    
export type getEmployeeGroupMembershipsResponse = getEmployeeGroupMembershipsResponseComposite & {
  headers: Headers;
}

export const getGetEmployeeGroupMembershipsUrl = (params: GetEmployeeGroupMembershipsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/employee_group_memberships?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/employee_group_memberships`
}

export const getEmployeeGroupMemberships = async (params: GetEmployeeGroupMembershipsParams, options?: RequestInit): Promise<getEmployeeGroupMembershipsResponse> => {
  
  return customFetch<getEmployeeGroupMembershipsResponse>(getGetEmployeeGroupMembershipsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getGroupsResponse200 = {
  data: ApiV1GroupsIndexResponse
  status: 200
}

export type getGroupsResponse400 = {
  data: Error
  status: 400
}

export type getGroupsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getGroupsResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getGroupsResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getGroupsResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getGroupsResponseComposite = getGroupsResponse200 | getGroupsResponse400 | getGroupsResponse401 | getGroupsResponse403ApplicationProblemJson | getGroupsResponse403ApplicationJson | getGroupsResponse500;
    
export type getGroupsResponse = getGroupsResponseComposite & {
  headers: Headers;
}

export const getGetGroupsUrl = (params: GetGroupsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/groups?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/groups`
}

export const getGroups = async (params: GetGroupsParams, options?: RequestInit): Promise<getGroupsResponse> => {
  
  return customFetch<getGroupsResponse>(getGetGroupsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createGroupResponse201 = {
  data: ApiV1GroupResponse
  status: 201
}

export type createGroupResponse400 = {
  data: Error
  status: 400
}

export type createGroupResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type createGroupResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type createGroupResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type createGroupResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type createGroupResponseComposite = createGroupResponse201 | createGroupResponse400 | createGroupResponse401 | createGroupResponse403ApplicationProblemJson | createGroupResponse403ApplicationJson | createGroupResponse500;
    
export type createGroupResponse = createGroupResponseComposite & {
  headers: Headers;
}

export const getCreateGroupUrl = () => {


  

  return `https://api.freee.co.jp/hr/api/v1/groups`
}

export const createGroup = async (apiV1GroupCreateRequest: ApiV1GroupCreateRequest, options?: RequestInit): Promise<createGroupResponse> => {
  
  return customFetch<createGroupResponse>(getCreateGroupUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1GroupCreateRequest,)
  }
);}



export type updateGroupResponse200 = {
  data: ApiV1GroupResponse
  status: 200
}

export type updateGroupResponse400 = {
  data: Error
  status: 400
}

export type updateGroupResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateGroupResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateGroupResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateGroupResponse404 = {
  data: NotfoundError
  status: 404
}

export type updateGroupResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateGroupResponseComposite = updateGroupResponse200 | updateGroupResponse400 | updateGroupResponse401 | updateGroupResponse403ApplicationProblemJson | updateGroupResponse403ApplicationJson | updateGroupResponse404 | updateGroupResponse500;
    
export type updateGroupResponse = updateGroupResponseComposite & {
  headers: Headers;
}

export const getUpdateGroupUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/groups/${id}`
}

export const updateGroup = async (id: number,
    apiV1GroupUpdateRequest: ApiV1GroupUpdateRequest, options?: RequestInit): Promise<updateGroupResponse> => {
  
  return customFetch<updateGroupResponse>(getUpdateGroupUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1GroupUpdateRequest,)
  }
);}



export type destroyGroupResponse204 = {
  data: null
  status: 204
}

export type destroyGroupResponse400 = {
  data: Error
  status: 400
}

export type destroyGroupResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyGroupResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyGroupResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyGroupResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyGroupResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyGroupResponseComposite = destroyGroupResponse204 | destroyGroupResponse400 | destroyGroupResponse401 | destroyGroupResponse403ApplicationProblemJson | destroyGroupResponse403ApplicationJson | destroyGroupResponse404 | destroyGroupResponse500;
    
export type destroyGroupResponse = destroyGroupResponseComposite & {
  headers: Headers;
}

export const getDestroyGroupUrl = (id: number,
    params: DestroyGroupParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/groups/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/groups/${id}`
}

export const destroyGroup = async (id: number,
    params: DestroyGroupParams, options?: RequestInit): Promise<destroyGroupResponse> => {
  
  return customFetch<destroyGroupResponse>(getDestroyGroupUrl(id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getPositionsResponse200 = {
  data: ApiV1PositionIndexResponse
  status: 200
}

export type getPositionsResponse400 = {
  data: Error
  status: 400
}

export type getPositionsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getPositionsResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getPositionsResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getPositionsResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getPositionsResponseComposite = getPositionsResponse200 | getPositionsResponse400 | getPositionsResponse401 | getPositionsResponse403ApplicationProblemJson | getPositionsResponse403ApplicationJson | getPositionsResponse500;
    
export type getPositionsResponse = getPositionsResponseComposite & {
  headers: Headers;
}

export const getGetPositionsUrl = (params: GetPositionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/positions?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/positions`
}

export const getPositions = async (params: GetPositionsParams, options?: RequestInit): Promise<getPositionsResponse> => {
  
  return customFetch<getPositionsResponse>(getGetPositionsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createPositionResponse201 = {
  data: ApiV1PositionResponse
  status: 201
}

export type createPositionResponse400 = {
  data: Error
  status: 400
}

export type createPositionResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type createPositionResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type createPositionResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type createPositionResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type createPositionResponseComposite = createPositionResponse201 | createPositionResponse400 | createPositionResponse401 | createPositionResponse403ApplicationProblemJson | createPositionResponse403ApplicationJson | createPositionResponse500;
    
export type createPositionResponse = createPositionResponseComposite & {
  headers: Headers;
}

export const getCreatePositionUrl = () => {


  

  return `https://api.freee.co.jp/hr/api/v1/positions`
}

export const createPosition = async (apiV1PositionRequest: ApiV1PositionRequest, options?: RequestInit): Promise<createPositionResponse> => {
  
  return customFetch<createPositionResponse>(getCreatePositionUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1PositionRequest,)
  }
);}



export type updatePositionResponse200 = {
  data: ApiV1PositionResponse
  status: 200
}

export type updatePositionResponse400 = {
  data: Error
  status: 400
}

export type updatePositionResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updatePositionResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updatePositionResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updatePositionResponse404 = {
  data: NotfoundError
  status: 404
}

export type updatePositionResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updatePositionResponseComposite = updatePositionResponse200 | updatePositionResponse400 | updatePositionResponse401 | updatePositionResponse403ApplicationProblemJson | updatePositionResponse403ApplicationJson | updatePositionResponse404 | updatePositionResponse500;
    
export type updatePositionResponse = updatePositionResponseComposite & {
  headers: Headers;
}

export const getUpdatePositionUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/positions/${id}`
}

export const updatePosition = async (id: number,
    apiV1PositionRequest: ApiV1PositionRequest, options?: RequestInit): Promise<updatePositionResponse> => {
  
  return customFetch<updatePositionResponse>(getUpdatePositionUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1PositionRequest,)
  }
);}



export type destroyPositionResponse204 = {
  data: null
  status: 204
}

export type destroyPositionResponse400 = {
  data: Error
  status: 400
}

export type destroyPositionResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyPositionResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyPositionResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyPositionResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyPositionResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyPositionResponseComposite = destroyPositionResponse204 | destroyPositionResponse400 | destroyPositionResponse401 | destroyPositionResponse403ApplicationProblemJson | destroyPositionResponse403ApplicationJson | destroyPositionResponse404 | destroyPositionResponse500;
    
export type destroyPositionResponse = destroyPositionResponseComposite & {
  headers: Headers;
}

export const getDestroyPositionUrl = (id: number,
    params: DestroyPositionParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/positions/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/positions/${id}`
}

export const destroyPosition = async (id: number,
    params: DestroyPositionParams, options?: RequestInit): Promise<destroyPositionResponse> => {
  
  return customFetch<destroyPositionResponse>(getDestroyPositionUrl(id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type getApprovalRequestsMonthlyAttendancesResponse200 = {
  data: ApiV1MonthlyAttendanceIndexResponse
  status: 200
}

export type getApprovalRequestsMonthlyAttendancesResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsMonthlyAttendancesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsMonthlyAttendancesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsMonthlyAttendancesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsMonthlyAttendancesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsMonthlyAttendancesResponseComposite = getApprovalRequestsMonthlyAttendancesResponse200 | getApprovalRequestsMonthlyAttendancesResponse400 | getApprovalRequestsMonthlyAttendancesResponse401 | getApprovalRequestsMonthlyAttendancesResponse403ApplicationProblemJson | getApprovalRequestsMonthlyAttendancesResponse403ApplicationJson | getApprovalRequestsMonthlyAttendancesResponse500;
    
export type getApprovalRequestsMonthlyAttendancesResponse = getApprovalRequestsMonthlyAttendancesResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsMonthlyAttendancesUrl = (params: GetApprovalRequestsMonthlyAttendancesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/monthly_attendances?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/monthly_attendances`
}

export const getApprovalRequestsMonthlyAttendances = async (params: GetApprovalRequestsMonthlyAttendancesParams, options?: RequestInit): Promise<getApprovalRequestsMonthlyAttendancesResponse> => {
  
  return customFetch<getApprovalRequestsMonthlyAttendancesResponse>(getGetApprovalRequestsMonthlyAttendancesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createApprovalRequestsMonthlyAttendanceResponse201 = {
  data: ApiV1MonthlyAttendanceResponse
  status: 201
}

export type createApprovalRequestsMonthlyAttendanceResponse400 = {
  data: Error
  status: 400
}

export type createApprovalRequestsMonthlyAttendanceResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type createApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type createApprovalRequestsMonthlyAttendanceResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type createApprovalRequestsMonthlyAttendanceResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type createApprovalRequestsMonthlyAttendanceResponseComposite = createApprovalRequestsMonthlyAttendanceResponse201 | createApprovalRequestsMonthlyAttendanceResponse400 | createApprovalRequestsMonthlyAttendanceResponse401 | createApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson | createApprovalRequestsMonthlyAttendanceResponse403ApplicationJson | createApprovalRequestsMonthlyAttendanceResponse500;
    
export type createApprovalRequestsMonthlyAttendanceResponse = createApprovalRequestsMonthlyAttendanceResponseComposite & {
  headers: Headers;
}

export const getCreateApprovalRequestsMonthlyAttendanceUrl = () => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/monthly_attendances`
}

export const createApprovalRequestsMonthlyAttendance = async (apiV1MonthlyAttendanceCreateRequest: ApiV1MonthlyAttendanceCreateRequest, options?: RequestInit): Promise<createApprovalRequestsMonthlyAttendanceResponse> => {
  
  return customFetch<createApprovalRequestsMonthlyAttendanceResponse>(getCreateApprovalRequestsMonthlyAttendanceUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1MonthlyAttendanceCreateRequest,)
  }
);}



export type getApprovalRequestsMonthlyAttendanceResponse200 = {
  data: ApiV1MonthlyAttendanceResponse
  status: 200
}

export type getApprovalRequestsMonthlyAttendanceResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsMonthlyAttendanceResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsMonthlyAttendanceResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsMonthlyAttendanceResponse404 = {
  data: NotfoundError
  status: 404
}

export type getApprovalRequestsMonthlyAttendanceResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsMonthlyAttendanceResponseComposite = getApprovalRequestsMonthlyAttendanceResponse200 | getApprovalRequestsMonthlyAttendanceResponse400 | getApprovalRequestsMonthlyAttendanceResponse401 | getApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson | getApprovalRequestsMonthlyAttendanceResponse403ApplicationJson | getApprovalRequestsMonthlyAttendanceResponse404 | getApprovalRequestsMonthlyAttendanceResponse500;
    
export type getApprovalRequestsMonthlyAttendanceResponse = getApprovalRequestsMonthlyAttendanceResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsMonthlyAttendanceUrl = (id: number,
    params: GetApprovalRequestsMonthlyAttendanceParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/monthly_attendances/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/monthly_attendances/${id}`
}

export const getApprovalRequestsMonthlyAttendance = async (id: number,
    params: GetApprovalRequestsMonthlyAttendanceParams, options?: RequestInit): Promise<getApprovalRequestsMonthlyAttendanceResponse> => {
  
  return customFetch<getApprovalRequestsMonthlyAttendanceResponse>(getGetApprovalRequestsMonthlyAttendanceUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateApprovalRequestsMonthlyAttendanceResponse200 = {
  data: ApiV1MonthlyAttendanceResponse
  status: 200
}

export type updateApprovalRequestsMonthlyAttendanceResponse400 = {
  data: Error
  status: 400
}

export type updateApprovalRequestsMonthlyAttendanceResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateApprovalRequestsMonthlyAttendanceResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateApprovalRequestsMonthlyAttendanceResponse404 = {
  data: NotfoundError
  status: 404
}

export type updateApprovalRequestsMonthlyAttendanceResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateApprovalRequestsMonthlyAttendanceResponseComposite = updateApprovalRequestsMonthlyAttendanceResponse200 | updateApprovalRequestsMonthlyAttendanceResponse400 | updateApprovalRequestsMonthlyAttendanceResponse401 | updateApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson | updateApprovalRequestsMonthlyAttendanceResponse403ApplicationJson | updateApprovalRequestsMonthlyAttendanceResponse404 | updateApprovalRequestsMonthlyAttendanceResponse500;
    
export type updateApprovalRequestsMonthlyAttendanceResponse = updateApprovalRequestsMonthlyAttendanceResponseComposite & {
  headers: Headers;
}

export const getUpdateApprovalRequestsMonthlyAttendanceUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/monthly_attendances/${id}`
}

export const updateApprovalRequestsMonthlyAttendance = async (id: number,
    apiV1MonthlyAttendanceUpdateRequest: ApiV1MonthlyAttendanceUpdateRequest, options?: RequestInit): Promise<updateApprovalRequestsMonthlyAttendanceResponse> => {
  
  return customFetch<updateApprovalRequestsMonthlyAttendanceResponse>(getUpdateApprovalRequestsMonthlyAttendanceUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1MonthlyAttendanceUpdateRequest,)
  }
);}



export type destroyApprovalRequestsMonthlyAttendanceResponse204 = {
  data: null
  status: 204
}

export type destroyApprovalRequestsMonthlyAttendanceResponse400 = {
  data: Error
  status: 400
}

export type destroyApprovalRequestsMonthlyAttendanceResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyApprovalRequestsMonthlyAttendanceResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyApprovalRequestsMonthlyAttendanceResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyApprovalRequestsMonthlyAttendanceResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyApprovalRequestsMonthlyAttendanceResponseComposite = destroyApprovalRequestsMonthlyAttendanceResponse204 | destroyApprovalRequestsMonthlyAttendanceResponse400 | destroyApprovalRequestsMonthlyAttendanceResponse401 | destroyApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson | destroyApprovalRequestsMonthlyAttendanceResponse403ApplicationJson | destroyApprovalRequestsMonthlyAttendanceResponse404 | destroyApprovalRequestsMonthlyAttendanceResponse500;
    
export type destroyApprovalRequestsMonthlyAttendanceResponse = destroyApprovalRequestsMonthlyAttendanceResponseComposite & {
  headers: Headers;
}

export const getDestroyApprovalRequestsMonthlyAttendanceUrl = (id: number,
    params: DestroyApprovalRequestsMonthlyAttendanceParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/monthly_attendances/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/monthly_attendances/${id}`
}

export const destroyApprovalRequestsMonthlyAttendance = async (id: number,
    params: DestroyApprovalRequestsMonthlyAttendanceParams, options?: RequestInit): Promise<destroyApprovalRequestsMonthlyAttendanceResponse> => {
  
  return customFetch<destroyApprovalRequestsMonthlyAttendanceResponse>(getDestroyApprovalRequestsMonthlyAttendanceUrl(id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type actionApprovalRequestsMonthlyAttendanceResponse201 = {
  data: ApiV1MonthlyAttendanceResponse
  status: 201
}

export type actionApprovalRequestsMonthlyAttendanceResponse400 = {
  data: Error
  status: 400
}

export type actionApprovalRequestsMonthlyAttendanceResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type actionApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type actionApprovalRequestsMonthlyAttendanceResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type actionApprovalRequestsMonthlyAttendanceResponse404 = {
  data: NotfoundError
  status: 404
}

export type actionApprovalRequestsMonthlyAttendanceResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type actionApprovalRequestsMonthlyAttendanceResponseComposite = actionApprovalRequestsMonthlyAttendanceResponse201 | actionApprovalRequestsMonthlyAttendanceResponse400 | actionApprovalRequestsMonthlyAttendanceResponse401 | actionApprovalRequestsMonthlyAttendanceResponse403ApplicationProblemJson | actionApprovalRequestsMonthlyAttendanceResponse403ApplicationJson | actionApprovalRequestsMonthlyAttendanceResponse404 | actionApprovalRequestsMonthlyAttendanceResponse500;
    
export type actionApprovalRequestsMonthlyAttendanceResponse = actionApprovalRequestsMonthlyAttendanceResponseComposite & {
  headers: Headers;
}

export const getActionApprovalRequestsMonthlyAttendanceUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/monthly_attendances/${id}/actions`
}

export const actionApprovalRequestsMonthlyAttendance = async (id: number,
    apiV1ApprovalActionRequest: ApiV1ApprovalActionRequest, options?: RequestInit): Promise<actionApprovalRequestsMonthlyAttendanceResponse> => {
  
  return customFetch<actionApprovalRequestsMonthlyAttendanceResponse>(getActionApprovalRequestsMonthlyAttendanceUrl(id),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1ApprovalActionRequest,)
  }
);}



export type getApprovalRequestsWorkTimesResponse200 = {
  data: GetApprovalRequestsWorkTimes200
  status: 200
}

export type getApprovalRequestsWorkTimesResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsWorkTimesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsWorkTimesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsWorkTimesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsWorkTimesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsWorkTimesResponseComposite = getApprovalRequestsWorkTimesResponse200 | getApprovalRequestsWorkTimesResponse400 | getApprovalRequestsWorkTimesResponse401 | getApprovalRequestsWorkTimesResponse403ApplicationProblemJson | getApprovalRequestsWorkTimesResponse403ApplicationJson | getApprovalRequestsWorkTimesResponse500;
    
export type getApprovalRequestsWorkTimesResponse = getApprovalRequestsWorkTimesResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsWorkTimesUrl = (params: GetApprovalRequestsWorkTimesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/work_times?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/work_times`
}

export const getApprovalRequestsWorkTimes = async (params: GetApprovalRequestsWorkTimesParams, options?: RequestInit): Promise<getApprovalRequestsWorkTimesResponse> => {
  
  return customFetch<getApprovalRequestsWorkTimesResponse>(getGetApprovalRequestsWorkTimesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createApprovalRequestsWorkTimeResponse201 = {
  data: CreateApprovalRequestsWorkTime201
  status: 201
}

export type createApprovalRequestsWorkTimeResponse400 = {
  data: Error
  status: 400
}

export type createApprovalRequestsWorkTimeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type createApprovalRequestsWorkTimeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type createApprovalRequestsWorkTimeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type createApprovalRequestsWorkTimeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type createApprovalRequestsWorkTimeResponseComposite = createApprovalRequestsWorkTimeResponse201 | createApprovalRequestsWorkTimeResponse400 | createApprovalRequestsWorkTimeResponse401 | createApprovalRequestsWorkTimeResponse403ApplicationProblemJson | createApprovalRequestsWorkTimeResponse403ApplicationJson | createApprovalRequestsWorkTimeResponse500;
    
export type createApprovalRequestsWorkTimeResponse = createApprovalRequestsWorkTimeResponseComposite & {
  headers: Headers;
}

export const getCreateApprovalRequestsWorkTimeUrl = () => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/work_times`
}

export const createApprovalRequestsWorkTime = async (createApprovalRequestsWorkTimeBody: CreateApprovalRequestsWorkTimeBody, options?: RequestInit): Promise<createApprovalRequestsWorkTimeResponse> => {
  
  return customFetch<createApprovalRequestsWorkTimeResponse>(getCreateApprovalRequestsWorkTimeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createApprovalRequestsWorkTimeBody,)
  }
);}



export type getApprovalRequestsWorkTimeResponse200 = {
  data: Schema
  status: 200
}

export type getApprovalRequestsWorkTimeResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsWorkTimeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsWorkTimeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsWorkTimeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsWorkTimeResponse404 = {
  data: NotfoundError
  status: 404
}

export type getApprovalRequestsWorkTimeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsWorkTimeResponseComposite = getApprovalRequestsWorkTimeResponse200 | getApprovalRequestsWorkTimeResponse400 | getApprovalRequestsWorkTimeResponse401 | getApprovalRequestsWorkTimeResponse403ApplicationProblemJson | getApprovalRequestsWorkTimeResponse403ApplicationJson | getApprovalRequestsWorkTimeResponse404 | getApprovalRequestsWorkTimeResponse500;
    
export type getApprovalRequestsWorkTimeResponse = getApprovalRequestsWorkTimeResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsWorkTimeUrl = (id: number,
    params: GetApprovalRequestsWorkTimeParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/work_times/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/work_times/${id}`
}

export const getApprovalRequestsWorkTime = async (id: number,
    params: GetApprovalRequestsWorkTimeParams, options?: RequestInit): Promise<getApprovalRequestsWorkTimeResponse> => {
  
  return customFetch<getApprovalRequestsWorkTimeResponse>(getGetApprovalRequestsWorkTimeUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateApprovalRequestsWorkTimeResponse200 = {
  data: Schema
  status: 200
}

export type updateApprovalRequestsWorkTimeResponse400 = {
  data: Error
  status: 400
}

export type updateApprovalRequestsWorkTimeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateApprovalRequestsWorkTimeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateApprovalRequestsWorkTimeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateApprovalRequestsWorkTimeResponse404 = {
  data: NotfoundError
  status: 404
}

export type updateApprovalRequestsWorkTimeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateApprovalRequestsWorkTimeResponseComposite = updateApprovalRequestsWorkTimeResponse200 | updateApprovalRequestsWorkTimeResponse400 | updateApprovalRequestsWorkTimeResponse401 | updateApprovalRequestsWorkTimeResponse403ApplicationProblemJson | updateApprovalRequestsWorkTimeResponse403ApplicationJson | updateApprovalRequestsWorkTimeResponse404 | updateApprovalRequestsWorkTimeResponse500;
    
export type updateApprovalRequestsWorkTimeResponse = updateApprovalRequestsWorkTimeResponseComposite & {
  headers: Headers;
}

export const getUpdateApprovalRequestsWorkTimeUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/work_times/${id}`
}

export const updateApprovalRequestsWorkTime = async (id: number,
    schema: Schema, options?: RequestInit): Promise<updateApprovalRequestsWorkTimeResponse> => {
  
  return customFetch<updateApprovalRequestsWorkTimeResponse>(getUpdateApprovalRequestsWorkTimeUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      schema,)
  }
);}



export type destroyApprovalRequestsWorkTimeResponse204 = {
  data: null
  status: 204
}

export type destroyApprovalRequestsWorkTimeResponse400 = {
  data: Error
  status: 400
}

export type destroyApprovalRequestsWorkTimeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyApprovalRequestsWorkTimeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyApprovalRequestsWorkTimeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyApprovalRequestsWorkTimeResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyApprovalRequestsWorkTimeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyApprovalRequestsWorkTimeResponseComposite = destroyApprovalRequestsWorkTimeResponse204 | destroyApprovalRequestsWorkTimeResponse400 | destroyApprovalRequestsWorkTimeResponse401 | destroyApprovalRequestsWorkTimeResponse403ApplicationProblemJson | destroyApprovalRequestsWorkTimeResponse403ApplicationJson | destroyApprovalRequestsWorkTimeResponse404 | destroyApprovalRequestsWorkTimeResponse500;
    
export type destroyApprovalRequestsWorkTimeResponse = destroyApprovalRequestsWorkTimeResponseComposite & {
  headers: Headers;
}

export const getDestroyApprovalRequestsWorkTimeUrl = (id: number,
    params: DestroyApprovalRequestsWorkTimeParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/work_times/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/work_times/${id}`
}

export const destroyApprovalRequestsWorkTime = async (id: number,
    params: DestroyApprovalRequestsWorkTimeParams, options?: RequestInit): Promise<destroyApprovalRequestsWorkTimeResponse> => {
  
  return customFetch<destroyApprovalRequestsWorkTimeResponse>(getDestroyApprovalRequestsWorkTimeUrl(id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type actionApprovalRequestsWorkTimeResponse201 = {
  data: Schema
  status: 201
}

export type actionApprovalRequestsWorkTimeResponse400 = {
  data: Error
  status: 400
}

export type actionApprovalRequestsWorkTimeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type actionApprovalRequestsWorkTimeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type actionApprovalRequestsWorkTimeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type actionApprovalRequestsWorkTimeResponse404 = {
  data: NotfoundError
  status: 404
}

export type actionApprovalRequestsWorkTimeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type actionApprovalRequestsWorkTimeResponseComposite = actionApprovalRequestsWorkTimeResponse201 | actionApprovalRequestsWorkTimeResponse400 | actionApprovalRequestsWorkTimeResponse401 | actionApprovalRequestsWorkTimeResponse403ApplicationProblemJson | actionApprovalRequestsWorkTimeResponse403ApplicationJson | actionApprovalRequestsWorkTimeResponse404 | actionApprovalRequestsWorkTimeResponse500;
    
export type actionApprovalRequestsWorkTimeResponse = actionApprovalRequestsWorkTimeResponseComposite & {
  headers: Headers;
}

export const getActionApprovalRequestsWorkTimeUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/work_times/${id}/actions`
}

export const actionApprovalRequestsWorkTime = async (id: number,
    apiV1ApprovalActionRequest: ApiV1ApprovalActionRequest, options?: RequestInit): Promise<actionApprovalRequestsWorkTimeResponse> => {
  
  return customFetch<actionApprovalRequestsWorkTimeResponse>(getActionApprovalRequestsWorkTimeUrl(id),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1ApprovalActionRequest,)
  }
);}



export type getApprovalRequestsPaidHolidaysResponse200 = {
  data: ApiV1PaidHolidayIndexResponse
  status: 200
}

export type getApprovalRequestsPaidHolidaysResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsPaidHolidaysResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsPaidHolidaysResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsPaidHolidaysResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsPaidHolidaysResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsPaidHolidaysResponseComposite = getApprovalRequestsPaidHolidaysResponse200 | getApprovalRequestsPaidHolidaysResponse400 | getApprovalRequestsPaidHolidaysResponse401 | getApprovalRequestsPaidHolidaysResponse403ApplicationProblemJson | getApprovalRequestsPaidHolidaysResponse403ApplicationJson | getApprovalRequestsPaidHolidaysResponse500;
    
export type getApprovalRequestsPaidHolidaysResponse = getApprovalRequestsPaidHolidaysResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsPaidHolidaysUrl = (params: GetApprovalRequestsPaidHolidaysParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/paid_holidays?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/paid_holidays`
}

export const getApprovalRequestsPaidHolidays = async (params: GetApprovalRequestsPaidHolidaysParams, options?: RequestInit): Promise<getApprovalRequestsPaidHolidaysResponse> => {
  
  return customFetch<getApprovalRequestsPaidHolidaysResponse>(getGetApprovalRequestsPaidHolidaysUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createApprovalRequestsPaidHolidayResponse201 = {
  data: ApiV1PaidHolidayResponse
  status: 201
}

export type createApprovalRequestsPaidHolidayResponse400 = {
  data: Error
  status: 400
}

export type createApprovalRequestsPaidHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type createApprovalRequestsPaidHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type createApprovalRequestsPaidHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type createApprovalRequestsPaidHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type createApprovalRequestsPaidHolidayResponseComposite = createApprovalRequestsPaidHolidayResponse201 | createApprovalRequestsPaidHolidayResponse400 | createApprovalRequestsPaidHolidayResponse401 | createApprovalRequestsPaidHolidayResponse403ApplicationProblemJson | createApprovalRequestsPaidHolidayResponse403ApplicationJson | createApprovalRequestsPaidHolidayResponse500;
    
export type createApprovalRequestsPaidHolidayResponse = createApprovalRequestsPaidHolidayResponseComposite & {
  headers: Headers;
}

export const getCreateApprovalRequestsPaidHolidayUrl = () => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/paid_holidays`
}

export const createApprovalRequestsPaidHoliday = async (createApprovalRequestsPaidHolidayBody: CreateApprovalRequestsPaidHolidayBody, options?: RequestInit): Promise<createApprovalRequestsPaidHolidayResponse> => {
  
  return customFetch<createApprovalRequestsPaidHolidayResponse>(getCreateApprovalRequestsPaidHolidayUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createApprovalRequestsPaidHolidayBody,)
  }
);}



export type getApprovalRequestsPaidHolidayResponse200 = {
  data: ApiV1PaidHolidayResponse
  status: 200
}

export type getApprovalRequestsPaidHolidayResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsPaidHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsPaidHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsPaidHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsPaidHolidayResponse404 = {
  data: NotfoundError
  status: 404
}

export type getApprovalRequestsPaidHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsPaidHolidayResponseComposite = getApprovalRequestsPaidHolidayResponse200 | getApprovalRequestsPaidHolidayResponse400 | getApprovalRequestsPaidHolidayResponse401 | getApprovalRequestsPaidHolidayResponse403ApplicationProblemJson | getApprovalRequestsPaidHolidayResponse403ApplicationJson | getApprovalRequestsPaidHolidayResponse404 | getApprovalRequestsPaidHolidayResponse500;
    
export type getApprovalRequestsPaidHolidayResponse = getApprovalRequestsPaidHolidayResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsPaidHolidayUrl = (id: number,
    params: GetApprovalRequestsPaidHolidayParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/paid_holidays/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/paid_holidays/${id}`
}

export const getApprovalRequestsPaidHoliday = async (id: number,
    params: GetApprovalRequestsPaidHolidayParams, options?: RequestInit): Promise<getApprovalRequestsPaidHolidayResponse> => {
  
  return customFetch<getApprovalRequestsPaidHolidayResponse>(getGetApprovalRequestsPaidHolidayUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateApprovalRequestsPaidHolidayResponse200 = {
  data: ApiV1PaidHolidayResponse
  status: 200
}

export type updateApprovalRequestsPaidHolidayResponse400 = {
  data: Error
  status: 400
}

export type updateApprovalRequestsPaidHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateApprovalRequestsPaidHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateApprovalRequestsPaidHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateApprovalRequestsPaidHolidayResponse404 = {
  data: NotfoundError
  status: 404
}

export type updateApprovalRequestsPaidHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateApprovalRequestsPaidHolidayResponseComposite = updateApprovalRequestsPaidHolidayResponse200 | updateApprovalRequestsPaidHolidayResponse400 | updateApprovalRequestsPaidHolidayResponse401 | updateApprovalRequestsPaidHolidayResponse403ApplicationProblemJson | updateApprovalRequestsPaidHolidayResponse403ApplicationJson | updateApprovalRequestsPaidHolidayResponse404 | updateApprovalRequestsPaidHolidayResponse500;
    
export type updateApprovalRequestsPaidHolidayResponse = updateApprovalRequestsPaidHolidayResponseComposite & {
  headers: Headers;
}

export const getUpdateApprovalRequestsPaidHolidayUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/paid_holidays/${id}`
}

export const updateApprovalRequestsPaidHoliday = async (id: number,
    updateApprovalRequestsPaidHolidayBody: UpdateApprovalRequestsPaidHolidayBody, options?: RequestInit): Promise<updateApprovalRequestsPaidHolidayResponse> => {
  
  return customFetch<updateApprovalRequestsPaidHolidayResponse>(getUpdateApprovalRequestsPaidHolidayUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateApprovalRequestsPaidHolidayBody,)
  }
);}



export type destroyApprovalRequestsPaidHolidayResponse204 = {
  data: null
  status: 204
}

export type destroyApprovalRequestsPaidHolidayResponse400 = {
  data: Error
  status: 400
}

export type destroyApprovalRequestsPaidHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyApprovalRequestsPaidHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyApprovalRequestsPaidHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyApprovalRequestsPaidHolidayResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyApprovalRequestsPaidHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyApprovalRequestsPaidHolidayResponseComposite = destroyApprovalRequestsPaidHolidayResponse204 | destroyApprovalRequestsPaidHolidayResponse400 | destroyApprovalRequestsPaidHolidayResponse401 | destroyApprovalRequestsPaidHolidayResponse403ApplicationProblemJson | destroyApprovalRequestsPaidHolidayResponse403ApplicationJson | destroyApprovalRequestsPaidHolidayResponse404 | destroyApprovalRequestsPaidHolidayResponse500;
    
export type destroyApprovalRequestsPaidHolidayResponse = destroyApprovalRequestsPaidHolidayResponseComposite & {
  headers: Headers;
}

export const getDestroyApprovalRequestsPaidHolidayUrl = (id: number,
    params: DestroyApprovalRequestsPaidHolidayParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/paid_holidays/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/paid_holidays/${id}`
}

export const destroyApprovalRequestsPaidHoliday = async (id: number,
    params: DestroyApprovalRequestsPaidHolidayParams, options?: RequestInit): Promise<destroyApprovalRequestsPaidHolidayResponse> => {
  
  return customFetch<destroyApprovalRequestsPaidHolidayResponse>(getDestroyApprovalRequestsPaidHolidayUrl(id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type actionApprovalRequestsPaidHolidayResponse201 = {
  data: ApiV1PaidHolidayResponse
  status: 201
}

export type actionApprovalRequestsPaidHolidayResponse400 = {
  data: Error
  status: 400
}

export type actionApprovalRequestsPaidHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type actionApprovalRequestsPaidHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type actionApprovalRequestsPaidHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type actionApprovalRequestsPaidHolidayResponse404 = {
  data: NotfoundError
  status: 404
}

export type actionApprovalRequestsPaidHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type actionApprovalRequestsPaidHolidayResponseComposite = actionApprovalRequestsPaidHolidayResponse201 | actionApprovalRequestsPaidHolidayResponse400 | actionApprovalRequestsPaidHolidayResponse401 | actionApprovalRequestsPaidHolidayResponse403ApplicationProblemJson | actionApprovalRequestsPaidHolidayResponse403ApplicationJson | actionApprovalRequestsPaidHolidayResponse404 | actionApprovalRequestsPaidHolidayResponse500;
    
export type actionApprovalRequestsPaidHolidayResponse = actionApprovalRequestsPaidHolidayResponseComposite & {
  headers: Headers;
}

export const getActionApprovalRequestsPaidHolidayUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/paid_holidays/${id}/actions`
}

export const actionApprovalRequestsPaidHoliday = async (id: number,
    apiV1ApprovalActionRequest: ApiV1ApprovalActionRequest, options?: RequestInit): Promise<actionApprovalRequestsPaidHolidayResponse> => {
  
  return customFetch<actionApprovalRequestsPaidHolidayResponse>(getActionApprovalRequestsPaidHolidayUrl(id),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1ApprovalActionRequest,)
  }
);}



export type getApprovalRequestsSpecialHolidaysResponse200 = {
  data: ApiV1specialHolidayIndexResponse
  status: 200
}

export type getApprovalRequestsSpecialHolidaysResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsSpecialHolidaysResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsSpecialHolidaysResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsSpecialHolidaysResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsSpecialHolidaysResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsSpecialHolidaysResponseComposite = getApprovalRequestsSpecialHolidaysResponse200 | getApprovalRequestsSpecialHolidaysResponse400 | getApprovalRequestsSpecialHolidaysResponse401 | getApprovalRequestsSpecialHolidaysResponse403ApplicationProblemJson | getApprovalRequestsSpecialHolidaysResponse403ApplicationJson | getApprovalRequestsSpecialHolidaysResponse500;
    
export type getApprovalRequestsSpecialHolidaysResponse = getApprovalRequestsSpecialHolidaysResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsSpecialHolidaysUrl = (params: GetApprovalRequestsSpecialHolidaysParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/special_holidays?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/special_holidays`
}

export const getApprovalRequestsSpecialHolidays = async (params: GetApprovalRequestsSpecialHolidaysParams, options?: RequestInit): Promise<getApprovalRequestsSpecialHolidaysResponse> => {
  
  return customFetch<getApprovalRequestsSpecialHolidaysResponse>(getGetApprovalRequestsSpecialHolidaysUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createApprovalRequestsSpecialHolidayResponse201 = {
  data: ApiV1specialHolidayResponse
  status: 201
}

export type createApprovalRequestsSpecialHolidayResponse400 = {
  data: Error
  status: 400
}

export type createApprovalRequestsSpecialHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type createApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type createApprovalRequestsSpecialHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type createApprovalRequestsSpecialHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type createApprovalRequestsSpecialHolidayResponseComposite = createApprovalRequestsSpecialHolidayResponse201 | createApprovalRequestsSpecialHolidayResponse400 | createApprovalRequestsSpecialHolidayResponse401 | createApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson | createApprovalRequestsSpecialHolidayResponse403ApplicationJson | createApprovalRequestsSpecialHolidayResponse500;
    
export type createApprovalRequestsSpecialHolidayResponse = createApprovalRequestsSpecialHolidayResponseComposite & {
  headers: Headers;
}

export const getCreateApprovalRequestsSpecialHolidayUrl = () => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/special_holidays`
}

export const createApprovalRequestsSpecialHoliday = async (apiV1specialHolidayRequest: ApiV1specialHolidayRequest, options?: RequestInit): Promise<createApprovalRequestsSpecialHolidayResponse> => {
  
  return customFetch<createApprovalRequestsSpecialHolidayResponse>(getCreateApprovalRequestsSpecialHolidayUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1specialHolidayRequest,)
  }
);}



export type getApprovalRequestsSpecialHolidayResponse200 = {
  data: ApiV1specialHolidayResponse
  status: 200
}

export type getApprovalRequestsSpecialHolidayResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsSpecialHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsSpecialHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsSpecialHolidayResponse404 = {
  data: NotfoundError
  status: 404
}

export type getApprovalRequestsSpecialHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsSpecialHolidayResponseComposite = getApprovalRequestsSpecialHolidayResponse200 | getApprovalRequestsSpecialHolidayResponse400 | getApprovalRequestsSpecialHolidayResponse401 | getApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson | getApprovalRequestsSpecialHolidayResponse403ApplicationJson | getApprovalRequestsSpecialHolidayResponse404 | getApprovalRequestsSpecialHolidayResponse500;
    
export type getApprovalRequestsSpecialHolidayResponse = getApprovalRequestsSpecialHolidayResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsSpecialHolidayUrl = (id: number,
    params: GetApprovalRequestsSpecialHolidayParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/special_holidays/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/special_holidays/${id}`
}

export const getApprovalRequestsSpecialHoliday = async (id: number,
    params: GetApprovalRequestsSpecialHolidayParams, options?: RequestInit): Promise<getApprovalRequestsSpecialHolidayResponse> => {
  
  return customFetch<getApprovalRequestsSpecialHolidayResponse>(getGetApprovalRequestsSpecialHolidayUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateApprovalRequestsSpecialHolidayResponse200 = {
  data: ApiV1specialHolidayResponse
  status: 200
}

export type updateApprovalRequestsSpecialHolidayResponse400 = {
  data: Error
  status: 400
}

export type updateApprovalRequestsSpecialHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateApprovalRequestsSpecialHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateApprovalRequestsSpecialHolidayResponse404 = {
  data: NotfoundError
  status: 404
}

export type updateApprovalRequestsSpecialHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateApprovalRequestsSpecialHolidayResponseComposite = updateApprovalRequestsSpecialHolidayResponse200 | updateApprovalRequestsSpecialHolidayResponse400 | updateApprovalRequestsSpecialHolidayResponse401 | updateApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson | updateApprovalRequestsSpecialHolidayResponse403ApplicationJson | updateApprovalRequestsSpecialHolidayResponse404 | updateApprovalRequestsSpecialHolidayResponse500;
    
export type updateApprovalRequestsSpecialHolidayResponse = updateApprovalRequestsSpecialHolidayResponseComposite & {
  headers: Headers;
}

export const getUpdateApprovalRequestsSpecialHolidayUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/special_holidays/${id}`
}

export const updateApprovalRequestsSpecialHoliday = async (id: number,
    apiV1specialHolidayRequest: ApiV1specialHolidayRequest, options?: RequestInit): Promise<updateApprovalRequestsSpecialHolidayResponse> => {
  
  return customFetch<updateApprovalRequestsSpecialHolidayResponse>(getUpdateApprovalRequestsSpecialHolidayUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1specialHolidayRequest,)
  }
);}



export type destroyApprovalRequestsSpecialHolidayResponse204 = {
  data: null
  status: 204
}

export type destroyApprovalRequestsSpecialHolidayResponse400 = {
  data: Error
  status: 400
}

export type destroyApprovalRequestsSpecialHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyApprovalRequestsSpecialHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyApprovalRequestsSpecialHolidayResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyApprovalRequestsSpecialHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyApprovalRequestsSpecialHolidayResponseComposite = destroyApprovalRequestsSpecialHolidayResponse204 | destroyApprovalRequestsSpecialHolidayResponse400 | destroyApprovalRequestsSpecialHolidayResponse401 | destroyApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson | destroyApprovalRequestsSpecialHolidayResponse403ApplicationJson | destroyApprovalRequestsSpecialHolidayResponse404 | destroyApprovalRequestsSpecialHolidayResponse500;
    
export type destroyApprovalRequestsSpecialHolidayResponse = destroyApprovalRequestsSpecialHolidayResponseComposite & {
  headers: Headers;
}

export const getDestroyApprovalRequestsSpecialHolidayUrl = (id: number,
    params: DestroyApprovalRequestsSpecialHolidayParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/special_holidays/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/special_holidays/${id}`
}

export const destroyApprovalRequestsSpecialHoliday = async (id: number,
    params: DestroyApprovalRequestsSpecialHolidayParams, options?: RequestInit): Promise<destroyApprovalRequestsSpecialHolidayResponse> => {
  
  return customFetch<destroyApprovalRequestsSpecialHolidayResponse>(getDestroyApprovalRequestsSpecialHolidayUrl(id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type actionApprovalRequestsSpecialHolidayResponse201 = {
  data: ApiV1specialHolidayResponse
  status: 201
}

export type actionApprovalRequestsSpecialHolidayResponse400 = {
  data: Error
  status: 400
}

export type actionApprovalRequestsSpecialHolidayResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type actionApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type actionApprovalRequestsSpecialHolidayResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type actionApprovalRequestsSpecialHolidayResponse404 = {
  data: NotfoundError
  status: 404
}

export type actionApprovalRequestsSpecialHolidayResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type actionApprovalRequestsSpecialHolidayResponseComposite = actionApprovalRequestsSpecialHolidayResponse201 | actionApprovalRequestsSpecialHolidayResponse400 | actionApprovalRequestsSpecialHolidayResponse401 | actionApprovalRequestsSpecialHolidayResponse403ApplicationProblemJson | actionApprovalRequestsSpecialHolidayResponse403ApplicationJson | actionApprovalRequestsSpecialHolidayResponse404 | actionApprovalRequestsSpecialHolidayResponse500;
    
export type actionApprovalRequestsSpecialHolidayResponse = actionApprovalRequestsSpecialHolidayResponseComposite & {
  headers: Headers;
}

export const getActionApprovalRequestsSpecialHolidayUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/special_holidays/${id}/actions`
}

export const actionApprovalRequestsSpecialHoliday = async (id: number,
    apiV1ApprovalActionRequest: ApiV1ApprovalActionRequest, options?: RequestInit): Promise<actionApprovalRequestsSpecialHolidayResponse> => {
  
  return customFetch<actionApprovalRequestsSpecialHolidayResponse>(getActionApprovalRequestsSpecialHolidayUrl(id),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1ApprovalActionRequest,)
  }
);}



export type getApprovalRequestsOvertimeWorksResponse200 = {
  data: ApiV1OvertimeWorkIndexResponse
  status: 200
}

export type getApprovalRequestsOvertimeWorksResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsOvertimeWorksResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsOvertimeWorksResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsOvertimeWorksResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsOvertimeWorksResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsOvertimeWorksResponseComposite = getApprovalRequestsOvertimeWorksResponse200 | getApprovalRequestsOvertimeWorksResponse400 | getApprovalRequestsOvertimeWorksResponse401 | getApprovalRequestsOvertimeWorksResponse403ApplicationProblemJson | getApprovalRequestsOvertimeWorksResponse403ApplicationJson | getApprovalRequestsOvertimeWorksResponse500;
    
export type getApprovalRequestsOvertimeWorksResponse = getApprovalRequestsOvertimeWorksResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsOvertimeWorksUrl = (params: GetApprovalRequestsOvertimeWorksParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works`
}

export const getApprovalRequestsOvertimeWorks = async (params: GetApprovalRequestsOvertimeWorksParams, options?: RequestInit): Promise<getApprovalRequestsOvertimeWorksResponse> => {
  
  return customFetch<getApprovalRequestsOvertimeWorksResponse>(getGetApprovalRequestsOvertimeWorksUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type createApprovalRequestsOvertimeWorkResponse201 = {
  data: ApiV1OvertimeWorkResponse
  status: 201
}

export type createApprovalRequestsOvertimeWorkResponse400 = {
  data: Error
  status: 400
}

export type createApprovalRequestsOvertimeWorkResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type createApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type createApprovalRequestsOvertimeWorkResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type createApprovalRequestsOvertimeWorkResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type createApprovalRequestsOvertimeWorkResponseComposite = createApprovalRequestsOvertimeWorkResponse201 | createApprovalRequestsOvertimeWorkResponse400 | createApprovalRequestsOvertimeWorkResponse401 | createApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson | createApprovalRequestsOvertimeWorkResponse403ApplicationJson | createApprovalRequestsOvertimeWorkResponse500;
    
export type createApprovalRequestsOvertimeWorkResponse = createApprovalRequestsOvertimeWorkResponseComposite & {
  headers: Headers;
}

export const getCreateApprovalRequestsOvertimeWorkUrl = () => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works`
}

export const createApprovalRequestsOvertimeWork = async (apiV1OvertimeWorkRequest: ApiV1OvertimeWorkRequest, options?: RequestInit): Promise<createApprovalRequestsOvertimeWorkResponse> => {
  
  return customFetch<createApprovalRequestsOvertimeWorkResponse>(getCreateApprovalRequestsOvertimeWorkUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1OvertimeWorkRequest,)
  }
);}



export type getApprovalRequestsOvertimeWorkResponse200 = {
  data: ApiV1OvertimeWorkResponse
  status: 200
}

export type getApprovalRequestsOvertimeWorkResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsOvertimeWorkResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsOvertimeWorkResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsOvertimeWorkResponse404 = {
  data: NotfoundError
  status: 404
}

export type getApprovalRequestsOvertimeWorkResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsOvertimeWorkResponseComposite = getApprovalRequestsOvertimeWorkResponse200 | getApprovalRequestsOvertimeWorkResponse400 | getApprovalRequestsOvertimeWorkResponse401 | getApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson | getApprovalRequestsOvertimeWorkResponse403ApplicationJson | getApprovalRequestsOvertimeWorkResponse404 | getApprovalRequestsOvertimeWorkResponse500;
    
export type getApprovalRequestsOvertimeWorkResponse = getApprovalRequestsOvertimeWorkResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsOvertimeWorkUrl = (id: number,
    params: GetApprovalRequestsOvertimeWorkParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works/${id}`
}

export const getApprovalRequestsOvertimeWork = async (id: number,
    params: GetApprovalRequestsOvertimeWorkParams, options?: RequestInit): Promise<getApprovalRequestsOvertimeWorkResponse> => {
  
  return customFetch<getApprovalRequestsOvertimeWorkResponse>(getGetApprovalRequestsOvertimeWorkUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type updateApprovalRequestsOvertimeWorkResponse200 = {
  data: ApiV1OvertimeWorkResponse
  status: 200
}

export type updateApprovalRequestsOvertimeWorkResponse400 = {
  data: Error
  status: 400
}

export type updateApprovalRequestsOvertimeWorkResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type updateApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type updateApprovalRequestsOvertimeWorkResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type updateApprovalRequestsOvertimeWorkResponse404 = {
  data: NotfoundError
  status: 404
}

export type updateApprovalRequestsOvertimeWorkResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type updateApprovalRequestsOvertimeWorkResponseComposite = updateApprovalRequestsOvertimeWorkResponse200 | updateApprovalRequestsOvertimeWorkResponse400 | updateApprovalRequestsOvertimeWorkResponse401 | updateApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson | updateApprovalRequestsOvertimeWorkResponse403ApplicationJson | updateApprovalRequestsOvertimeWorkResponse404 | updateApprovalRequestsOvertimeWorkResponse500;
    
export type updateApprovalRequestsOvertimeWorkResponse = updateApprovalRequestsOvertimeWorkResponseComposite & {
  headers: Headers;
}

export const getUpdateApprovalRequestsOvertimeWorkUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works/${id}`
}

export const updateApprovalRequestsOvertimeWork = async (id: number,
    apiV1OvertimeWorkRequest: ApiV1OvertimeWorkRequest, options?: RequestInit): Promise<updateApprovalRequestsOvertimeWorkResponse> => {
  
  return customFetch<updateApprovalRequestsOvertimeWorkResponse>(getUpdateApprovalRequestsOvertimeWorkUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1OvertimeWorkRequest,)
  }
);}



export type destroyApprovalRequestsOvertimeWorkResponse204 = {
  data: null
  status: 204
}

export type destroyApprovalRequestsOvertimeWorkResponse400 = {
  data: Error
  status: 400
}

export type destroyApprovalRequestsOvertimeWorkResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyApprovalRequestsOvertimeWorkResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyApprovalRequestsOvertimeWorkResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyApprovalRequestsOvertimeWorkResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyApprovalRequestsOvertimeWorkResponseComposite = destroyApprovalRequestsOvertimeWorkResponse204 | destroyApprovalRequestsOvertimeWorkResponse400 | destroyApprovalRequestsOvertimeWorkResponse401 | destroyApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson | destroyApprovalRequestsOvertimeWorkResponse403ApplicationJson | destroyApprovalRequestsOvertimeWorkResponse404 | destroyApprovalRequestsOvertimeWorkResponse500;
    
export type destroyApprovalRequestsOvertimeWorkResponse = destroyApprovalRequestsOvertimeWorkResponseComposite & {
  headers: Headers;
}

export const getDestroyApprovalRequestsOvertimeWorkUrl = (id: number,
    params: DestroyApprovalRequestsOvertimeWorkParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works/${id}`
}

export const destroyApprovalRequestsOvertimeWork = async (id: number,
    params: DestroyApprovalRequestsOvertimeWorkParams, options?: RequestInit): Promise<destroyApprovalRequestsOvertimeWorkResponse> => {
  
  return customFetch<destroyApprovalRequestsOvertimeWorkResponse>(getDestroyApprovalRequestsOvertimeWorkUrl(id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type actionApprovalRequestsOvertimeWorkResponse201 = {
  data: ApiV1OvertimeWorkResponse
  status: 201
}

export type actionApprovalRequestsOvertimeWorkResponse400 = {
  data: Error
  status: 400
}

export type actionApprovalRequestsOvertimeWorkResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type actionApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type actionApprovalRequestsOvertimeWorkResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type actionApprovalRequestsOvertimeWorkResponse404 = {
  data: NotfoundError
  status: 404
}

export type actionApprovalRequestsOvertimeWorkResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type actionApprovalRequestsOvertimeWorkResponseComposite = actionApprovalRequestsOvertimeWorkResponse201 | actionApprovalRequestsOvertimeWorkResponse400 | actionApprovalRequestsOvertimeWorkResponse401 | actionApprovalRequestsOvertimeWorkResponse403ApplicationProblemJson | actionApprovalRequestsOvertimeWorkResponse403ApplicationJson | actionApprovalRequestsOvertimeWorkResponse404 | actionApprovalRequestsOvertimeWorkResponse500;
    
export type actionApprovalRequestsOvertimeWorkResponse = actionApprovalRequestsOvertimeWorkResponseComposite & {
  headers: Headers;
}

export const getActionApprovalRequestsOvertimeWorkUrl = (id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works/${id}/actions`
}

export const actionApprovalRequestsOvertimeWork = async (id: number,
    apiV1ApprovalActionRequest: ApiV1ApprovalActionRequest, options?: RequestInit): Promise<actionApprovalRequestsOvertimeWorkResponse> => {
  
  return customFetch<actionApprovalRequestsOvertimeWorkResponse>(getActionApprovalRequestsOvertimeWorkUrl(id),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1ApprovalActionRequest,)
  }
);}



export type getApprovalRequestsOvertimeWorkSettingResponse200 = {
  data: GetApprovalRequestsOvertimeWorkSetting200
  status: 200
}

export type getApprovalRequestsOvertimeWorkSettingResponse400 = {
  data: Error
  status: 400
}

export type getApprovalRequestsOvertimeWorkSettingResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalRequestsOvertimeWorkSettingResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalRequestsOvertimeWorkSettingResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalRequestsOvertimeWorkSettingResponse404 = {
  data: NotfoundError
  status: 404
}

export type getApprovalRequestsOvertimeWorkSettingResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalRequestsOvertimeWorkSettingResponseComposite = getApprovalRequestsOvertimeWorkSettingResponse200 | getApprovalRequestsOvertimeWorkSettingResponse400 | getApprovalRequestsOvertimeWorkSettingResponse401 | getApprovalRequestsOvertimeWorkSettingResponse403ApplicationProblemJson | getApprovalRequestsOvertimeWorkSettingResponse403ApplicationJson | getApprovalRequestsOvertimeWorkSettingResponse404 | getApprovalRequestsOvertimeWorkSettingResponse500;
    
export type getApprovalRequestsOvertimeWorkSettingResponse = getApprovalRequestsOvertimeWorkSettingResponseComposite & {
  headers: Headers;
}

export const getGetApprovalRequestsOvertimeWorkSettingUrl = (params: GetApprovalRequestsOvertimeWorkSettingParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works/setting?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_requests/overtime_works/setting`
}

export const getApprovalRequestsOvertimeWorkSetting = async (params: GetApprovalRequestsOvertimeWorkSettingParams, options?: RequestInit): Promise<getApprovalRequestsOvertimeWorkSettingResponse> => {
  
  return customFetch<getApprovalRequestsOvertimeWorkSettingResponse>(getGetApprovalRequestsOvertimeWorkSettingUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getApprovalFlowRoutesResponse200 = {
  data: ApiV1ApprovalFlowRoutesIndexResponse
  status: 200
}

export type getApprovalFlowRoutesResponse400 = {
  data: Error
  status: 400
}

export type getApprovalFlowRoutesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalFlowRoutesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalFlowRoutesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalFlowRoutesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalFlowRoutesResponseComposite = getApprovalFlowRoutesResponse200 | getApprovalFlowRoutesResponse400 | getApprovalFlowRoutesResponse401 | getApprovalFlowRoutesResponse403ApplicationProblemJson | getApprovalFlowRoutesResponse403ApplicationJson | getApprovalFlowRoutesResponse500;
    
export type getApprovalFlowRoutesResponse = getApprovalFlowRoutesResponseComposite & {
  headers: Headers;
}

export const getGetApprovalFlowRoutesUrl = (params: GetApprovalFlowRoutesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_flow_routes?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_flow_routes`
}

export const getApprovalFlowRoutes = async (params: GetApprovalFlowRoutesParams, options?: RequestInit): Promise<getApprovalFlowRoutesResponse> => {
  
  return customFetch<getApprovalFlowRoutesResponse>(getGetApprovalFlowRoutesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getApprovalFlowRouteResponse200 = {
  data: ApiV1ApprovalFlowRouteResponse
  status: 200
}

export type getApprovalFlowRouteResponse400 = {
  data: Error
  status: 400
}

export type getApprovalFlowRouteResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getApprovalFlowRouteResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getApprovalFlowRouteResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getApprovalFlowRouteResponse404 = {
  data: NotfoundError
  status: 404
}

export type getApprovalFlowRouteResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getApprovalFlowRouteResponseComposite = getApprovalFlowRouteResponse200 | getApprovalFlowRouteResponse400 | getApprovalFlowRouteResponse401 | getApprovalFlowRouteResponse403ApplicationProblemJson | getApprovalFlowRouteResponse403ApplicationJson | getApprovalFlowRouteResponse404 | getApprovalFlowRouteResponse500;
    
export type getApprovalFlowRouteResponse = getApprovalFlowRouteResponseComposite & {
  headers: Headers;
}

export const getGetApprovalFlowRouteUrl = (id: number,
    params: GetApprovalFlowRouteParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/approval_flow_routes/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/approval_flow_routes/${id}`
}

export const getApprovalFlowRoute = async (id: number,
    params: GetApprovalFlowRouteParams, options?: RequestInit): Promise<getApprovalFlowRouteResponse> => {
  
  return customFetch<getApprovalFlowRouteResponse>(getGetApprovalFlowRouteUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getYearendAdjustmentEmployeesResponse200 = {
  data: ApiV1EmployeeYearendAdjustmentControllerIndexResponse
  status: 200
}

export type getYearendAdjustmentEmployeesResponse400 = {
  data: Error
  status: 400
}

export type getYearendAdjustmentEmployeesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getYearendAdjustmentEmployeesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getYearendAdjustmentEmployeesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getYearendAdjustmentEmployeesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getYearendAdjustmentEmployeesResponseComposite = getYearendAdjustmentEmployeesResponse200 | getYearendAdjustmentEmployeesResponse400 | getYearendAdjustmentEmployeesResponse401 | getYearendAdjustmentEmployeesResponse403ApplicationProblemJson | getYearendAdjustmentEmployeesResponse403ApplicationJson | getYearendAdjustmentEmployeesResponse500;
    
export type getYearendAdjustmentEmployeesResponse = getYearendAdjustmentEmployeesResponseComposite & {
  headers: Headers;
}

export const getGetYearendAdjustmentEmployeesUrl = (year: number,
    params: GetYearendAdjustmentEmployeesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/employees?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/employees`
}

export const getYearendAdjustmentEmployees = async (year: number,
    params: GetYearendAdjustmentEmployeesParams, options?: RequestInit): Promise<getYearendAdjustmentEmployeesResponse> => {
  
  return customFetch<getYearendAdjustmentEmployeesResponse>(getGetYearendAdjustmentEmployeesUrl(year,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getYearendAdjustmentEmployeeResponse200 = {
  data: ApiV1EmployeeYearendAdjustmentControllerShowResponse
  status: 200
}

export type getYearendAdjustmentEmployeeResponse400 = {
  data: Error
  status: 400
}

export type getYearendAdjustmentEmployeeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getYearendAdjustmentEmployeeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type getYearendAdjustmentEmployeeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type getYearendAdjustmentEmployeeResponse404 = {
  data: NotfoundError
  status: 404
}

export type getYearendAdjustmentEmployeeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type getYearendAdjustmentEmployeeResponseComposite = getYearendAdjustmentEmployeeResponse200 | getYearendAdjustmentEmployeeResponse400 | getYearendAdjustmentEmployeeResponse401 | getYearendAdjustmentEmployeeResponse403ApplicationProblemJson | getYearendAdjustmentEmployeeResponse403ApplicationJson | getYearendAdjustmentEmployeeResponse404 | getYearendAdjustmentEmployeeResponse500;
    
export type getYearendAdjustmentEmployeeResponse = getYearendAdjustmentEmployeeResponseComposite & {
  headers: Headers;
}

export const getGetYearendAdjustmentEmployeeUrl = (year: number,
    employeeId: number,
    params: GetYearendAdjustmentEmployeeParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/employees/${employeeId}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/employees/${employeeId}`
}

export const getYearendAdjustmentEmployee = async (year: number,
    employeeId: number,
    params: GetYearendAdjustmentEmployeeParams, options?: RequestInit): Promise<getYearendAdjustmentEmployeeResponse> => {
  
  return customFetch<getYearendAdjustmentEmployeeResponse>(getGetYearendAdjustmentEmployeeUrl(year,employeeId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type putYearendAdjustmentEmployeeResponse200 = {
  data: ApiV1EmployeeYearendAdjustmentControllerUpdateEmployeeResponse
  status: 200
}

export type putYearendAdjustmentEmployeeResponse400 = {
  data: Error
  status: 400
}

export type putYearendAdjustmentEmployeeResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type putYearendAdjustmentEmployeeResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type putYearendAdjustmentEmployeeResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type putYearendAdjustmentEmployeeResponse404 = {
  data: NotfoundError
  status: 404
}

export type putYearendAdjustmentEmployeeResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type putYearendAdjustmentEmployeeResponseComposite = putYearendAdjustmentEmployeeResponse200 | putYearendAdjustmentEmployeeResponse400 | putYearendAdjustmentEmployeeResponse401 | putYearendAdjustmentEmployeeResponse403ApplicationProblemJson | putYearendAdjustmentEmployeeResponse403ApplicationJson | putYearendAdjustmentEmployeeResponse404 | putYearendAdjustmentEmployeeResponse500;
    
export type putYearendAdjustmentEmployeeResponse = putYearendAdjustmentEmployeeResponseComposite & {
  headers: Headers;
}

export const getPutYearendAdjustmentEmployeeUrl = (year: number,
    employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/employees/${employeeId}`
}

export const putYearendAdjustmentEmployee = async (year: number,
    employeeId: number,
    apiV1EmployeeYearendAdjustmentControllerUpdateEmployeeBody?: ApiV1EmployeeYearendAdjustmentControllerUpdateEmployeeBody, options?: RequestInit): Promise<putYearendAdjustmentEmployeeResponse> => {
  
  return customFetch<putYearendAdjustmentEmployeeResponse>(getPutYearendAdjustmentEmployeeUrl(year,employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeeYearendAdjustmentControllerUpdateEmployeeBody,)
  }
);}



export type putYearendAdjustmentPayrollAndBonusResponse200 = {
  data: ApiV1EmployeeYearendAdjustmentControllerUpdatePayrollAndBonusResponse
  status: 200
}

export type putYearendAdjustmentPayrollAndBonusResponse400 = {
  data: Error
  status: 400
}

export type putYearendAdjustmentPayrollAndBonusResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type putYearendAdjustmentPayrollAndBonusResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type putYearendAdjustmentPayrollAndBonusResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type putYearendAdjustmentPayrollAndBonusResponse404 = {
  data: NotfoundError
  status: 404
}

export type putYearendAdjustmentPayrollAndBonusResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type putYearendAdjustmentPayrollAndBonusResponseComposite = putYearendAdjustmentPayrollAndBonusResponse200 | putYearendAdjustmentPayrollAndBonusResponse400 | putYearendAdjustmentPayrollAndBonusResponse401 | putYearendAdjustmentPayrollAndBonusResponse403ApplicationProblemJson | putYearendAdjustmentPayrollAndBonusResponse403ApplicationJson | putYearendAdjustmentPayrollAndBonusResponse404 | putYearendAdjustmentPayrollAndBonusResponse500;
    
export type putYearendAdjustmentPayrollAndBonusResponse = putYearendAdjustmentPayrollAndBonusResponseComposite & {
  headers: Headers;
}

export const getPutYearendAdjustmentPayrollAndBonusUrl = (year: number,
    employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/payroll_and_bonus/${employeeId}`
}

export const putYearendAdjustmentPayrollAndBonus = async (year: number,
    employeeId: number,
    apiV1EmployeeYearendAdjustmentControllerUpdatePayrollAndBonusBody: ApiV1EmployeeYearendAdjustmentControllerUpdatePayrollAndBonusBody, options?: RequestInit): Promise<putYearendAdjustmentPayrollAndBonusResponse> => {
  
  return customFetch<putYearendAdjustmentPayrollAndBonusResponse>(getPutYearendAdjustmentPayrollAndBonusUrl(year,employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeeYearendAdjustmentControllerUpdatePayrollAndBonusBody,)
  }
);}



export type putYearendAdjustmentDependentsResponse200 = {
  data: ApiV1EmployeeYearendAdjustmentControllerUpdateDependentsResponse
  status: 200
}

export type putYearendAdjustmentDependentsResponse400 = {
  data: Error
  status: 400
}

export type putYearendAdjustmentDependentsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type putYearendAdjustmentDependentsResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type putYearendAdjustmentDependentsResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type putYearendAdjustmentDependentsResponse404 = {
  data: NotfoundError
  status: 404
}

export type putYearendAdjustmentDependentsResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type putYearendAdjustmentDependentsResponseComposite = putYearendAdjustmentDependentsResponse200 | putYearendAdjustmentDependentsResponse400 | putYearendAdjustmentDependentsResponse401 | putYearendAdjustmentDependentsResponse403ApplicationProblemJson | putYearendAdjustmentDependentsResponse403ApplicationJson | putYearendAdjustmentDependentsResponse404 | putYearendAdjustmentDependentsResponse500;
    
export type putYearendAdjustmentDependentsResponse = putYearendAdjustmentDependentsResponseComposite & {
  headers: Headers;
}

export const getPutYearendAdjustmentDependentsUrl = (year: number,
    employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/dependents/${employeeId}`
}

export const putYearendAdjustmentDependents = async (year: number,
    employeeId: number,
    apiV1EmployeeYearendAdjustmentControllerUpdateDependentsBody?: ApiV1EmployeeYearendAdjustmentControllerUpdateDependentsBody, options?: RequestInit): Promise<putYearendAdjustmentDependentsResponse> => {
  
  return customFetch<putYearendAdjustmentDependentsResponse>(getPutYearendAdjustmentDependentsUrl(year,employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeeYearendAdjustmentControllerUpdateDependentsBody,)
  }
);}



export type putYearendAdjustmentPreviousJobResponse200 = {
  data: ApiV1EmployeeYearendAdjustmentControllerUpdatePreviousJobResponse
  status: 200
}

export type putYearendAdjustmentPreviousJobResponse400 = {
  data: Error
  status: 400
}

export type putYearendAdjustmentPreviousJobResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type putYearendAdjustmentPreviousJobResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type putYearendAdjustmentPreviousJobResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type putYearendAdjustmentPreviousJobResponse404 = {
  data: NotfoundError
  status: 404
}

export type putYearendAdjustmentPreviousJobResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type putYearendAdjustmentPreviousJobResponseComposite = putYearendAdjustmentPreviousJobResponse200 | putYearendAdjustmentPreviousJobResponse400 | putYearendAdjustmentPreviousJobResponse401 | putYearendAdjustmentPreviousJobResponse403ApplicationProblemJson | putYearendAdjustmentPreviousJobResponse403ApplicationJson | putYearendAdjustmentPreviousJobResponse404 | putYearendAdjustmentPreviousJobResponse500;
    
export type putYearendAdjustmentPreviousJobResponse = putYearendAdjustmentPreviousJobResponseComposite & {
  headers: Headers;
}

export const getPutYearendAdjustmentPreviousJobUrl = (year: number,
    employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/previous_jobs/${employeeId}`
}

export const putYearendAdjustmentPreviousJob = async (year: number,
    employeeId: number,
    apiV1EmployeeYearendAdjustmentControllerUpdatePreviousJobBody?: ApiV1EmployeeYearendAdjustmentControllerUpdatePreviousJobBody, options?: RequestInit): Promise<putYearendAdjustmentPreviousJobResponse> => {
  
  return customFetch<putYearendAdjustmentPreviousJobResponse>(getPutYearendAdjustmentPreviousJobUrl(year,employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeeYearendAdjustmentControllerUpdatePreviousJobBody,)
  }
);}



export type destroyYearendAdjustmentPreviousJobResponse204 = {
  data: null
  status: 204
}

export type destroyYearendAdjustmentPreviousJobResponse400 = {
  data: Error
  status: 400
}

export type destroyYearendAdjustmentPreviousJobResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyYearendAdjustmentPreviousJobResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyYearendAdjustmentPreviousJobResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyYearendAdjustmentPreviousJobResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyYearendAdjustmentPreviousJobResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyYearendAdjustmentPreviousJobResponseComposite = destroyYearendAdjustmentPreviousJobResponse204 | destroyYearendAdjustmentPreviousJobResponse400 | destroyYearendAdjustmentPreviousJobResponse401 | destroyYearendAdjustmentPreviousJobResponse403ApplicationProblemJson | destroyYearendAdjustmentPreviousJobResponse403ApplicationJson | destroyYearendAdjustmentPreviousJobResponse404 | destroyYearendAdjustmentPreviousJobResponse500;
    
export type destroyYearendAdjustmentPreviousJobResponse = destroyYearendAdjustmentPreviousJobResponseComposite & {
  headers: Headers;
}

export const getDestroyYearendAdjustmentPreviousJobUrl = (year: number,
    employeeId: number,
    params: DestroyYearendAdjustmentPreviousJobParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/previous_jobs/${employeeId}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/previous_jobs/${employeeId}`
}

export const destroyYearendAdjustmentPreviousJob = async (year: number,
    employeeId: number,
    params: DestroyYearendAdjustmentPreviousJobParams, options?: RequestInit): Promise<destroyYearendAdjustmentPreviousJobResponse> => {
  
  return customFetch<destroyYearendAdjustmentPreviousJobResponse>(getDestroyYearendAdjustmentPreviousJobUrl(year,employeeId,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type postYearendAdjustmentInsurancesResponse201 = {
  data: ApiV1EmployeeYearendAdjustmentControllerUpdateInsuranceResponse
  status: 201
}

export type postYearendAdjustmentInsurancesResponse400 = {
  data: Error
  status: 400
}

export type postYearendAdjustmentInsurancesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type postYearendAdjustmentInsurancesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type postYearendAdjustmentInsurancesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type postYearendAdjustmentInsurancesResponse404 = {
  data: NotfoundError
  status: 404
}

export type postYearendAdjustmentInsurancesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type postYearendAdjustmentInsurancesResponseComposite = postYearendAdjustmentInsurancesResponse201 | postYearendAdjustmentInsurancesResponse400 | postYearendAdjustmentInsurancesResponse401 | postYearendAdjustmentInsurancesResponse403ApplicationProblemJson | postYearendAdjustmentInsurancesResponse403ApplicationJson | postYearendAdjustmentInsurancesResponse404 | postYearendAdjustmentInsurancesResponse500;
    
export type postYearendAdjustmentInsurancesResponse = postYearendAdjustmentInsurancesResponseComposite & {
  headers: Headers;
}

export const getPostYearendAdjustmentInsurancesUrl = (year: number,
    employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/insurances/${employeeId}`
}

export const postYearendAdjustmentInsurances = async (year: number,
    employeeId: number,
    apiV1EmployeeYearendAdjustmentControllerUpdateInsuranceBody?: ApiV1EmployeeYearendAdjustmentControllerUpdateInsuranceBody, options?: RequestInit): Promise<postYearendAdjustmentInsurancesResponse> => {
  
  return customFetch<postYearendAdjustmentInsurancesResponse>(getPostYearendAdjustmentInsurancesUrl(year,employeeId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeeYearendAdjustmentControllerUpdateInsuranceBody,)
  }
);}



export type putYearendAdjustmentInsurancesResponse200 = {
  data: ApiV1EmployeeYearendAdjustmentControllerUpdateInsuranceResponse
  status: 200
}

export type putYearendAdjustmentInsurancesResponse400 = {
  data: Error
  status: 400
}

export type putYearendAdjustmentInsurancesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type putYearendAdjustmentInsurancesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type putYearendAdjustmentInsurancesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type putYearendAdjustmentInsurancesResponse404 = {
  data: NotfoundError
  status: 404
}

export type putYearendAdjustmentInsurancesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type putYearendAdjustmentInsurancesResponseComposite = putYearendAdjustmentInsurancesResponse200 | putYearendAdjustmentInsurancesResponse400 | putYearendAdjustmentInsurancesResponse401 | putYearendAdjustmentInsurancesResponse403ApplicationProblemJson | putYearendAdjustmentInsurancesResponse403ApplicationJson | putYearendAdjustmentInsurancesResponse404 | putYearendAdjustmentInsurancesResponse500;
    
export type putYearendAdjustmentInsurancesResponse = putYearendAdjustmentInsurancesResponseComposite & {
  headers: Headers;
}

export const getPutYearendAdjustmentInsurancesUrl = (year: number,
    employeeId: number,
    id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/insurances/${employeeId}/${id}`
}

export const putYearendAdjustmentInsurances = async (year: number,
    employeeId: number,
    id: number,
    apiV1EmployeeYearendAdjustmentControllerUpdateInsuranceBody?: ApiV1EmployeeYearendAdjustmentControllerUpdateInsuranceBody, options?: RequestInit): Promise<putYearendAdjustmentInsurancesResponse> => {
  
  return customFetch<putYearendAdjustmentInsurancesResponse>(getPutYearendAdjustmentInsurancesUrl(year,employeeId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeeYearendAdjustmentControllerUpdateInsuranceBody,)
  }
);}



export type destroyYearendAdjustmentInsurancesResponse204 = {
  data: null
  status: 204
}

export type destroyYearendAdjustmentInsurancesResponse400 = {
  data: Error
  status: 400
}

export type destroyYearendAdjustmentInsurancesResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyYearendAdjustmentInsurancesResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyYearendAdjustmentInsurancesResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyYearendAdjustmentInsurancesResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyYearendAdjustmentInsurancesResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyYearendAdjustmentInsurancesResponseComposite = destroyYearendAdjustmentInsurancesResponse204 | destroyYearendAdjustmentInsurancesResponse400 | destroyYearendAdjustmentInsurancesResponse401 | destroyYearendAdjustmentInsurancesResponse403ApplicationProblemJson | destroyYearendAdjustmentInsurancesResponse403ApplicationJson | destroyYearendAdjustmentInsurancesResponse404 | destroyYearendAdjustmentInsurancesResponse500;
    
export type destroyYearendAdjustmentInsurancesResponse = destroyYearendAdjustmentInsurancesResponseComposite & {
  headers: Headers;
}

export const getDestroyYearendAdjustmentInsurancesUrl = (year: number,
    employeeId: number,
    id: number,
    params: DestroyYearendAdjustmentInsurancesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/insurances/${employeeId}/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/insurances/${employeeId}/${id}`
}

export const destroyYearendAdjustmentInsurances = async (year: number,
    employeeId: number,
    id: number,
    params: DestroyYearendAdjustmentInsurancesParams, options?: RequestInit): Promise<destroyYearendAdjustmentInsurancesResponse> => {
  
  return customFetch<destroyYearendAdjustmentInsurancesResponse>(getDestroyYearendAdjustmentInsurancesUrl(year,employeeId,id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type putYearendAdjustmentHousingLoanDeductionResponse200 = {
  data: PutYearendAdjustmentHousingLoanDeduction200
  status: 200
}

export type putYearendAdjustmentHousingLoanDeductionResponse400 = {
  data: Error
  status: 400
}

export type putYearendAdjustmentHousingLoanDeductionResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type putYearendAdjustmentHousingLoanDeductionResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type putYearendAdjustmentHousingLoanDeductionResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type putYearendAdjustmentHousingLoanDeductionResponse404 = {
  data: NotfoundError
  status: 404
}

export type putYearendAdjustmentHousingLoanDeductionResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type putYearendAdjustmentHousingLoanDeductionResponseComposite = putYearendAdjustmentHousingLoanDeductionResponse200 | putYearendAdjustmentHousingLoanDeductionResponse400 | putYearendAdjustmentHousingLoanDeductionResponse401 | putYearendAdjustmentHousingLoanDeductionResponse403ApplicationProblemJson | putYearendAdjustmentHousingLoanDeductionResponse403ApplicationJson | putYearendAdjustmentHousingLoanDeductionResponse404 | putYearendAdjustmentHousingLoanDeductionResponse500;
    
export type putYearendAdjustmentHousingLoanDeductionResponse = putYearendAdjustmentHousingLoanDeductionResponseComposite & {
  headers: Headers;
}

export const getPutYearendAdjustmentHousingLoanDeductionUrl = (year: number,
    employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/housing_loan_deductions/${employeeId}`
}

export const putYearendAdjustmentHousingLoanDeduction = async (year: number,
    employeeId: number,
    putYearendAdjustmentHousingLoanDeductionBody?: PutYearendAdjustmentHousingLoanDeductionBody, options?: RequestInit): Promise<putYearendAdjustmentHousingLoanDeductionResponse> => {
  
  return customFetch<putYearendAdjustmentHousingLoanDeductionResponse>(getPutYearendAdjustmentHousingLoanDeductionUrl(year,employeeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putYearendAdjustmentHousingLoanDeductionBody,)
  }
);}



export type postYearendAdjustmentHousingLoanResponse201 = {
  data: ApiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanResponse
  status: 201
}

export type postYearendAdjustmentHousingLoanResponse400 = {
  data: Error
  status: 400
}

export type postYearendAdjustmentHousingLoanResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type postYearendAdjustmentHousingLoanResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type postYearendAdjustmentHousingLoanResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type postYearendAdjustmentHousingLoanResponse404 = {
  data: NotfoundError
  status: 404
}

export type postYearendAdjustmentHousingLoanResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type postYearendAdjustmentHousingLoanResponseComposite = postYearendAdjustmentHousingLoanResponse201 | postYearendAdjustmentHousingLoanResponse400 | postYearendAdjustmentHousingLoanResponse401 | postYearendAdjustmentHousingLoanResponse403ApplicationProblemJson | postYearendAdjustmentHousingLoanResponse403ApplicationJson | postYearendAdjustmentHousingLoanResponse404 | postYearendAdjustmentHousingLoanResponse500;
    
export type postYearendAdjustmentHousingLoanResponse = postYearendAdjustmentHousingLoanResponseComposite & {
  headers: Headers;
}

export const getPostYearendAdjustmentHousingLoanUrl = (year: number,
    employeeId: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/housing_loans/${employeeId}`
}

export const postYearendAdjustmentHousingLoan = async (year: number,
    employeeId: number,
    apiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanBody?: ApiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanBody, options?: RequestInit): Promise<postYearendAdjustmentHousingLoanResponse> => {
  
  return customFetch<postYearendAdjustmentHousingLoanResponse>(getPostYearendAdjustmentHousingLoanUrl(year,employeeId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanBody,)
  }
);}



export type putYearendAdjustmentHousingLoanResponse200 = {
  data: ApiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanResponse
  status: 200
}

export type putYearendAdjustmentHousingLoanResponse400 = {
  data: Error
  status: 400
}

export type putYearendAdjustmentHousingLoanResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type putYearendAdjustmentHousingLoanResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type putYearendAdjustmentHousingLoanResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type putYearendAdjustmentHousingLoanResponse404 = {
  data: NotfoundError
  status: 404
}

export type putYearendAdjustmentHousingLoanResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type putYearendAdjustmentHousingLoanResponseComposite = putYearendAdjustmentHousingLoanResponse200 | putYearendAdjustmentHousingLoanResponse400 | putYearendAdjustmentHousingLoanResponse401 | putYearendAdjustmentHousingLoanResponse403ApplicationProblemJson | putYearendAdjustmentHousingLoanResponse403ApplicationJson | putYearendAdjustmentHousingLoanResponse404 | putYearendAdjustmentHousingLoanResponse500;
    
export type putYearendAdjustmentHousingLoanResponse = putYearendAdjustmentHousingLoanResponseComposite & {
  headers: Headers;
}

export const getPutYearendAdjustmentHousingLoanUrl = (year: number,
    employeeId: number,
    id: number,) => {


  

  return `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/housing_loans/${employeeId}/${id}`
}

export const putYearendAdjustmentHousingLoan = async (year: number,
    employeeId: number,
    id: number,
    apiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanBody?: ApiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanBody, options?: RequestInit): Promise<putYearendAdjustmentHousingLoanResponse> => {
  
  return customFetch<putYearendAdjustmentHousingLoanResponse>(getPutYearendAdjustmentHousingLoanUrl(year,employeeId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      apiV1EmployeeYearendAdjustmentControllerUpdateHousingLoanBody,)
  }
);}



export type destroyYearendAdjustmentHousingLoanResponse204 = {
  data: null
  status: 204
}

export type destroyYearendAdjustmentHousingLoanResponse400 = {
  data: Error
  status: 400
}

export type destroyYearendAdjustmentHousingLoanResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type destroyYearendAdjustmentHousingLoanResponse403ApplicationProblemJson = {
  data: ForbiddenError
  status: 403
}

export type destroyYearendAdjustmentHousingLoanResponse403ApplicationJson = {
  data: AccessDeniedError
  status: 403
}

export type destroyYearendAdjustmentHousingLoanResponse404 = {
  data: NotfoundError
  status: 404
}

export type destroyYearendAdjustmentHousingLoanResponse500 = {
  data: InternalServerError
  status: 500
}
    
export type destroyYearendAdjustmentHousingLoanResponseComposite = destroyYearendAdjustmentHousingLoanResponse204 | destroyYearendAdjustmentHousingLoanResponse400 | destroyYearendAdjustmentHousingLoanResponse401 | destroyYearendAdjustmentHousingLoanResponse403ApplicationProblemJson | destroyYearendAdjustmentHousingLoanResponse403ApplicationJson | destroyYearendAdjustmentHousingLoanResponse404 | destroyYearendAdjustmentHousingLoanResponse500;
    
export type destroyYearendAdjustmentHousingLoanResponse = destroyYearendAdjustmentHousingLoanResponseComposite & {
  headers: Headers;
}

export const getDestroyYearendAdjustmentHousingLoanUrl = (year: number,
    employeeId: number,
    id: number,
    params: DestroyYearendAdjustmentHousingLoanParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/housing_loans/${employeeId}/${id}?${stringifiedParams}` : `https://api.freee.co.jp/hr/api/v1/yearend_adjustments/${year}/housing_loans/${employeeId}/${id}`
}

export const destroyYearendAdjustmentHousingLoan = async (year: number,
    employeeId: number,
    id: number,
    params: DestroyYearendAdjustmentHousingLoanParams, options?: RequestInit): Promise<destroyYearendAdjustmentHousingLoanResponse> => {
  
  return customFetch<destroyYearendAdjustmentHousingLoanResponse>(getDestroyYearendAdjustmentHousingLoanUrl(year,employeeId,id,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


