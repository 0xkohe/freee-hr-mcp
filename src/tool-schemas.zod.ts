/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * freee人事労務 API
 * 
<p>freee人事労務のAPI仕様です。</p>

<hr />

<h2 id="start_guide">スタートガイド</h2>

<p>freee API開発がはじめての方は<a href="https://developer.freee.co.jp/getting-started">freee API スタートガイド</a>を参照してください。</p>

<hr />
<h2 id="specification">仕様</h2>

<h3 id="api_endpoint">APIエンドポイント</h3>

<p>https://api.freee.co.jp/hr</p>

<h3 id="about_authorize">認証について</h3>

<p>OAuth2.0を利用します。<a href="https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc" target="_blank">詳細はリファレンスの認証に関する記載を参照してください。</a></p>

<h3 id="data_format">データフォーマット</h3>

<p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>

<h3 id="compatibility">後方互換性ありの変更</h3>

<p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>

<ul>
<li>新しいAPIリソース・エンドポイントの追加</li>
<li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li>
<li>既存のAPIレスポンスに対する新しいプロパティの追加</li>
<li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li>
<li>keyとなっているidやcodeの長さの変更（長くする）</li>
<li>エラーメッセージの変更</li>
</ul>

<h3 id="common_response_header">共通レスポンスヘッダー</h3>

<p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>

<ul>
<li>
<p>X-Request-Id</p>
<ul>
<li>各リクエスト毎に発行されるID</li>
</ul>
</li>
</ul>

<h3 id="error_response">共通エラーレスポンス</h3>

<p>APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。</p>

  <table border="1">
  <tbody>
    <tr>
      <th style="padding: 10px"><strong>ステータスコード</strong></th>
      <th style="padding: 10px"><strong>原因</strong></th>
    </tr>
    <tr><td style="padding: 10px">400</td><td style="padding: 10px">リクエストパラメータが不正</td></tr>
    <tr><td style="padding: 10px">401</td><td style="padding: 10px">アクセストークンが無効</td></tr>
    <tr><td style="padding: 10px">403</td><td style="padding: 10px">アクセス権限がない</td></tr>
    <tr><td style="padding: 10px">404</td><td style="padding: 10px">リソースが存在しない</td></tr>
    <tr><td style="padding: 10px">429</td><td style="padding: 10px">リクエスト回数制限を超えた</td></tr>
    <tr><td style="padding: 10px">503</td><td style="padding: 10px">システム内で予期しないエラーが発生</td></tr>
  </tbody>
</table>

<p>メッセージボディ内の <code>messages</code> にはエラー内容を説明する文字列が入ります。</p>
<pre><code>  {
    &quot;status_code&quot; : 400,
    &quot;errors&quot; : [
      {
        &quot;type&quot; : &quot;bad_request&quot;,
        &quot;messages&quot; : [
          &quot;リクエストの形式が不正です。&quot;
        ]
      }
    ]
  }  </code></pre>

</br>

<h3 id="api_rate_limit">API使用制限</h3> 
<p>APIリクエストは1時間で10000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。</p>
<pre><code>X-Ratelimit-Limit:10000
X-Ratelimit-Remaining:9998
X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z
</code></pre>

<br> 各ヘッダの意味は次のとおりです。</p>

 <table border="1">
  <tbody>
    <tr>
      <th style="padding: 10px"><strong>ヘッダ名</strong></th>
      <th style="padding: 10px"><strong>説明</strong></th>
    </tr>
    <tr><td style="padding: 10px">X-RateLimit-Limit</td><td style="padding: 10px">使用回数の上限</td></tr>
    <tr><td style="padding: 10px">X-RateLimit-Remaining</td><td style="padding: 10px">残り使用回数</td></tr>
    <tr><td style="padding: 10px">X-RateLimit-Reset</td><td style="padding: 10px">使用回数がリセットされる時刻</td></tr>
  </tbody>
</table>

<p>上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。<br> その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>

</br>

<h3 id="api_rate_limit">プランごとの利用可能API</h3> 

<p>契約プランごとに利用可能なfreee人事労務APIはfreee人事労務のWeb版でご利用できる機能と同様です。例えば、スタンダードプラン（または旧ベーシックプラン）を契約している場合、Web版では打刻機能をご利用いただけますので、APIでもタイムレコーダー(打刻)APIが利用可能です。<a href="https://support.freee.co.jp/hc/ja/articles/203309710" target="_blank">freee人事労務のWeb版のプラン別機能比較はfreee人事労務のプラン・料金についてのヘルプを参照してください。</a></p>

</br>

<hr />
 * OpenAPI spec version: 2022-02-01
 */
import { z as zod } from 'zod';

export const getUsersMeResponse = zod.object({
  "id": zod.number().optional().describe('ユーザーID'),
  "companies": zod.array(zod.object({
  "id": zod.number().optional().describe('事業所ID'),
  "name": zod.string().optional().describe('事業所名'),
  "role": zod.string().optional().describe('事業所におけるロール。\n\n- `company_admin`: 管理者\n- `self_only`: 一般または勤怠部門管理者\n- `physician`: 産業医\n- `shift_admin`: AIシフト担当者\n- `time_clock_device_setter`: 打刻機設定者\n\n[各権限でできることは各アカウントの権限についてのヘルプページを参照してください。](https://support.freee.co.jp/hc/ja/articles/204087410#3)'),
  "external_cid": zod.string().optional().describe('事業所番号(半角英数字10桁)'),
  "employee_id": zod.number().nullish().describe('事業所に所属する従業員としての従業員ID、従業員情報が未登録の場合はnullになります。'),
  "display_name": zod.string().nullish().describe('事業所に所属する従業員の表示名')
})).optional().describe('ユーザーが属する事業所の一覧')
})


export const getCompanyEmployeesPathCompanyIdMax = 2147483647;


export const getCompanyEmployeesParams = zod.object({
  "company_id": zod.number().min(1).max(getCompanyEmployeesPathCompanyIdMax).describe('事業所ID')
})

export const getCompanyEmployeesQueryLimitMax = 100;
export const getCompanyEmployeesQueryOffsetMin = 0;

export const getCompanyEmployeesQueryOffsetMax = 2147483647;
export const getCompanyEmployeesQueryWithNoPayrollCalculationDefault = false;

export const getCompanyEmployeesQueryParams = zod.object({
  "limit": zod.number().min(1).max(getCompanyEmployeesQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getCompanyEmployeesQueryOffsetMin).max(getCompanyEmployeesQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)'),
  "with_no_payroll_calculation": zod.boolean().optional().describe('trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。')
})

export const getCompanyEmployeesResponseItem = zod.object({
  "id": zod.number().optional().describe('従業員ID'),
  "num": zod.string().nullish().describe('従業員番号(従業員詳細未設定の場合、nullになります。)'),
  "display_name": zod.string().optional().describe('従業員名（表示名）'),
  "entry_date": zod.string().date().optional().describe('入社日'),
  "retire_date": zod.string().date().nullish().describe('退職日'),
  "user_id": zod.number().nullish().describe('ユーザーID(従業員詳細未設定の場合、nullになります。)'),
  "email": zod.string().nullish().describe('ログイン用メールアドレス(従業員詳細未設定の場合、nullになります。)'),
  "payroll_calculation": zod.boolean().optional().describe('給与計算対象従業員の場合trueを返します'),
  "closing_day": zod.number().nullish().describe('締め日(給与計算対象外従業員の場合、nullを返します)'),
  "pay_day": zod.number().nullish().describe('支払日(給与計算対象外従業員の場合、nullを返します)'),
  "month_of_pay_day": zod.string().nullish().describe('翌月払いか、当月払いか(給与計算対象外従業員の場合、nullを返します)')
})
export const getCompanyEmployeesResponse = zod.array(getCompanyEmployeesResponseItem)


export const getEmployeesQueryCompanyIdMax = 2147483647;
export const getEmployeesQueryYearMin = 2000;

export const getEmployeesQueryYearMax = 2100;
export const getEmployeesQueryMonthMax = 12;
export const getEmployeesQueryLimitMax = 100;
export const getEmployeesQueryOffsetMin = 0;

export const getEmployeesQueryOffsetMax = 2147483647;
export const getEmployeesQueryWithNoPayrollCalculationDefault = false;

export const getEmployeesQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeesQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getEmployeesQueryYearMin).max(getEmployeesQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeesQueryMonthMax).describe('従業員情報を取得したい月<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>\n翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>'),
  "limit": zod.number().min(1).max(getEmployeesQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getEmployeesQueryOffsetMin).max(getEmployeesQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)'),
  "with_no_payroll_calculation": zod.boolean().optional().describe('trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。')
})

export const getEmployeesResponseEmployeesItemProfileRulePrefectureCodeMin = -1;

export const getEmployeesResponseEmployeesItemProfileRulePrefectureCodeMax = 46;
export const getEmployeesResponseEmployeesItemProfileRuleResidentialPrefectureCodeMin = -1;

export const getEmployeesResponseEmployeesItemProfileRuleResidentialPrefectureCodeMax = 46;
export const getEmployeesResponseEmployeesItemProfileRuleEmailMax = 255;
export const getEmployeesResponseEmployeesItemProfileRuleHouseholderNameMax = 255;
export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin = -999999999;

export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax = 999999999;
export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin = -999999999;

export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax = 999999999;
export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin = -999999999.9999;

export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax = 999999999.9999;
export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin = -999999999.9999;

export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax = 999999999.9999;
export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin = -999999999;

export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax = 999999999;
export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const getEmployeesResponseEmployeesItemDependentRulesItemPrefectureCodeMin = -1;

export const getEmployeesResponseEmployeesItemDependentRulesItemPrefectureCodeMax = 46;
export const getEmployeesResponseEmployeesItemDependentRulesItemEmploymentInsuranceReceivesFromRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getEmployeesResponseEmployeesItemDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax = 255;
export const getEmployeesResponseEmployeesItemDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax = 255;
export const getEmployeesResponseEmployeesItemDependentRulesItemTaxOtherDependentAcquisitionReasonMax = 255;
export const getEmployeesResponseEmployeesItemDependentRulesItemTaxOtherDependentDisqualificationReasonMax = 255;
export const getEmployeesResponseEmployeesItemBasicPayRuleIdMax = 2147483647;
export const getEmployeesResponseEmployeesItemBasicPayRuleCompanyIdMax = 2147483647;
export const getEmployeesResponseEmployeesItemBasicPayRuleEmployeeIdMax = 2147483647;
export const getEmployeesResponseEmployeesItemBasicPayRulePayAmountMin = 0;

export const getEmployeesResponseEmployeesItemBasicPayRulePayAmountMax = 99999999;


export const getEmployeesResponse = zod.object({
  "employees": zod.array(zod.object({
  "id": zod.number().optional().describe('従業員ID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "num": zod.string().nullish().describe('従業員番号'),
  "display_name": zod.string().optional().describe('従業員名（表示名）'),
  "base_pension_num": zod.string().nullish().describe('基礎年金番号'),
  "employment_insurance_reference_number": zod.string().optional().describe('被保険者番号（雇用保険）'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "entry_date": zod.string().date().optional().describe('入社日'),
  "retire_date": zod.string().date().nullish().describe('退職日'),
  "user_id": zod.number().nullish().describe('ユーザーID(従業員詳細未設定の場合、nullになります。)'),
  "profile_rule": zod.object({
  "id": zod.number().optional(),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().optional().describe('姓カナ'),
  "first_name_kana": zod.string().optional().describe('名カナ'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(getEmployeesResponseEmployeesItemProfileRulePrefectureCodeMin).max(getEmployeesResponseEmployeesItemProfileRulePrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().optional().describe('住民票住所の市区町村以降の住所カナ'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "residential_zipcode1": zod.string().nullish().describe('現住所の郵便番号１'),
  "residential_zipcode2": zod.string().nullish().describe('現住所の郵便番号２'),
  "residential_prefecture_code": zod.number().min(getEmployeesResponseEmployeesItemProfileRuleResidentialPrefectureCodeMin).max(getEmployeesResponseEmployeesItemProfileRuleResidentialPrefectureCodeMax).nullish().describe('現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "residential_address": zod.string().nullish().describe('現住所の住所'),
  "residential_address_kana": zod.string().nullish().describe('現住所の住所カナ'),
  "employment_type": zod.string().nullish().describe('雇用形態 board-member: 役員, regular: 正社員, fixed-term: 契約社員, part-time: アルバイト・パート, temporary: 派遣社員, (空文字列): その他'),
  "title": zod.string().nullish().describe('肩書'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "married": zod.boolean().optional().describe('配偶者の有無'),
  "is_working_student": zod.boolean().optional().describe('勤労学生かどうか'),
  "widow_type": zod.string().optional().describe('寡夫／寡婦かどうか na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親'),
  "disability_type": zod.string().optional().describe('障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者'),
  "email": zod.string().max(getEmployeesResponseEmployeesItemProfileRuleEmailMax).nullish().describe('メールアドレス'),
  "householder_name": zod.string().max(getEmployeesResponseEmployeesItemProfileRuleHouseholderNameMax).optional().describe('世帯主の名前 世帯主の続柄がmyselfの場合は空白'),
  "householder": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other']).nullish().describe('世帯主の続柄 myself:本人, husband:夫, wife:妻, father:父, mother:母, child:子供, senior_brother:兄, junior_brother:弟, senior_sister:姉, junior_sister:妹, grandchild:孫, grandfather:祖父, grandmother:祖母, father_in_law:義父, mother_in_law:義母, grandfather_in_law:義祖父, grandmother_in_law:義祖母, other:その他')
}).nullish(),
  "health_insurance_rule": zod.object({
  "id": zod.number().optional().describe('健康保険ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('健康保険に加入しているかどうか'),
  "health_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の健康保険料の計算方法'),
  "health_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の健康保険料の計算方法'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "manual_health_insurance_amount_of_employee_salary": zod.number().min(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin).max(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_employee_bonus": zod.number().min(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin).max(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_company_salary": zod.number().min(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin).max(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（会社負担分）'),
  "manual_health_insurance_amount_of_company_bonus": zod.number().min(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin).max(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（会社負担分）'),
  "care_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の介護保険料の計算方法'),
  "care_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の介護保険料の計算方法'),
  "manual_care_insurance_amount_of_employee_salary": zod.number().min(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin).max(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_employee_bonus": zod.number().min(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin).max(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_company_salary": zod.number().min(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin).max(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（会社負担分）'),
  "manual_care_insurance_amount_of_company_bonus": zod.number().min(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin).max(getEmployeesResponseEmployeesItemHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（会社負担分）'),
  "reference_num": zod.string().nullish().describe('健康保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額')
}).nullish(),
  "welfare_pension_insurance_rule": zod.object({
  "id": zod.number().optional(),
  "child_allowance_contribution_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の子ども・子育て拠出金の計算方法'),
  "child_allowance_contribution_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の子ども・子育て拠出金の計算方法'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('厚生年金保険に加入しているかどうか'),
  "manual_child_allowance_contribution_amount_bonus": zod.number().min(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin).max(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax).nullish().describe('賞与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_child_allowance_contribution_amount_salary": zod.number().min(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin).max(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax).nullish().describe('給与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_welfare_pension_insurance_amount_of_company_bonus": zod.number().min(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin).max(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_company_salary": zod.number().min(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin).max(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_bonus": zod.number().min(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin).max(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_salary": zod.number().min(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin).max(getEmployeesResponseEmployeesItemWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "reference_num": zod.string().nullish().describe('厚生年金保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額'),
  "welfare_pension_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の厚生年金保険料の計算方法'),
  "welfare_pension_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の厚生年金保険料の計算方法')
}).nullish(),
  "dependent_rules": zod.array(zod.object({
  "id": zod.number().optional().describe('家族情報ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().nullish().describe('姓カナ'),
  "first_name_kana": zod.string().nullish().describe('名カナ'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "relationship": zod.string().optional().describe('続柄 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "residence_type": zod.string().optional().describe('同居・別居 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(getEmployeesResponseEmployeesItemDependentRulesItemPrefectureCodeMin).max(getEmployeesResponseEmployeesItemDependentRulesItemPrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().nullish().describe('住民票住所の市区町村以降の住所カナ'),
  "base_pension_num": zod.string().nullish().describe('基礎年金番号'),
  "income": zod.number().optional().describe('年間所得'),
  "annual_revenue": zod.number().optional().describe('年間収入'),
  "disability_type": zod.string().optional().describe('障害に該当するか na: 障害なし, general: 一般の障害者, heavy: 特別障害者'),
  "occupation": zod.string().nullish().describe('職業'),
  "annual_remittance_amount": zod.number().optional().describe('一年間の送金額'),
  "employment_insurance_receive_status": zod.enum(['unselected', 'receiving_employment_insurance', 'not_receiving_employment_insurance', 'pending_employment_insurance']).nullish().describe('雇用保険受給の有無\n- unselected 未選択\n- receiving_employment_insurance 雇用保険受給有り\n- not_receiving_employment_insurance 雇用保険受給無し\n- pending_employment_insurance 申請中'),
  "employment_insurance_receives_from": zod.string().date().regex(getEmployeesResponseEmployeesItemDependentRulesItemEmploymentInsuranceReceivesFromRegExp).nullish().describe('雇用保険受給開始年月日 employment_insurance_receive_statusが未選択、無しの場合は指定できません。'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "phone_type": zod.enum(['unselected', 'home', 'office', 'mobile', 'other']).nullish().describe('電話番号の種別\n- unselected 未選択\n- home 自宅\n- office 勤務先\n- mobile 携帯\n- other その他'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "social_insurance_and_tax_dependent": zod.string().optional().describe('扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ'),
  "social_insurance_dependent_acquisition_date": zod.string().date().nullish().describe('社会保険の扶養加入日'),
  "social_insurance_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('社会保険の扶養加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": 未選択, birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "social_insurance_other_dependent_acquisition_reason": zod.string().max(getEmployeesResponseEmployeesItemDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax).nullish().describe('社会保険のその他の扶養加入理由'),
  "social_insurance_dependent_disqualification_date": zod.string().date().nullish().describe('社会保険の扶養喪失日'),
  "social_insurance_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('社会保険の扶養喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "social_insurance_other_dependent_disqualification_reason": zod.string().max(getEmployeesResponseEmployeesItemDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax).nullish().describe('社会保険のその他の扶養喪失理由'),
  "tax_dependent_acquisition_date": zod.string().date().nullish().describe('税扶養の加入日'),
  "tax_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('税扶養の加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "tax_other_dependent_acquisition_reason": zod.string().max(getEmployeesResponseEmployeesItemDependentRulesItemTaxOtherDependentAcquisitionReasonMax).nullish().describe('税扶養のその他の加入理由'),
  "tax_dependent_disqualification_date": zod.string().date().nullish().describe('税扶養の喪失日'),
  "tax_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('税扶養の喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "tax_other_dependent_disqualification_reason": zod.string().max(getEmployeesResponseEmployeesItemDependentRulesItemTaxOtherDependentDisqualificationReasonMax).nullish().describe('税扶養のその他の喪失理由'),
  "non_resident_dependents_reason": zod.enum(['none', 'over_16_to_under_30_or_over_70', 'study_abroad', 'handicapped', 'over_38_man']).optional().describe('非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払')
})).optional().describe('家族情報'),
  "bank_account_rule": zod.object({
  "id": zod.number().optional().describe('銀行口座ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "bank_name": zod.string().nullish().describe('金融機関名'),
  "bank_name_kana": zod.string().nullish().describe('金融機関名カナ'),
  "bank_code": zod.string().nullish().describe('金融機関コード'),
  "branch_name": zod.string().nullish().describe('支店名'),
  "branch_name_kana": zod.string().nullish().describe('支店名カナ'),
  "branch_code": zod.string().nullish().describe('支店コード'),
  "account_number": zod.string().nullish().describe('口座番号'),
  "account_name": zod.string().nullish().describe('口座名義カナ'),
  "account_type": zod.string().nullish().describe('預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金')
}).nullish(),
  "basic_pay_rule": zod.object({
  "id": zod.number().min(1).max(getEmployeesResponseEmployeesItemBasicPayRuleIdMax).optional().describe('従業員の基本給ID'),
  "company_id": zod.number().min(1).max(getEmployeesResponseEmployeesItemBasicPayRuleCompanyIdMax).optional().describe('事業所ID'),
  "employee_id": zod.number().min(1).max(getEmployeesResponseEmployeesItemBasicPayRuleEmployeeIdMax).optional().describe('従業員ID'),
  "pay_calc_type": zod.enum(['monthly', 'daily', 'hourly']).optional().describe('給与方式 monthly: 月給, daily: 日給, hourly: 時給'),
  "pay_amount": zod.number().min(getEmployeesResponseEmployeesItemBasicPayRulePayAmountMin).max(getEmployeesResponseEmployeesItemBasicPayRulePayAmountMax).optional().describe('基本給')
}).nullish(),
  "payroll_calculation": zod.boolean().optional().describe('給与計算対象従業員の場合trueを返します'),
  "company_reference_date_rule_name": zod.string().nullish().describe('締め日支払い日グループ名(給与計算対象外従業員の場合、nullを返します)')
})).optional(),
  "total_count": zod.number().optional().describe('合計件数')
})


export const createEmployeeBodyCompanyIdMax = 2147483647;
export const createEmployeeBodyEmployeeNumMax = 255;
export const createEmployeeBodyEmployeeWorkingHoursSystemNameMax = 30;
export const createEmployeeBodyEmployeeCompanyReferenceDateRuleNameMax = 15;
export const createEmployeeBodyEmployeeLastNameMax = 255;
export const createEmployeeBodyEmployeeFirstNameMax = 255;
export const createEmployeeBodyEmployeeLastNameKanaMax = 255;
export const createEmployeeBodyEmployeeFirstNameKanaMax = 255;
export const createEmployeeBodyEmployeeBirthDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const createEmployeeBodyEmployeeEntryDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const createEmployeeBodyEmployeePayAmountMin = 0;

export const createEmployeeBodyEmployeePayAmountMax = 99999999;
export const createEmployeeBodyEmployeeNoPayrollCalculationDefault = false;

export const createEmployeeBody = zod.object({
  "company_id": zod.number().min(1).max(createEmployeeBodyCompanyIdMax).describe('作成対象事業所ID（必須）'),
  "employee": zod.object({
  "num": zod.string().max(createEmployeeBodyEmployeeNumMax).optional().describe('従業員番号<br>\n従業員を判別しやすいよう管理することができます。（例: 1人目の正社員を A-001 と入力）'),
  "working_hours_system_name": zod.string().max(createEmployeeBodyEmployeeWorkingHoursSystemNameMax).optional().describe('<a href=\"https://support.freee.co.jp/hc/ja/articles/360000562403-労働時間制度と勤務-賃金設定について\" target=\"_blank\">勤務・賃金設定名</a>\nで設定した名称を指定してください。\n- 未指定の際は、最初に登録したデータが利用されます。\n- 入力パラメータのno_payroll_calculationがtrueの場合に指定するとエラーになります。'),
  "company_reference_date_rule_name": zod.string().max(createEmployeeBodyEmployeeCompanyReferenceDateRuleNameMax).optional().describe('<a href=\"https://support.freee.co.jp/hc/ja/articles/360000666303-締め日支払い日を変更する方法は-\" target=\"_blank\">締め日支払い日グループ名</a>\nで設定した締め日支払い日を指定してください。\n- 未指定の際は、最初に登録したデータが利用されます。\n- 入力パラメータのno_payroll_calculationがtrueの場合に指定するとエラーになります。'),
  "last_name": zod.string().max(createEmployeeBodyEmployeeLastNameMax).describe('姓（必須）<br>\nlast_nameとfirst_nameを空白文字で結合した文字列がdisplay_nameとして登録されます。\n- 例）last_name=田中、first_name＝太郎の場合、display_name＝田中 太郎\n- display_nameはput apiで更新可能です。'),
  "first_name": zod.string().max(createEmployeeBodyEmployeeFirstNameMax).describe('名（必須）<br>\nlast_nameとfirst_nameを空白文字で結合した文字列がdisplay_nameとして登録されます。\n- 例）last_name=田中、first_name＝太郎の場合、display_name＝田中 太郎\n- display_nameはput apiで更新可能です。'),
  "last_name_kana": zod.string().max(createEmployeeBodyEmployeeLastNameKanaMax).describe('姓カナ（必須）'),
  "first_name_kana": zod.string().max(createEmployeeBodyEmployeeFirstNameKanaMax).describe('名カナ（必須）'),
  "birth_date": zod.string().date().regex(createEmployeeBodyEmployeeBirthDateRegExp).describe('生年月日（必須）'),
  "entry_date": zod.string().date().regex(createEmployeeBodyEmployeeEntryDateRegExp).describe('入社日（必須）'),
  "pay_calc_type": zod.enum(['monthly', 'daily', 'hourly']).optional().describe('給与方式 monthly: 月給, daily: 日給, hourly: 時給\n- フレックスタイム制を使用している場合はmonthly以外指定できません。\n- 入力パラメータのno_payroll_calculationがfalseの場合は必須になります。\n- 入力パラメータのno_payroll_calculationがtrueの場合に指定するとエラーになります。'),
  "pay_amount": zod.number().min(createEmployeeBodyEmployeePayAmountMin).max(createEmployeeBodyEmployeePayAmountMax).optional().describe('基本給\n- 入力パラメータのno_payroll_calculationがfalseの場合は必須になります。\n- 入力パラメータのno_payroll_calculationがtrueの場合に指定するとエラーになります。'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）'),
  "married": zod.boolean().optional().describe('配偶者の有無（デフォルト: false）'),
  "no_payroll_calculation": zod.boolean().optional().describe('給与計算対象外の従業員情報を作成する場合はtrueを指定します')
})
})


export const getEmployeePathIdMax = 2147483647;


export const getEmployeeParams = zod.object({
  "id": zod.number().min(1).max(getEmployeePathIdMax).describe('従業員ID')
})

export const getEmployeeQueryCompanyIdMax = 2147483647;
export const getEmployeeQueryYearMin = 2000;

export const getEmployeeQueryYearMax = 2100;
export const getEmployeeQueryMonthMax = 12;


export const getEmployeeQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getEmployeeQueryYearMin).max(getEmployeeQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeeQueryMonthMax).describe('従業員情報を取得したい月<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>\n翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>')
})

export const getEmployeeResponseEmployeeProfileRulePrefectureCodeMin = -1;

export const getEmployeeResponseEmployeeProfileRulePrefectureCodeMax = 46;
export const getEmployeeResponseEmployeeProfileRuleResidentialPrefectureCodeMin = -1;

export const getEmployeeResponseEmployeeProfileRuleResidentialPrefectureCodeMax = 46;
export const getEmployeeResponseEmployeeProfileRuleEmailMax = 255;
export const getEmployeeResponseEmployeeProfileRuleHouseholderNameMax = 255;
export const getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin = -999999999;

export const getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax = 999999999;
export const getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin = -999999999;

export const getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax = 999999999;
export const getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin = -999999999.9999;

export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax = 999999999.9999;
export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin = -999999999.9999;

export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax = 999999999.9999;
export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin = -999999999;

export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax = 999999999;
export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const getEmployeeResponseEmployeeDependentRulesItemPrefectureCodeMin = -1;

export const getEmployeeResponseEmployeeDependentRulesItemPrefectureCodeMax = 46;
export const getEmployeeResponseEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getEmployeeResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax = 255;
export const getEmployeeResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax = 255;
export const getEmployeeResponseEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax = 255;
export const getEmployeeResponseEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax = 255;
export const getEmployeeResponseEmployeeBasicPayRuleIdMax = 2147483647;
export const getEmployeeResponseEmployeeBasicPayRuleCompanyIdMax = 2147483647;
export const getEmployeeResponseEmployeeBasicPayRuleEmployeeIdMax = 2147483647;
export const getEmployeeResponseEmployeeBasicPayRulePayAmountMin = 0;

export const getEmployeeResponseEmployeeBasicPayRulePayAmountMax = 99999999;


export const getEmployeeResponse = zod.object({
  "employee": zod.object({
  "id": zod.number().optional().describe('従業員ID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "num": zod.string().nullish().describe('従業員番号'),
  "display_name": zod.string().optional().describe('従業員名（表示名）'),
  "base_pension_num": zod.string().nullish().describe('基礎年金番号'),
  "employment_insurance_reference_number": zod.string().optional().describe('被保険者番号（雇用保険）'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "entry_date": zod.string().date().optional().describe('入社日'),
  "retire_date": zod.string().date().nullish().describe('退職日'),
  "user_id": zod.number().nullish().describe('ユーザーID(従業員詳細未設定の場合、nullになります。)'),
  "profile_rule": zod.object({
  "id": zod.number().optional(),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().optional().describe('姓カナ'),
  "first_name_kana": zod.string().optional().describe('名カナ'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(getEmployeeResponseEmployeeProfileRulePrefectureCodeMin).max(getEmployeeResponseEmployeeProfileRulePrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().optional().describe('住民票住所の市区町村以降の住所カナ'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "residential_zipcode1": zod.string().nullish().describe('現住所の郵便番号１'),
  "residential_zipcode2": zod.string().nullish().describe('現住所の郵便番号２'),
  "residential_prefecture_code": zod.number().min(getEmployeeResponseEmployeeProfileRuleResidentialPrefectureCodeMin).max(getEmployeeResponseEmployeeProfileRuleResidentialPrefectureCodeMax).nullish().describe('現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "residential_address": zod.string().nullish().describe('現住所の住所'),
  "residential_address_kana": zod.string().nullish().describe('現住所の住所カナ'),
  "employment_type": zod.string().nullish().describe('雇用形態 board-member: 役員, regular: 正社員, fixed-term: 契約社員, part-time: アルバイト・パート, temporary: 派遣社員, (空文字列): その他'),
  "title": zod.string().nullish().describe('肩書'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "married": zod.boolean().optional().describe('配偶者の有無'),
  "is_working_student": zod.boolean().optional().describe('勤労学生かどうか'),
  "widow_type": zod.string().optional().describe('寡夫／寡婦かどうか na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親'),
  "disability_type": zod.string().optional().describe('障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者'),
  "email": zod.string().max(getEmployeeResponseEmployeeProfileRuleEmailMax).nullish().describe('メールアドレス'),
  "householder_name": zod.string().max(getEmployeeResponseEmployeeProfileRuleHouseholderNameMax).optional().describe('世帯主の名前 世帯主の続柄がmyselfの場合は空白'),
  "householder": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other']).nullish().describe('世帯主の続柄 myself:本人, husband:夫, wife:妻, father:父, mother:母, child:子供, senior_brother:兄, junior_brother:弟, senior_sister:姉, junior_sister:妹, grandchild:孫, grandfather:祖父, grandmother:祖母, father_in_law:義父, mother_in_law:義母, grandfather_in_law:義祖父, grandmother_in_law:義祖母, other:その他')
}).nullish(),
  "health_insurance_rule": zod.object({
  "id": zod.number().optional().describe('健康保険ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('健康保険に加入しているかどうか'),
  "health_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の健康保険料の計算方法'),
  "health_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の健康保険料の計算方法'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "manual_health_insurance_amount_of_employee_salary": zod.number().min(getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin).max(getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_employee_bonus": zod.number().min(getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin).max(getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_company_salary": zod.number().min(getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin).max(getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（会社負担分）'),
  "manual_health_insurance_amount_of_company_bonus": zod.number().min(getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin).max(getEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（会社負担分）'),
  "care_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の介護保険料の計算方法'),
  "care_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の介護保険料の計算方法'),
  "manual_care_insurance_amount_of_employee_salary": zod.number().min(getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin).max(getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_employee_bonus": zod.number().min(getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin).max(getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_company_salary": zod.number().min(getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin).max(getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（会社負担分）'),
  "manual_care_insurance_amount_of_company_bonus": zod.number().min(getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin).max(getEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（会社負担分）'),
  "reference_num": zod.string().nullish().describe('健康保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額')
}).nullish(),
  "welfare_pension_insurance_rule": zod.object({
  "id": zod.number().optional(),
  "child_allowance_contribution_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の子ども・子育て拠出金の計算方法'),
  "child_allowance_contribution_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の子ども・子育て拠出金の計算方法'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('厚生年金保険に加入しているかどうか'),
  "manual_child_allowance_contribution_amount_bonus": zod.number().min(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin).max(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax).nullish().describe('賞与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_child_allowance_contribution_amount_salary": zod.number().min(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin).max(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax).nullish().describe('給与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_welfare_pension_insurance_amount_of_company_bonus": zod.number().min(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin).max(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_company_salary": zod.number().min(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin).max(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_bonus": zod.number().min(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin).max(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_salary": zod.number().min(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin).max(getEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "reference_num": zod.string().nullish().describe('厚生年金保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額'),
  "welfare_pension_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の厚生年金保険料の計算方法'),
  "welfare_pension_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の厚生年金保険料の計算方法')
}).nullish(),
  "dependent_rules": zod.array(zod.object({
  "id": zod.number().optional().describe('家族情報ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().nullish().describe('姓カナ'),
  "first_name_kana": zod.string().nullish().describe('名カナ'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "relationship": zod.string().optional().describe('続柄 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "residence_type": zod.string().optional().describe('同居・別居 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(getEmployeeResponseEmployeeDependentRulesItemPrefectureCodeMin).max(getEmployeeResponseEmployeeDependentRulesItemPrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().nullish().describe('住民票住所の市区町村以降の住所カナ'),
  "base_pension_num": zod.string().nullish().describe('基礎年金番号'),
  "income": zod.number().optional().describe('年間所得'),
  "annual_revenue": zod.number().optional().describe('年間収入'),
  "disability_type": zod.string().optional().describe('障害に該当するか na: 障害なし, general: 一般の障害者, heavy: 特別障害者'),
  "occupation": zod.string().nullish().describe('職業'),
  "annual_remittance_amount": zod.number().optional().describe('一年間の送金額'),
  "employment_insurance_receive_status": zod.enum(['unselected', 'receiving_employment_insurance', 'not_receiving_employment_insurance', 'pending_employment_insurance']).nullish().describe('雇用保険受給の有無\n- unselected 未選択\n- receiving_employment_insurance 雇用保険受給有り\n- not_receiving_employment_insurance 雇用保険受給無し\n- pending_employment_insurance 申請中'),
  "employment_insurance_receives_from": zod.string().date().regex(getEmployeeResponseEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp).nullish().describe('雇用保険受給開始年月日 employment_insurance_receive_statusが未選択、無しの場合は指定できません。'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "phone_type": zod.enum(['unselected', 'home', 'office', 'mobile', 'other']).nullish().describe('電話番号の種別\n- unselected 未選択\n- home 自宅\n- office 勤務先\n- mobile 携帯\n- other その他'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "social_insurance_and_tax_dependent": zod.string().optional().describe('扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ'),
  "social_insurance_dependent_acquisition_date": zod.string().date().nullish().describe('社会保険の扶養加入日'),
  "social_insurance_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('社会保険の扶養加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": 未選択, birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "social_insurance_other_dependent_acquisition_reason": zod.string().max(getEmployeeResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax).nullish().describe('社会保険のその他の扶養加入理由'),
  "social_insurance_dependent_disqualification_date": zod.string().date().nullish().describe('社会保険の扶養喪失日'),
  "social_insurance_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('社会保険の扶養喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "social_insurance_other_dependent_disqualification_reason": zod.string().max(getEmployeeResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax).nullish().describe('社会保険のその他の扶養喪失理由'),
  "tax_dependent_acquisition_date": zod.string().date().nullish().describe('税扶養の加入日'),
  "tax_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('税扶養の加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "tax_other_dependent_acquisition_reason": zod.string().max(getEmployeeResponseEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax).nullish().describe('税扶養のその他の加入理由'),
  "tax_dependent_disqualification_date": zod.string().date().nullish().describe('税扶養の喪失日'),
  "tax_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('税扶養の喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "tax_other_dependent_disqualification_reason": zod.string().max(getEmployeeResponseEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax).nullish().describe('税扶養のその他の喪失理由'),
  "non_resident_dependents_reason": zod.enum(['none', 'over_16_to_under_30_or_over_70', 'study_abroad', 'handicapped', 'over_38_man']).optional().describe('非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払')
})).optional().describe('家族情報'),
  "bank_account_rule": zod.object({
  "id": zod.number().optional().describe('銀行口座ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "bank_name": zod.string().nullish().describe('金融機関名'),
  "bank_name_kana": zod.string().nullish().describe('金融機関名カナ'),
  "bank_code": zod.string().nullish().describe('金融機関コード'),
  "branch_name": zod.string().nullish().describe('支店名'),
  "branch_name_kana": zod.string().nullish().describe('支店名カナ'),
  "branch_code": zod.string().nullish().describe('支店コード'),
  "account_number": zod.string().nullish().describe('口座番号'),
  "account_name": zod.string().nullish().describe('口座名義カナ'),
  "account_type": zod.string().nullish().describe('預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金')
}).nullish(),
  "basic_pay_rule": zod.object({
  "id": zod.number().min(1).max(getEmployeeResponseEmployeeBasicPayRuleIdMax).optional().describe('従業員の基本給ID'),
  "company_id": zod.number().min(1).max(getEmployeeResponseEmployeeBasicPayRuleCompanyIdMax).optional().describe('事業所ID'),
  "employee_id": zod.number().min(1).max(getEmployeeResponseEmployeeBasicPayRuleEmployeeIdMax).optional().describe('従業員ID'),
  "pay_calc_type": zod.enum(['monthly', 'daily', 'hourly']).optional().describe('給与方式 monthly: 月給, daily: 日給, hourly: 時給'),
  "pay_amount": zod.number().min(getEmployeeResponseEmployeeBasicPayRulePayAmountMin).max(getEmployeeResponseEmployeeBasicPayRulePayAmountMax).optional().describe('基本給')
}).nullish(),
  "payroll_calculation": zod.boolean().optional().describe('給与計算対象従業員の場合trueを返します'),
  "company_reference_date_rule_name": zod.string().nullish().describe('締め日支払い日グループ名(給与計算対象外従業員の場合、nullを返します)')
}).optional()
})


export const updateEmployeePathIdMax = 2147483647;


export const updateEmployeeParams = zod.object({
  "id": zod.number().min(1).max(updateEmployeePathIdMax).describe('従業員ID')
})

export const updateEmployeeBodyCompanyIdMax = 2147483647;
export const updateEmployeeBodyYearMin = 2000;

export const updateEmployeeBodyYearMax = 2100;
export const updateEmployeeBodyMonthMax = 12;
export const updateEmployeeBodyEmployeeNumMax = 255;
export const updateEmployeeBodyEmployeeDisplayNameMax = 255;
export const updateEmployeeBodyEmployeeBasePensionNumMax = 10;
export const updateEmployeeBodyEmployeeEmploymentInsuranceReferenceNumberMax = 11;
export const updateEmployeeBodyEmployeeBirthDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateEmployeeBodyEmployeeEntryDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateEmployeeBodyEmployeeRetireDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateEmployeeBodyEmployeeCompanyReferenceDateRuleNameMax = 15;


export const updateEmployeeBody = zod.object({
  "company_id": zod.number().min(1).max(updateEmployeeBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "year": zod.number().min(updateEmployeeBodyYearMin).max(updateEmployeeBodyYearMax).optional().describe('更新対象年\n- 給与計算対象の従業員情報の場合は必須になります。'),
  "month": zod.number().min(1).max(updateEmployeeBodyMonthMax).optional().describe('更新対象月\n- 給与計算対象の従業員情報の場合は必須になります。\n- 締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。\n- 翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。'),
  "employee": zod.object({
  "num": zod.string().max(updateEmployeeBodyEmployeeNumMax).optional().describe('従業員番号<br>\n従業員を判別しやすいよう管理することができます。（例: 1人目の正社員を A-001 と入力）'),
  "display_name": zod.string().max(updateEmployeeBodyEmployeeDisplayNameMax).optional().describe('従業員名（freee人事労務上での表示にのみ使用される名前です。出力書類には姓名が使用されます。）\n- 給与計算対象外の従業員情報の場合は必須になります。'),
  "base_pension_num": zod.string().max(updateEmployeeBodyEmployeeBasePensionNumMax).optional().describe('基礎年金番号 数値文字列10桁固定長 例: 1111111111'),
  "employment_insurance_reference_number": zod.string().max(updateEmployeeBodyEmployeeEmploymentInsuranceReferenceNumberMax).optional().describe('被保険者番号（雇用保険） 数値文字列11桁固定長 例: 11111111111\n- 給与計算対象外の従業員情報の場合に指定するとエラーになります。'),
  "birth_date": zod.string().date().regex(updateEmployeeBodyEmployeeBirthDateRegExp).describe('生年月日 null不可'),
  "entry_date": zod.string().date().regex(updateEmployeeBodyEmployeeEntryDateRegExp).describe('入社日 null不可'),
  "retire_date": zod.string().date().regex(updateEmployeeBodyEmployeeRetireDateRegExp).nullish().describe('退職日\n- 退職していない場合は指定不要です。\n- 指定する場合はentry_date以降の日付を指定してください。\n- retire_dateをクリアする場合、nullを指定してください。'),
  "company_reference_date_rule_name": zod.string().max(updateEmployeeBodyEmployeeCompanyReferenceDateRuleNameMax).optional().describe('<a href=\"https://support.freee.co.jp/hc/ja/articles/360000666303-締め日支払い日を変更する方法は-\" target=\"_blank\">締め日支払い日グループ名</a>\nで設定した締め日支払い日を指定してください。\n- 未指定の際は、締め日支払い日は変わりません。\n- 指定した従業員が給与計算対象外の場合、指定するとエラーになります。')
})
})

export const updateEmployeeResponseEmployeeProfileRulePrefectureCodeMin = -1;

export const updateEmployeeResponseEmployeeProfileRulePrefectureCodeMax = 46;
export const updateEmployeeResponseEmployeeProfileRuleResidentialPrefectureCodeMin = -1;

export const updateEmployeeResponseEmployeeProfileRuleResidentialPrefectureCodeMax = 46;
export const updateEmployeeResponseEmployeeProfileRuleEmailMax = 255;
export const updateEmployeeResponseEmployeeProfileRuleHouseholderNameMax = 255;
export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin = -999999999;

export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax = 999999999;
export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin = -999999999;

export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax = 999999999;
export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin = -999999999.9999;

export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax = 999999999.9999;
export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin = -999999999.9999;

export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax = 999999999.9999;
export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin = -999999999;

export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax = 999999999;
export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const updateEmployeeResponseEmployeeDependentRulesItemPrefectureCodeMin = -1;

export const updateEmployeeResponseEmployeeDependentRulesItemPrefectureCodeMax = 46;
export const updateEmployeeResponseEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateEmployeeResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax = 255;
export const updateEmployeeResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax = 255;
export const updateEmployeeResponseEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax = 255;
export const updateEmployeeResponseEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax = 255;
export const updateEmployeeResponseEmployeeBasicPayRuleIdMax = 2147483647;
export const updateEmployeeResponseEmployeeBasicPayRuleCompanyIdMax = 2147483647;
export const updateEmployeeResponseEmployeeBasicPayRuleEmployeeIdMax = 2147483647;
export const updateEmployeeResponseEmployeeBasicPayRulePayAmountMin = 0;

export const updateEmployeeResponseEmployeeBasicPayRulePayAmountMax = 99999999;


export const updateEmployeeResponse = zod.object({
  "employee": zod.object({
  "id": zod.number().optional().describe('従業員ID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "num": zod.string().nullish().describe('従業員番号'),
  "display_name": zod.string().optional().describe('従業員名（表示名）'),
  "base_pension_num": zod.string().nullish().describe('基礎年金番号'),
  "employment_insurance_reference_number": zod.string().optional().describe('被保険者番号（雇用保険）'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "entry_date": zod.string().date().optional().describe('入社日'),
  "retire_date": zod.string().date().nullish().describe('退職日'),
  "user_id": zod.number().nullish().describe('ユーザーID(従業員詳細未設定の場合、nullになります。)'),
  "profile_rule": zod.object({
  "id": zod.number().optional(),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().optional().describe('姓カナ'),
  "first_name_kana": zod.string().optional().describe('名カナ'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(updateEmployeeResponseEmployeeProfileRulePrefectureCodeMin).max(updateEmployeeResponseEmployeeProfileRulePrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().optional().describe('住民票住所の市区町村以降の住所カナ'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "residential_zipcode1": zod.string().nullish().describe('現住所の郵便番号１'),
  "residential_zipcode2": zod.string().nullish().describe('現住所の郵便番号２'),
  "residential_prefecture_code": zod.number().min(updateEmployeeResponseEmployeeProfileRuleResidentialPrefectureCodeMin).max(updateEmployeeResponseEmployeeProfileRuleResidentialPrefectureCodeMax).nullish().describe('現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "residential_address": zod.string().nullish().describe('現住所の住所'),
  "residential_address_kana": zod.string().nullish().describe('現住所の住所カナ'),
  "employment_type": zod.string().nullish().describe('雇用形態 board-member: 役員, regular: 正社員, fixed-term: 契約社員, part-time: アルバイト・パート, temporary: 派遣社員, (空文字列): その他'),
  "title": zod.string().nullish().describe('肩書'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "married": zod.boolean().optional().describe('配偶者の有無'),
  "is_working_student": zod.boolean().optional().describe('勤労学生かどうか'),
  "widow_type": zod.string().optional().describe('寡夫／寡婦かどうか na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親'),
  "disability_type": zod.string().optional().describe('障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者'),
  "email": zod.string().max(updateEmployeeResponseEmployeeProfileRuleEmailMax).nullish().describe('メールアドレス'),
  "householder_name": zod.string().max(updateEmployeeResponseEmployeeProfileRuleHouseholderNameMax).optional().describe('世帯主の名前 世帯主の続柄がmyselfの場合は空白'),
  "householder": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other']).nullish().describe('世帯主の続柄 myself:本人, husband:夫, wife:妻, father:父, mother:母, child:子供, senior_brother:兄, junior_brother:弟, senior_sister:姉, junior_sister:妹, grandchild:孫, grandfather:祖父, grandmother:祖母, father_in_law:義父, mother_in_law:義母, grandfather_in_law:義祖父, grandmother_in_law:義祖母, other:その他')
}).nullish(),
  "health_insurance_rule": zod.object({
  "id": zod.number().optional().describe('健康保険ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('健康保険に加入しているかどうか'),
  "health_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の健康保険料の計算方法'),
  "health_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の健康保険料の計算方法'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "manual_health_insurance_amount_of_employee_salary": zod.number().min(updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin).max(updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_employee_bonus": zod.number().min(updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin).max(updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_company_salary": zod.number().min(updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin).max(updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（会社負担分）'),
  "manual_health_insurance_amount_of_company_bonus": zod.number().min(updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin).max(updateEmployeeResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（会社負担分）'),
  "care_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の介護保険料の計算方法'),
  "care_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の介護保険料の計算方法'),
  "manual_care_insurance_amount_of_employee_salary": zod.number().min(updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin).max(updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_employee_bonus": zod.number().min(updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin).max(updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_company_salary": zod.number().min(updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin).max(updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（会社負担分）'),
  "manual_care_insurance_amount_of_company_bonus": zod.number().min(updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin).max(updateEmployeeResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（会社負担分）'),
  "reference_num": zod.string().nullish().describe('健康保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額')
}).nullish(),
  "welfare_pension_insurance_rule": zod.object({
  "id": zod.number().optional(),
  "child_allowance_contribution_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の子ども・子育て拠出金の計算方法'),
  "child_allowance_contribution_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の子ども・子育て拠出金の計算方法'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('厚生年金保険に加入しているかどうか'),
  "manual_child_allowance_contribution_amount_bonus": zod.number().min(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin).max(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax).nullish().describe('賞与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_child_allowance_contribution_amount_salary": zod.number().min(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin).max(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax).nullish().describe('給与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_welfare_pension_insurance_amount_of_company_bonus": zod.number().min(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin).max(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_company_salary": zod.number().min(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin).max(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_bonus": zod.number().min(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin).max(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_salary": zod.number().min(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin).max(updateEmployeeResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "reference_num": zod.string().nullish().describe('厚生年金保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額'),
  "welfare_pension_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の厚生年金保険料の計算方法'),
  "welfare_pension_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の厚生年金保険料の計算方法')
}).nullish(),
  "dependent_rules": zod.array(zod.object({
  "id": zod.number().optional().describe('家族情報ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().nullish().describe('姓カナ'),
  "first_name_kana": zod.string().nullish().describe('名カナ'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "relationship": zod.string().optional().describe('続柄 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "residence_type": zod.string().optional().describe('同居・別居 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(updateEmployeeResponseEmployeeDependentRulesItemPrefectureCodeMin).max(updateEmployeeResponseEmployeeDependentRulesItemPrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().nullish().describe('住民票住所の市区町村以降の住所カナ'),
  "base_pension_num": zod.string().nullish().describe('基礎年金番号'),
  "income": zod.number().optional().describe('年間所得'),
  "annual_revenue": zod.number().optional().describe('年間収入'),
  "disability_type": zod.string().optional().describe('障害に該当するか na: 障害なし, general: 一般の障害者, heavy: 特別障害者'),
  "occupation": zod.string().nullish().describe('職業'),
  "annual_remittance_amount": zod.number().optional().describe('一年間の送金額'),
  "employment_insurance_receive_status": zod.enum(['unselected', 'receiving_employment_insurance', 'not_receiving_employment_insurance', 'pending_employment_insurance']).nullish().describe('雇用保険受給の有無\n- unselected 未選択\n- receiving_employment_insurance 雇用保険受給有り\n- not_receiving_employment_insurance 雇用保険受給無し\n- pending_employment_insurance 申請中'),
  "employment_insurance_receives_from": zod.string().date().regex(updateEmployeeResponseEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp).nullish().describe('雇用保険受給開始年月日 employment_insurance_receive_statusが未選択、無しの場合は指定できません。'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "phone_type": zod.enum(['unselected', 'home', 'office', 'mobile', 'other']).nullish().describe('電話番号の種別\n- unselected 未選択\n- home 自宅\n- office 勤務先\n- mobile 携帯\n- other その他'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "social_insurance_and_tax_dependent": zod.string().optional().describe('扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ'),
  "social_insurance_dependent_acquisition_date": zod.string().date().nullish().describe('社会保険の扶養加入日'),
  "social_insurance_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('社会保険の扶養加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": 未選択, birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "social_insurance_other_dependent_acquisition_reason": zod.string().max(updateEmployeeResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax).nullish().describe('社会保険のその他の扶養加入理由'),
  "social_insurance_dependent_disqualification_date": zod.string().date().nullish().describe('社会保険の扶養喪失日'),
  "social_insurance_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('社会保険の扶養喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "social_insurance_other_dependent_disqualification_reason": zod.string().max(updateEmployeeResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax).nullish().describe('社会保険のその他の扶養喪失理由'),
  "tax_dependent_acquisition_date": zod.string().date().nullish().describe('税扶養の加入日'),
  "tax_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('税扶養の加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "tax_other_dependent_acquisition_reason": zod.string().max(updateEmployeeResponseEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax).nullish().describe('税扶養のその他の加入理由'),
  "tax_dependent_disqualification_date": zod.string().date().nullish().describe('税扶養の喪失日'),
  "tax_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('税扶養の喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "tax_other_dependent_disqualification_reason": zod.string().max(updateEmployeeResponseEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax).nullish().describe('税扶養のその他の喪失理由'),
  "non_resident_dependents_reason": zod.enum(['none', 'over_16_to_under_30_or_over_70', 'study_abroad', 'handicapped', 'over_38_man']).optional().describe('非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払')
})).optional().describe('家族情報'),
  "bank_account_rule": zod.object({
  "id": zod.number().optional().describe('銀行口座ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "bank_name": zod.string().nullish().describe('金融機関名'),
  "bank_name_kana": zod.string().nullish().describe('金融機関名カナ'),
  "bank_code": zod.string().nullish().describe('金融機関コード'),
  "branch_name": zod.string().nullish().describe('支店名'),
  "branch_name_kana": zod.string().nullish().describe('支店名カナ'),
  "branch_code": zod.string().nullish().describe('支店コード'),
  "account_number": zod.string().nullish().describe('口座番号'),
  "account_name": zod.string().nullish().describe('口座名義カナ'),
  "account_type": zod.string().nullish().describe('預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金')
}).nullish(),
  "basic_pay_rule": zod.object({
  "id": zod.number().min(1).max(updateEmployeeResponseEmployeeBasicPayRuleIdMax).optional().describe('従業員の基本給ID'),
  "company_id": zod.number().min(1).max(updateEmployeeResponseEmployeeBasicPayRuleCompanyIdMax).optional().describe('事業所ID'),
  "employee_id": zod.number().min(1).max(updateEmployeeResponseEmployeeBasicPayRuleEmployeeIdMax).optional().describe('従業員ID'),
  "pay_calc_type": zod.enum(['monthly', 'daily', 'hourly']).optional().describe('給与方式 monthly: 月給, daily: 日給, hourly: 時給'),
  "pay_amount": zod.number().min(updateEmployeeResponseEmployeeBasicPayRulePayAmountMin).max(updateEmployeeResponseEmployeeBasicPayRulePayAmountMax).optional().describe('基本給')
}).nullish(),
  "payroll_calculation": zod.boolean().optional().describe('給与計算対象従業員の場合trueを返します'),
  "company_reference_date_rule_name": zod.string().nullish().describe('締め日支払い日グループ名(給与計算対象外従業員の場合、nullを返します)')
}).optional()
})


export const destroyEmployeePathIdMax = 2147483647;


export const destroyEmployeeParams = zod.object({
  "id": zod.number().min(1).max(destroyEmployeePathIdMax).describe('従業員ID')
})

export const destroyEmployeeQueryCompanyIdMax = 2147483647;


export const destroyEmployeeQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyEmployeeQueryCompanyIdMax).describe('事業所ID')
})


export const getEmployeeProfileRulePathEmployeeIdMax = 2147483647;


export const getEmployeeProfileRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeProfileRulePathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeeProfileRuleQueryCompanyIdMax = 2147483647;
export const getEmployeeProfileRuleQueryYearMin = 2000;

export const getEmployeeProfileRuleQueryYearMax = 2100;
export const getEmployeeProfileRuleQueryMonthMax = 12;


export const getEmployeeProfileRuleQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeProfileRuleQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getEmployeeProfileRuleQueryYearMin).max(getEmployeeProfileRuleQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeeProfileRuleQueryMonthMax).describe('従業員情報を取得したい月<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、指定したmonth + 1の値が検索結果として返します。<br>\n翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>')
})

export const getEmployeeProfileRuleResponseEmployeeProfileRulePrefectureCodeMin = -1;

export const getEmployeeProfileRuleResponseEmployeeProfileRulePrefectureCodeMax = 46;
export const getEmployeeProfileRuleResponseEmployeeProfileRuleResidentialPrefectureCodeMin = -1;

export const getEmployeeProfileRuleResponseEmployeeProfileRuleResidentialPrefectureCodeMax = 46;
export const getEmployeeProfileRuleResponseEmployeeProfileRuleEmailMax = 255;
export const getEmployeeProfileRuleResponseEmployeeProfileRuleHouseholderNameMax = 255;


export const getEmployeeProfileRuleResponse = zod.object({
  "employee_profile_rule": zod.object({
  "id": zod.number().optional(),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().optional().describe('姓カナ'),
  "first_name_kana": zod.string().optional().describe('名カナ'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(getEmployeeProfileRuleResponseEmployeeProfileRulePrefectureCodeMin).max(getEmployeeProfileRuleResponseEmployeeProfileRulePrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().optional().describe('住民票住所の市区町村以降の住所カナ'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "residential_zipcode1": zod.string().nullish().describe('現住所の郵便番号１'),
  "residential_zipcode2": zod.string().nullish().describe('現住所の郵便番号２'),
  "residential_prefecture_code": zod.number().min(getEmployeeProfileRuleResponseEmployeeProfileRuleResidentialPrefectureCodeMin).max(getEmployeeProfileRuleResponseEmployeeProfileRuleResidentialPrefectureCodeMax).nullish().describe('現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "residential_address": zod.string().nullish().describe('現住所の住所'),
  "residential_address_kana": zod.string().nullish().describe('現住所の住所カナ'),
  "employment_type": zod.string().nullish().describe('雇用形態 board-member: 役員, regular: 正社員, fixed-term: 契約社員, part-time: アルバイト・パート, temporary: 派遣社員, (空文字列): その他'),
  "title": zod.string().nullish().describe('肩書'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "married": zod.boolean().optional().describe('配偶者の有無'),
  "is_working_student": zod.boolean().optional().describe('勤労学生かどうか'),
  "widow_type": zod.string().optional().describe('寡夫／寡婦かどうか na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親'),
  "disability_type": zod.string().optional().describe('障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者'),
  "email": zod.string().max(getEmployeeProfileRuleResponseEmployeeProfileRuleEmailMax).nullish().describe('メールアドレス'),
  "householder_name": zod.string().max(getEmployeeProfileRuleResponseEmployeeProfileRuleHouseholderNameMax).optional().describe('世帯主の名前 世帯主の続柄がmyselfの場合は空白'),
  "householder": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other']).nullish().describe('世帯主の続柄 myself:本人, husband:夫, wife:妻, father:父, mother:母, child:子供, senior_brother:兄, junior_brother:弟, senior_sister:姉, junior_sister:妹, grandchild:孫, grandfather:祖父, grandmother:祖母, father_in_law:義父, mother_in_law:義母, grandfather_in_law:義祖父, grandmother_in_law:義祖母, other:その他')
}).nullish()
})


export const updateEmployeeProfileRulePathEmployeeIdMax = 2147483647;


export const updateEmployeeProfileRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(updateEmployeeProfileRulePathEmployeeIdMax).describe('従業員ID')
})

export const updateEmployeeProfileRuleBodyCompanyIdMax = 2147483647;
export const updateEmployeeProfileRuleBodyYearMin = 2000;

export const updateEmployeeProfileRuleBodyYearMax = 2100;
export const updateEmployeeProfileRuleBodyMonthMax = 12;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleLastNameMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleFirstNameMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleLastNameKanaMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleFirstNameKanaMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleZipcode1Max = 3;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleZipcode2Max = 4;
export const updateEmployeeProfileRuleBodyEmployeeProfileRulePrefectureCodeMin = -1;

export const updateEmployeeProfileRuleBodyEmployeeProfileRulePrefectureCodeMax = 46;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleAddressMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleAddressKanaMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRulePhone1Max = 5;
export const updateEmployeeProfileRuleBodyEmployeeProfileRulePhone2Max = 4;
export const updateEmployeeProfileRuleBodyEmployeeProfileRulePhone3Max = 4;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialZipcode1Max = 3;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialZipcode2Max = 4;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialPrefectureCodeMin = -1;

export const updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialPrefectureCodeMax = 46;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialAddressMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialAddressKanaMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleTitleMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleEmailMax = 255;
export const updateEmployeeProfileRuleBodyEmployeeProfileRuleHouseholderNameMax = 255;


export const updateEmployeeProfileRuleBody = zod.object({
  "company_id": zod.number().min(1).max(updateEmployeeProfileRuleBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "year": zod.number().min(updateEmployeeProfileRuleBodyYearMin).max(updateEmployeeProfileRuleBodyYearMax).describe('更新対象年（必須）'),
  "month": zod.number().min(1).max(updateEmployeeProfileRuleBodyMonthMax).describe('更新対象月（必須）<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、指定したmonth + 1の値が更新されます。<br>\n翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>'),
  "employee_profile_rule": zod.object({
  "last_name": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleLastNameMax).describe('姓 null不可'),
  "first_name": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleFirstNameMax).describe('名 null不可'),
  "last_name_kana": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleLastNameKanaMax).describe('姓カナ'),
  "first_name_kana": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleFirstNameKanaMax).describe('名カナ'),
  "zipcode1": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleZipcode1Max).optional().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleZipcode2Max).optional().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(updateEmployeeProfileRuleBodyEmployeeProfileRulePrefectureCodeMin).max(updateEmployeeProfileRuleBodyEmployeeProfileRulePrefectureCodeMax).optional().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleAddressMax).optional().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleAddressKanaMax).optional().describe('住民票住所の市区町村以降の住所カナ'),
  "phone1": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRulePhone1Max).optional().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRulePhone2Max).optional().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRulePhone3Max).optional().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "residential_zipcode1": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialZipcode1Max).optional().describe('現住所の郵便番号１'),
  "residential_zipcode2": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialZipcode2Max).optional().describe('現住所の郵便番号２'),
  "residential_prefecture_code": zod.number().min(updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialPrefectureCodeMin).max(updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialPrefectureCodeMax).optional().describe('現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "residential_address": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialAddressMax).optional().describe('現住所の住所'),
  "residential_address_kana": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleResidentialAddressKanaMax).optional().describe('現住所の住所カナ'),
  "employment_type": zod.enum(['board-member', 'regular', 'fixed-term', 'part-time', 'temporary', '']).optional().describe('雇用形態 board-member: 役員, regular: 正社員, fixed-term: 契約社員, part-time: アルバイト・パート, temporary: 派遣社員, (空文字列): その他'),
  "title": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleTitleMax).optional().describe('肩書'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）'),
  "married": zod.boolean().optional().describe('null不可 配偶者の有無'),
  "is_working_student": zod.boolean().optional().describe('null不可 勤労学生かどうか'),
  "widow_type": zod.enum(['na', 'widower', 'widow', 'special_widow', 'one_parent']).optional().describe('寡夫／寡婦かどうか null不可 na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親'),
  "disability_type": zod.enum(['na', 'general', 'heavy']).optional().describe('障害者かどうか null不可 na: 空白, general: 障害者, heavy: 特別障害者'),
  "email": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleEmailMax).nullish().describe('メールアドレス'),
  "householder_name": zod.string().max(updateEmployeeProfileRuleBodyEmployeeProfileRuleHouseholderNameMax).optional().describe('世帯主の名前<br>世帯主の続柄に myself:本人 を指定している場合は、世帯主の名前は自動で従業員名で更新するため指定できません。'),
  "householder": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other']).optional().describe('世帯主の続柄 myself:本人, husband:夫, wife:妻, father:父, mother:母, child:子供, senior_brother:兄, junior_brother:弟, senior_sister:姉, junior_sister:妹, grandchild:孫, grandfather:祖父, grandmother:祖母, father_in_law:義父, mother_in_law:義母, grandfather_in_law:義祖父, grandmother_in_law:義祖母, other:その他')
})
})

export const updateEmployeeProfileRuleResponseEmployeeProfileRulePrefectureCodeMin = -1;

export const updateEmployeeProfileRuleResponseEmployeeProfileRulePrefectureCodeMax = 46;
export const updateEmployeeProfileRuleResponseEmployeeProfileRuleResidentialPrefectureCodeMin = -1;

export const updateEmployeeProfileRuleResponseEmployeeProfileRuleResidentialPrefectureCodeMax = 46;
export const updateEmployeeProfileRuleResponseEmployeeProfileRuleEmailMax = 255;
export const updateEmployeeProfileRuleResponseEmployeeProfileRuleHouseholderNameMax = 255;


export const updateEmployeeProfileRuleResponse = zod.object({
  "employee_profile_rule": zod.object({
  "id": zod.number().optional(),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().optional().describe('姓カナ'),
  "first_name_kana": zod.string().optional().describe('名カナ'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(updateEmployeeProfileRuleResponseEmployeeProfileRulePrefectureCodeMin).max(updateEmployeeProfileRuleResponseEmployeeProfileRulePrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().optional().describe('住民票住所の市区町村以降の住所カナ'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "residential_zipcode1": zod.string().nullish().describe('現住所の郵便番号１'),
  "residential_zipcode2": zod.string().nullish().describe('現住所の郵便番号２'),
  "residential_prefecture_code": zod.number().min(updateEmployeeProfileRuleResponseEmployeeProfileRuleResidentialPrefectureCodeMin).max(updateEmployeeProfileRuleResponseEmployeeProfileRuleResidentialPrefectureCodeMax).nullish().describe('現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "residential_address": zod.string().nullish().describe('現住所の住所'),
  "residential_address_kana": zod.string().nullish().describe('現住所の住所カナ'),
  "employment_type": zod.string().nullish().describe('雇用形態 board-member: 役員, regular: 正社員, fixed-term: 契約社員, part-time: アルバイト・パート, temporary: 派遣社員, (空文字列): その他'),
  "title": zod.string().nullish().describe('肩書'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "married": zod.boolean().optional().describe('配偶者の有無'),
  "is_working_student": zod.boolean().optional().describe('勤労学生かどうか'),
  "widow_type": zod.string().optional().describe('寡夫／寡婦かどうか na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親'),
  "disability_type": zod.string().optional().describe('障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者'),
  "email": zod.string().max(updateEmployeeProfileRuleResponseEmployeeProfileRuleEmailMax).nullish().describe('メールアドレス'),
  "householder_name": zod.string().max(updateEmployeeProfileRuleResponseEmployeeProfileRuleHouseholderNameMax).optional().describe('世帯主の名前 世帯主の続柄がmyselfの場合は空白'),
  "householder": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other']).nullish().describe('世帯主の続柄 myself:本人, husband:夫, wife:妻, father:父, mother:母, child:子供, senior_brother:兄, junior_brother:弟, senior_sister:姉, junior_sister:妹, grandchild:孫, grandfather:祖父, grandmother:祖母, father_in_law:義父, mother_in_law:義母, grandfather_in_law:義祖父, grandmother_in_law:義祖母, other:その他')
}).nullish()
})


export const getEmployeeHealthInsuranceRulePathEmployeeIdMax = 2147483647;


export const getEmployeeHealthInsuranceRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeHealthInsuranceRulePathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeeHealthInsuranceRuleQueryCompanyIdMax = 2147483647;
export const getEmployeeHealthInsuranceRuleQueryYearMin = 2000;

export const getEmployeeHealthInsuranceRuleQueryYearMax = 2100;
export const getEmployeeHealthInsuranceRuleQueryMonthMax = 12;


export const getEmployeeHealthInsuranceRuleQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeHealthInsuranceRuleQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getEmployeeHealthInsuranceRuleQueryYearMin).max(getEmployeeHealthInsuranceRuleQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeeHealthInsuranceRuleQueryMonthMax).describe('従業員情報を取得したい月<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>\n翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>')
})

export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin = -999999999;

export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax = 999999999;
export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin = -999999999;

export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax = 999999999;
export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax = 999999999.9999;


export const getEmployeeHealthInsuranceRuleResponse = zod.object({
  "employee_health_insurance_rule": zod.object({
  "id": zod.number().optional().describe('健康保険ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('健康保険に加入しているかどうか'),
  "health_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の健康保険料の計算方法'),
  "health_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の健康保険料の計算方法'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "manual_health_insurance_amount_of_employee_salary": zod.number().min(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin).max(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_employee_bonus": zod.number().min(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin).max(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_company_salary": zod.number().min(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin).max(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（会社負担分）'),
  "manual_health_insurance_amount_of_company_bonus": zod.number().min(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin).max(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（会社負担分）'),
  "care_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の介護保険料の計算方法'),
  "care_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の介護保険料の計算方法'),
  "manual_care_insurance_amount_of_employee_salary": zod.number().min(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin).max(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_employee_bonus": zod.number().min(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin).max(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_company_salary": zod.number().min(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin).max(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（会社負担分）'),
  "manual_care_insurance_amount_of_company_bonus": zod.number().min(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin).max(getEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（会社負担分）'),
  "reference_num": zod.string().nullish().describe('健康保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額')
}).nullish()
})


export const updateEmployeeHealthInsuranceRulePathEmployeeIdMax = 2147483647;


export const updateEmployeeHealthInsuranceRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(updateEmployeeHealthInsuranceRulePathEmployeeIdMax).describe('従業員ID')
})

export const updateEmployeeHealthInsuranceRuleBodyCompanyIdMax = 2147483647;
export const updateEmployeeHealthInsuranceRuleBodyYearMin = 2000;

export const updateEmployeeHealthInsuranceRuleBodyYearMax = 2100;
export const updateEmployeeHealthInsuranceRuleBodyMonthMax = 12;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin = -999999999;

export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax = 999999999;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin = -999999999;

export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax = 999999999;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleReferenceNumMax = 255;
export const updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleStandardMonthlyRemunerationMax = 2147483647;


export const updateEmployeeHealthInsuranceRuleBody = zod.object({
  "company_id": zod.number().min(1).max(updateEmployeeHealthInsuranceRuleBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "year": zod.number().min(updateEmployeeHealthInsuranceRuleBodyYearMin).max(updateEmployeeHealthInsuranceRuleBodyYearMax).describe('更新対象年（必須）'),
  "month": zod.number().min(1).max(updateEmployeeHealthInsuranceRuleBodyMonthMax).describe('更新対象月（必須）<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。<br>\n翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>'),
  "employee_health_insurance_rule": zod.object({
  "entried": zod.boolean().optional().describe('健康保険に加入しているかどうか null不可'),
  "health_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の健康保険料の計算方法'),
  "health_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の健康保険料の計算方法'),
  "manual_health_insurance_amount_of_employee_salary": zod.number().min(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin).max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_employee_bonus": zod.number().min(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin).max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_company_salary": zod.number().min(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin).max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（会社負担分）'),
  "manual_health_insurance_amount_of_company_bonus": zod.number().min(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin).max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（会社負担分）'),
  "care_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の介護保険料の計算方法'),
  "care_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の介護保険料の計算方法'),
  "manual_care_insurance_amount_of_employee_salary": zod.number().min(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin).max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_employee_bonus": zod.number().min(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin).max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_company_salary": zod.number().min(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin).max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（会社負担分）'),
  "manual_care_insurance_amount_of_company_bonus": zod.number().min(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin).max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（会社負担分）'),
  "reference_num": zod.string().max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleReferenceNumMax).optional().describe('健康保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().min(1).max(updateEmployeeHealthInsuranceRuleBodyEmployeeHealthInsuranceRuleStandardMonthlyRemunerationMax).describe('標準報酬月額 null不可'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか')
})
})

export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin = -999999999;

export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax = 999999999;
export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin = -999999999;

export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax = 999999999;
export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax = 999999999.9999;


export const updateEmployeeHealthInsuranceRuleResponse = zod.object({
  "employee_health_insurance_rule": zod.object({
  "id": zod.number().optional().describe('健康保険ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('健康保険に加入しているかどうか'),
  "health_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の健康保険料の計算方法'),
  "health_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の健康保険料の計算方法'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "manual_health_insurance_amount_of_employee_salary": zod.number().min(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMin).max(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_employee_bonus": zod.number().min(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMin).max(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（従業員負担分）'),
  "manual_health_insurance_amount_of_company_salary": zod.number().min(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMin).max(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の健康保険料の直接指定金額（会社負担分）'),
  "manual_health_insurance_amount_of_company_bonus": zod.number().min(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMin).max(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualHealthInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の健康保険料の直接指定金額（会社負担分）'),
  "care_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の介護保険料の計算方法'),
  "care_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の介護保険料の計算方法'),
  "manual_care_insurance_amount_of_employee_salary": zod.number().min(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMin).max(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_employee_bonus": zod.number().min(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMin).max(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（従業員負担分）'),
  "manual_care_insurance_amount_of_company_salary": zod.number().min(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMin).max(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の介護保険料の直接指定金額（会社負担分）'),
  "manual_care_insurance_amount_of_company_bonus": zod.number().min(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMin).max(updateEmployeeHealthInsuranceRuleResponseEmployeeHealthInsuranceRuleManualCareInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の介護保険料の直接指定金額（会社負担分）'),
  "reference_num": zod.string().nullish().describe('健康保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額')
}).nullish()
})


export const getEmployeeWelfarePensionInsuranceRulePathEmployeeIdMax = 2147483647;


export const getEmployeeWelfarePensionInsuranceRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeWelfarePensionInsuranceRulePathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeeWelfarePensionInsuranceRuleQueryCompanyIdMax = 2147483647;
export const getEmployeeWelfarePensionInsuranceRuleQueryYearMin = 2000;

export const getEmployeeWelfarePensionInsuranceRuleQueryYearMax = 2100;
export const getEmployeeWelfarePensionInsuranceRuleQueryMonthMax = 12;


export const getEmployeeWelfarePensionInsuranceRuleQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeWelfarePensionInsuranceRuleQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getEmployeeWelfarePensionInsuranceRuleQueryYearMin).max(getEmployeeWelfarePensionInsuranceRuleQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeeWelfarePensionInsuranceRuleQueryMonthMax).describe('従業員情報を取得したい月<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>\n翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>')
})

export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin = -999999999.9999;

export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax = 999999999.9999;
export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin = -999999999.9999;

export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax = 999999999.9999;
export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin = -999999999;

export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax = 999999999;
export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax = 999999999;


export const getEmployeeWelfarePensionInsuranceRuleResponse = zod.object({
  "employee_welfare_pension_insurance_rule": zod.object({
  "id": zod.number().optional(),
  "child_allowance_contribution_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の子ども・子育て拠出金の計算方法'),
  "child_allowance_contribution_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の子ども・子育て拠出金の計算方法'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('厚生年金保険に加入しているかどうか'),
  "manual_child_allowance_contribution_amount_bonus": zod.number().min(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin).max(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax).nullish().describe('賞与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_child_allowance_contribution_amount_salary": zod.number().min(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin).max(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax).nullish().describe('給与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_welfare_pension_insurance_amount_of_company_bonus": zod.number().min(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin).max(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_company_salary": zod.number().min(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin).max(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_bonus": zod.number().min(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin).max(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_salary": zod.number().min(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin).max(getEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "reference_num": zod.string().nullish().describe('厚生年金保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額'),
  "welfare_pension_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の厚生年金保険料の計算方法'),
  "welfare_pension_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の厚生年金保険料の計算方法')
}).nullish()
})


export const updateEmployeeWelfarePensionInsuranceRulePathEmployeeIdMax = 2147483647;


export const updateEmployeeWelfarePensionInsuranceRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(updateEmployeeWelfarePensionInsuranceRulePathEmployeeIdMax).describe('従業員ID')
})

export const updateEmployeeWelfarePensionInsuranceRuleBodyCompanyIdMax = 2147483647;
export const updateEmployeeWelfarePensionInsuranceRuleBodyYearMin = 2000;

export const updateEmployeeWelfarePensionInsuranceRuleBodyYearMax = 2100;
export const updateEmployeeWelfarePensionInsuranceRuleBodyMonthMax = 12;
export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax = 999999999;
export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin = -999999999;

export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax = 999999999;
export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin = -999999999.9999;

export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax = 999999999.9999;
export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin = -999999999.9999;

export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax = 999999999.9999;
export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleReferenceNumMax = 255;
export const updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleStandardMonthlyRemunerationMax = 2147483647;


export const updateEmployeeWelfarePensionInsuranceRuleBody = zod.object({
  "company_id": zod.number().min(1).max(updateEmployeeWelfarePensionInsuranceRuleBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "year": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleBodyYearMin).max(updateEmployeeWelfarePensionInsuranceRuleBodyYearMax).describe('更新対象年（必須）'),
  "month": zod.number().min(1).max(updateEmployeeWelfarePensionInsuranceRuleBodyMonthMax).describe('更新対象月（必須）<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。<br>\n翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>'),
  "employee_welfare_pension_insurance_rule": zod.object({
  "entried": zod.boolean().optional().describe('厚生年金保険に加入しているかどうか null不可'),
  "welfare_pension_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の厚生年金保険料の計算方法'),
  "welfare_pension_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の厚生年金保険料の計算方法'),
  "manual_welfare_pension_insurance_amount_of_employee_salary": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin).max(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_bonus": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin).max(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "manual_welfare_pension_insurance_amount_of_company_salary": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin).max(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_company_bonus": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin).max(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "child_allowance_contribution_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の子ども・子育て拠出金の計算方法'),
  "child_allowance_contribution_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の子ども・子育て拠出金の計算方法'),
  "manual_child_allowance_contribution_amount_salary": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin).max(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax).nullish().describe('給与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_child_allowance_contribution_amount_bonus": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin).max(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax).nullish().describe('賞与計算時の子ども・子育て拠出金の直接指定金額'),
  "reference_num": zod.string().max(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleReferenceNumMax).optional().describe('厚生年金保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().min(1).max(updateEmployeeWelfarePensionInsuranceRuleBodyEmployeeWelfarePensionInsuranceRuleStandardMonthlyRemunerationMax).describe('標準報酬月額 null不可')
})
})

export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin = -999999999.9999;

export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax = 999999999.9999;
export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin = -999999999.9999;

export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax = 999999999.9999;
export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin = -999999999.9999;

export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax = 999999999.9999;
export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin = -999999999.9999;

export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax = 999999999.9999;
export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin = -999999999;

export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax = 999999999;
export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin = -999999999;

export const updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax = 999999999;


export const updateEmployeeWelfarePensionInsuranceRuleResponse = zod.object({
  "employee_welfare_pension_insurance_rule": zod.object({
  "id": zod.number().optional(),
  "child_allowance_contribution_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の子ども・子育て拠出金の計算方法'),
  "child_allowance_contribution_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の子ども・子育て拠出金の計算方法'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "entried": zod.boolean().optional().describe('厚生年金保険に加入しているかどうか'),
  "manual_child_allowance_contribution_amount_bonus": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMin).max(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountBonusMax).nullish().describe('賞与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_child_allowance_contribution_amount_salary": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMin).max(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualChildAllowanceContributionAmountSalaryMax).nullish().describe('給与計算時の子ども・子育て拠出金の直接指定金額'),
  "manual_welfare_pension_insurance_amount_of_company_bonus": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMin).max(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanyBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_company_salary": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMin).max(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfCompanySalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（会社負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_bonus": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMin).max(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeBonusMax).nullish().describe('賞与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "manual_welfare_pension_insurance_amount_of_employee_salary": zod.number().min(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMin).max(updateEmployeeWelfarePensionInsuranceRuleResponseEmployeeWelfarePensionInsuranceRuleManualWelfarePensionInsuranceAmountOfEmployeeSalaryMax).nullish().describe('給与計算時の厚生年金保険料の直接指定金額（従業員負担分）'),
  "reference_num": zod.string().nullish().describe('厚生年金保険の被保険者整理番号'),
  "standard_monthly_remuneration": zod.number().optional().describe('標準報酬月額'),
  "welfare_pension_insurance_bonus_calc_type": zod.enum(['auto', 'manual']).optional().describe('賞与計算時の厚生年金保険料の計算方法'),
  "welfare_pension_insurance_salary_calc_type": zod.enum(['auto', 'manual']).optional().describe('給与計算時の厚生年金保険料の計算方法')
}).nullish()
})


export const getEmployeeDependentRulesPathEmployeeIdMax = 2147483647;


export const getEmployeeDependentRulesParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeDependentRulesPathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeeDependentRulesQueryCompanyIdMax = 2147483647;
export const getEmployeeDependentRulesQueryYearMin = 2000;

export const getEmployeeDependentRulesQueryYearMax = 2100;
export const getEmployeeDependentRulesQueryMonthMax = 12;


export const getEmployeeDependentRulesQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeDependentRulesQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getEmployeeDependentRulesQueryYearMin).max(getEmployeeDependentRulesQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeeDependentRulesQueryMonthMax).describe('従業員情報を取得したい月<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>\n翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>')
})

export const getEmployeeDependentRulesResponseEmployeeDependentRulesItemPrefectureCodeMin = -1;

export const getEmployeeDependentRulesResponseEmployeeDependentRulesItemPrefectureCodeMax = 46;
export const getEmployeeDependentRulesResponseEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getEmployeeDependentRulesResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax = 255;
export const getEmployeeDependentRulesResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax = 255;
export const getEmployeeDependentRulesResponseEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax = 255;
export const getEmployeeDependentRulesResponseEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax = 255;


export const getEmployeeDependentRulesResponse = zod.object({
  "employee_dependent_rules": zod.array(zod.object({
  "id": zod.number().optional().describe('家族情報ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().nullish().describe('姓カナ'),
  "first_name_kana": zod.string().nullish().describe('名カナ'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "relationship": zod.string().optional().describe('続柄 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "residence_type": zod.string().optional().describe('同居・別居 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(getEmployeeDependentRulesResponseEmployeeDependentRulesItemPrefectureCodeMin).max(getEmployeeDependentRulesResponseEmployeeDependentRulesItemPrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().nullish().describe('住民票住所の市区町村以降の住所カナ'),
  "base_pension_num": zod.string().nullish().describe('基礎年金番号'),
  "income": zod.number().optional().describe('年間所得'),
  "annual_revenue": zod.number().optional().describe('年間収入'),
  "disability_type": zod.string().optional().describe('障害に該当するか na: 障害なし, general: 一般の障害者, heavy: 特別障害者'),
  "occupation": zod.string().nullish().describe('職業'),
  "annual_remittance_amount": zod.number().optional().describe('一年間の送金額'),
  "employment_insurance_receive_status": zod.enum(['unselected', 'receiving_employment_insurance', 'not_receiving_employment_insurance', 'pending_employment_insurance']).nullish().describe('雇用保険受給の有無\n- unselected 未選択\n- receiving_employment_insurance 雇用保険受給有り\n- not_receiving_employment_insurance 雇用保険受給無し\n- pending_employment_insurance 申請中'),
  "employment_insurance_receives_from": zod.string().date().regex(getEmployeeDependentRulesResponseEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp).nullish().describe('雇用保険受給開始年月日 employment_insurance_receive_statusが未選択、無しの場合は指定できません。'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "phone_type": zod.enum(['unselected', 'home', 'office', 'mobile', 'other']).nullish().describe('電話番号の種別\n- unselected 未選択\n- home 自宅\n- office 勤務先\n- mobile 携帯\n- other その他'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "social_insurance_and_tax_dependent": zod.string().optional().describe('扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ'),
  "social_insurance_dependent_acquisition_date": zod.string().date().nullish().describe('社会保険の扶養加入日'),
  "social_insurance_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('社会保険の扶養加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": 未選択, birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "social_insurance_other_dependent_acquisition_reason": zod.string().max(getEmployeeDependentRulesResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax).nullish().describe('社会保険のその他の扶養加入理由'),
  "social_insurance_dependent_disqualification_date": zod.string().date().nullish().describe('社会保険の扶養喪失日'),
  "social_insurance_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('社会保険の扶養喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "social_insurance_other_dependent_disqualification_reason": zod.string().max(getEmployeeDependentRulesResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax).nullish().describe('社会保険のその他の扶養喪失理由'),
  "tax_dependent_acquisition_date": zod.string().date().nullish().describe('税扶養の加入日'),
  "tax_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('税扶養の加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "tax_other_dependent_acquisition_reason": zod.string().max(getEmployeeDependentRulesResponseEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax).nullish().describe('税扶養のその他の加入理由'),
  "tax_dependent_disqualification_date": zod.string().date().nullish().describe('税扶養の喪失日'),
  "tax_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('税扶養の喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "tax_other_dependent_disqualification_reason": zod.string().max(getEmployeeDependentRulesResponseEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax).nullish().describe('税扶養のその他の喪失理由'),
  "non_resident_dependents_reason": zod.enum(['none', 'over_16_to_under_30_or_over_70', 'study_abroad', 'handicapped', 'over_38_man']).optional().describe('非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払')
})).optional()
})


export const bulkUpdateEmployeeDependentRulesPathEmployeeIdMax = 2147483647;


export const bulkUpdateEmployeeDependentRulesParams = zod.object({
  "employee_id": zod.number().min(1).max(bulkUpdateEmployeeDependentRulesPathEmployeeIdMax).describe('従業員ID')
})

export const bulkUpdateEmployeeDependentRulesBodyCompanyIdMax = 2147483647;
export const bulkUpdateEmployeeDependentRulesBodyYearMin = 2000;

export const bulkUpdateEmployeeDependentRulesBodyYearMax = 2100;
export const bulkUpdateEmployeeDependentRulesBodyMonthMax = 12;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemIdMax = 2147483647;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemLastNameMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemFirstNameMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemLastNameKanaMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemFirstNameKanaMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemBirthDateMax = 10;

export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemBirthDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemZipcode1Max = 3;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemZipcode2Max = 4;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPrefectureCodeMin = -1;

export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPrefectureCodeMax = 46;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAddressMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAddressKanaMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemBasePensionNumMax = 10;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemIncomeMin = 0;

export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemIncomeMax = 999999999;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAnnualRevenueMin = 0;

export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAnnualRevenueMax = 999999999;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemOccupationMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAnnualRemittanceAmountMin = 0;

export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAnnualRemittanceAmountMax = 999999999;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPhone1Max = 4;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPhone2Max = 4;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPhone3Max = 4;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax = 255;
export const bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax = 255;


export const bulkUpdateEmployeeDependentRulesBody = zod.object({
  "company_id": zod.number().min(1).max(bulkUpdateEmployeeDependentRulesBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "year": zod.number().min(bulkUpdateEmployeeDependentRulesBodyYearMin).max(bulkUpdateEmployeeDependentRulesBodyYearMax).describe('更新対象年（必須）'),
  "month": zod.number().min(1).max(bulkUpdateEmployeeDependentRulesBodyMonthMax).describe('更新対象月（必須）<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。<br>\n翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>'),
  "employee_dependent_rules": zod.array(zod.object({
  "id": zod.number().min(1).max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemIdMax).optional().describe('家族情報ルールID（idがない場合は新規作成になる)'),
  "last_name": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemLastNameMax).describe('姓 null不可'),
  "first_name": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemFirstNameMax).describe('名 null不可'),
  "last_name_kana": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemLastNameKanaMax).optional().describe('姓カナ'),
  "first_name_kana": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemFirstNameKanaMax).optional().describe('名カナ'),
  "gender": zod.enum(['unselected', 'male', 'female']).describe('性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）'),
  "relationship": zod.enum(['spouse', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other', 'great_grandfather', 'great_grandmother', 'spouses_child']).describe('続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子'),
  "birth_date": zod.string().date().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemBirthDateMax).regex(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemBirthDateRegExp).describe('生年月日 null不可'),
  "residence_type": zod.enum(['live_in', 'resident', 'non_resident']).describe('同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)'),
  "zipcode1": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemZipcode1Max).optional().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemZipcode2Max).optional().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPrefectureCodeMin).max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPrefectureCodeMax).optional().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAddressMax).optional().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAddressKanaMax).optional().describe('住民票住所の市区町村以降の住所カナ'),
  "base_pension_num": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemBasePensionNumMax).optional().describe('基礎年金番号'),
  "income": zod.number().min(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemIncomeMin).max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemIncomeMax).describe('年間所得 null不可'),
  "annual_revenue": zod.number().min(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAnnualRevenueMin).max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAnnualRevenueMax).describe('年間収入 null不可'),
  "disability_type": zod.enum(['na', 'general', 'heavy']).describe('障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者'),
  "occupation": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemOccupationMax).optional().describe('職業'),
  "annual_remittance_amount": zod.number().min(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAnnualRemittanceAmountMin).max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemAnnualRemittanceAmountMax).optional().describe('一年間の送金額'),
  "employment_insurance_receive_status": zod.enum(['unselected', 'receiving_employment_insurance', 'not_receiving_employment_insurance', 'pending_employment_insurance']).nullish().describe('雇用保険受給の有無\n- unselected 未選択\n- receiving_employment_insurance 雇用保険受給有り\n- not_receiving_employment_insurance 雇用保険受給無し\n- pending_employment_insurance 申請中'),
  "employment_insurance_receives_from": zod.string().date().regex(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp).nullish().describe('雇用保険受給開始年月日 employment_insurance_receive_statusが未選択、無しの場合は指定できません。'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "phone_type": zod.enum(['unselected', 'home', 'office', 'mobile', 'other']).nullish().describe('電話番号の種別\n- unselected 未選択\n- home 自宅\n- office 勤務先\n- mobile 携帯\n- other その他'),
  "phone1": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPhone1Max).nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPhone2Max).nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemPhone3Max).nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "destroy": zod.boolean().optional().describe('家族情報を削除するか'),
  "social_insurance_and_tax_dependent": zod.enum(['social_insurance_and_tax', 'tax_only', 'social_insurance_only', 'not_dependent']).describe('扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない'),
  "social_insurance_dependent_acquisition_date": zod.string().date().nullish().describe('社会保険の扶養加入日'),
  "social_insurance_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('社会保険の扶養加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": 未選択, birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "social_insurance_other_dependent_acquisition_reason": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax).nullish().describe('社会保険のその他の扶養加入理由'),
  "social_insurance_dependent_disqualification_date": zod.string().date().nullish().describe('社会保険の扶養喪失日'),
  "social_insurance_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('社会保険の扶養喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "social_insurance_other_dependent_disqualification_reason": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax).nullish().describe('社会保険のその他の扶養喪失理由'),
  "tax_dependent_acquisition_date": zod.string().date().nullish().describe('税扶養の加入日'),
  "tax_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('税扶養の加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "tax_other_dependent_acquisition_reason": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax).nullish().describe('税扶養のその他の加入理由'),
  "tax_dependent_disqualification_date": zod.string().date().nullish().describe('税扶養の喪失日'),
  "tax_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('税扶養の喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "tax_other_dependent_disqualification_reason": zod.string().max(bulkUpdateEmployeeDependentRulesBodyEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax).nullish().describe('税扶養のその他の喪失理由'),
  "non_resident_dependents_reason": zod.enum(['none', 'over_16_to_under_30_or_over_70', 'study_abroad', 'handicapped', 'over_38_man']).optional().describe('非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払')
})).describe('家族情報ルール')
})

export const bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemPrefectureCodeMin = -1;

export const bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemPrefectureCodeMax = 46;
export const bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax = 255;
export const bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax = 255;
export const bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax = 255;
export const bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax = 255;


export const bulkUpdateEmployeeDependentRulesResponse = zod.object({
  "employee_dependent_rules": zod.array(zod.object({
  "id": zod.number().optional().describe('家族情報ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "last_name": zod.string().optional().describe('姓'),
  "first_name": zod.string().optional().describe('名'),
  "last_name_kana": zod.string().nullish().describe('姓カナ'),
  "first_name_kana": zod.string().nullish().describe('名カナ'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "relationship": zod.string().optional().describe('続柄 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "residence_type": zod.string().optional().describe('同居・別居 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)'),
  "zipcode1": zod.string().nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemPrefectureCodeMin).max(bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemPrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().nullish().describe('住民票住所の市区町村以降の住所カナ'),
  "base_pension_num": zod.string().nullish().describe('基礎年金番号'),
  "income": zod.number().optional().describe('年間所得'),
  "annual_revenue": zod.number().optional().describe('年間収入'),
  "disability_type": zod.string().optional().describe('障害に該当するか na: 障害なし, general: 一般の障害者, heavy: 特別障害者'),
  "occupation": zod.string().nullish().describe('職業'),
  "annual_remittance_amount": zod.number().optional().describe('一年間の送金額'),
  "employment_insurance_receive_status": zod.enum(['unselected', 'receiving_employment_insurance', 'not_receiving_employment_insurance', 'pending_employment_insurance']).nullish().describe('雇用保険受給の有無\n- unselected 未選択\n- receiving_employment_insurance 雇用保険受給有り\n- not_receiving_employment_insurance 雇用保険受給無し\n- pending_employment_insurance 申請中'),
  "employment_insurance_receives_from": zod.string().date().regex(bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemEmploymentInsuranceReceivesFromRegExp).nullish().describe('雇用保険受給開始年月日 employment_insurance_receive_statusが未選択、無しの場合は指定できません。'),
  "health_insurance_qualification_required": zod.boolean().optional().describe('健康保険の資格確認書の発行が必要かどうか'),
  "phone_type": zod.enum(['unselected', 'home', 'office', 'mobile', 'other']).nullish().describe('電話番号の種別\n- unselected 未選択\n- home 自宅\n- office 勤務先\n- mobile 携帯\n- other その他'),
  "phone1": zod.string().nullish().describe('電話番号1（先頭番号、例:03-1111-222x の03部分）'),
  "phone2": zod.string().nullish().describe('電話番号2（中間番号、例:03-1111-222x の1111部分）'),
  "phone3": zod.string().nullish().describe('電話番号3（末尾番号、例:03-1111-222x の222x部分）'),
  "social_insurance_and_tax_dependent": zod.string().optional().describe('扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ'),
  "social_insurance_dependent_acquisition_date": zod.string().date().nullish().describe('社会保険の扶養加入日'),
  "social_insurance_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('社会保険の扶養加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": 未選択, birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "social_insurance_other_dependent_acquisition_reason": zod.string().max(bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentAcquisitionReasonMax).nullish().describe('社会保険のその他の扶養加入理由'),
  "social_insurance_dependent_disqualification_date": zod.string().date().nullish().describe('社会保険の扶養喪失日'),
  "social_insurance_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('社会保険の扶養喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "social_insurance_other_dependent_disqualification_reason": zod.string().max(bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemSocialInsuranceOtherDependentDisqualificationReasonMax).nullish().describe('社会保険のその他の扶養喪失理由'),
  "tax_dependent_acquisition_date": zod.string().date().nullish().describe('税扶養の加入日'),
  "tax_dependent_acquisition_reason": zod.enum(['', 'start_working', 'marriage', 'turnover', 'decrease_in_income', 'other', 'birth', 'live_in']).optional().describe('税扶養の加入理由 配偶者の場合 \"\": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 \"\": birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他'),
  "tax_other_dependent_acquisition_reason": zod.string().max(bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemTaxOtherDependentAcquisitionReasonMax).nullish().describe('税扶養のその他の加入理由'),
  "tax_dependent_disqualification_date": zod.string().date().nullish().describe('税扶養の喪失日'),
  "tax_dependent_disqualification_reason": zod.enum(['', 'death', 'divorce', 'start_working_or_increase_in_income', 'reach_75_years_old', 'disability', 'other', 'start_working', 'increase_in_income']).optional().describe('税扶養の喪失理由 配偶者の場合 \"\": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 \"\": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他'),
  "tax_other_dependent_disqualification_reason": zod.string().max(bulkUpdateEmployeeDependentRulesResponseEmployeeDependentRulesItemTaxOtherDependentDisqualificationReasonMax).nullish().describe('税扶養のその他の喪失理由'),
  "non_resident_dependents_reason": zod.enum(['none', 'over_16_to_under_30_or_over_70', 'study_abroad', 'handicapped', 'over_38_man']).optional().describe('非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払')
})).optional().describe('家族情報ルール')
})


export const getEmployeeBankAccountRulePathEmployeeIdMax = 2147483647;


export const getEmployeeBankAccountRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeBankAccountRulePathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeeBankAccountRuleQueryCompanyIdMax = 2147483647;
export const getEmployeeBankAccountRuleQueryYearMin = 2000;

export const getEmployeeBankAccountRuleQueryYearMax = 2100;
export const getEmployeeBankAccountRuleQueryMonthMax = 12;


export const getEmployeeBankAccountRuleQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeBankAccountRuleQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getEmployeeBankAccountRuleQueryYearMin).max(getEmployeeBankAccountRuleQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeeBankAccountRuleQueryMonthMax).describe('従業員情報を取得したい月<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>\n翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>')
})

export const getEmployeeBankAccountRuleResponse = zod.object({
  "employee_bank_account_rule": zod.object({
  "id": zod.number().optional().describe('銀行口座ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "bank_name": zod.string().nullish().describe('金融機関名'),
  "bank_name_kana": zod.string().nullish().describe('金融機関名カナ'),
  "bank_code": zod.string().nullish().describe('金融機関コード'),
  "branch_name": zod.string().nullish().describe('支店名'),
  "branch_name_kana": zod.string().nullish().describe('支店名カナ'),
  "branch_code": zod.string().nullish().describe('支店コード'),
  "account_number": zod.string().nullish().describe('口座番号'),
  "account_name": zod.string().nullish().describe('口座名義カナ'),
  "account_type": zod.string().nullish().describe('預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金')
}).nullish()
})


export const updateEmployeeBankAccountRulePathEmployeeIdMax = 2147483647;


export const updateEmployeeBankAccountRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(updateEmployeeBankAccountRulePathEmployeeIdMax).describe('従業員ID')
})

export const updateEmployeeBankAccountRuleBodyCompanyIdMax = 2147483647;
export const updateEmployeeBankAccountRuleBodyYearMin = 2000;

export const updateEmployeeBankAccountRuleBodyYearMax = 2100;
export const updateEmployeeBankAccountRuleBodyMonthMax = 12;
export const updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBankNameMax = 255;
export const updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBankNameKanaMax = 255;
export const updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBankCodeMax = 4;
export const updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBranchNameMax = 255;
export const updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBranchNameKanaMax = 255;
export const updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBranchCodeMax = 3;
export const updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleAccountNumberMax = 7;
export const updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleAccountNameMax = 50;


export const updateEmployeeBankAccountRuleBody = zod.object({
  "company_id": zod.number().min(1).max(updateEmployeeBankAccountRuleBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "year": zod.number().min(updateEmployeeBankAccountRuleBodyYearMin).max(updateEmployeeBankAccountRuleBodyYearMax).describe('更新対象年（必須）'),
  "month": zod.number().min(1).max(updateEmployeeBankAccountRuleBodyMonthMax).describe('更新対象月（必須）<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。<br>\n翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>'),
  "employee_bank_account_rule": zod.object({
  "bank_name": zod.string().max(updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBankNameMax).optional().describe('金融機関名'),
  "bank_name_kana": zod.string().max(updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBankNameKanaMax).optional().describe('金融機関名カナ 英字カナのみ'),
  "bank_code": zod.string().max(updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBankCodeMax).optional().describe('金融機関コード 数値文字列4桁'),
  "branch_name": zod.string().max(updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBranchNameMax).optional().describe('支店名'),
  "branch_name_kana": zod.string().max(updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBranchNameKanaMax).optional().describe('支店名カナ　英字カナのみ'),
  "branch_code": zod.string().max(updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleBranchCodeMax).optional().describe('支店コード 数値文字列3桁'),
  "account_number": zod.string().max(updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleAccountNumberMax).optional().describe('口座番号 数値文字列7桁'),
  "account_name": zod.string().max(updateEmployeeBankAccountRuleBodyEmployeeBankAccountRuleAccountNameMax).optional().describe('口座名義カナ　英字カナのみ'),
  "account_type": zod.enum(['ordinary', 'current', 'saving']).optional().describe('預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金')
})
})

export const updateEmployeeBankAccountRuleResponse = zod.object({
  "employee_bank_account_rule": zod.object({
  "id": zod.number().optional().describe('銀行口座ルールID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "bank_name": zod.string().nullish().describe('金融機関名'),
  "bank_name_kana": zod.string().nullish().describe('金融機関名カナ'),
  "bank_code": zod.string().nullish().describe('金融機関コード'),
  "branch_name": zod.string().nullish().describe('支店名'),
  "branch_name_kana": zod.string().nullish().describe('支店名カナ'),
  "branch_code": zod.string().nullish().describe('支店コード'),
  "account_number": zod.string().nullish().describe('口座番号'),
  "account_name": zod.string().nullish().describe('口座名義カナ'),
  "account_type": zod.string().nullish().describe('預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金')
}).nullish()
})


export const getEmployeeBasicPayRulePathEmployeeIdMax = 2147483647;


export const getEmployeeBasicPayRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeBasicPayRulePathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeeBasicPayRuleQueryCompanyIdMax = 2147483647;
export const getEmployeeBasicPayRuleQueryYearMin = 2000;

export const getEmployeeBasicPayRuleQueryYearMax = 2100;
export const getEmployeeBasicPayRuleQueryMonthMax = 12;


export const getEmployeeBasicPayRuleQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeBasicPayRuleQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getEmployeeBasicPayRuleQueryYearMin).max(getEmployeeBasicPayRuleQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeeBasicPayRuleQueryMonthMax).describe('従業員情報を取得したい月<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>\n翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>')
})

export const getEmployeeBasicPayRuleResponseEmployeeBasicPayRuleIdMax = 2147483647;
export const getEmployeeBasicPayRuleResponseEmployeeBasicPayRuleCompanyIdMax = 2147483647;
export const getEmployeeBasicPayRuleResponseEmployeeBasicPayRuleEmployeeIdMax = 2147483647;
export const getEmployeeBasicPayRuleResponseEmployeeBasicPayRulePayAmountMin = 0;

export const getEmployeeBasicPayRuleResponseEmployeeBasicPayRulePayAmountMax = 99999999;


export const getEmployeeBasicPayRuleResponse = zod.object({
  "employee_basic_pay_rule": zod.object({
  "id": zod.number().min(1).max(getEmployeeBasicPayRuleResponseEmployeeBasicPayRuleIdMax).optional().describe('従業員の基本給ID'),
  "company_id": zod.number().min(1).max(getEmployeeBasicPayRuleResponseEmployeeBasicPayRuleCompanyIdMax).optional().describe('事業所ID'),
  "employee_id": zod.number().min(1).max(getEmployeeBasicPayRuleResponseEmployeeBasicPayRuleEmployeeIdMax).optional().describe('従業員ID'),
  "pay_calc_type": zod.enum(['monthly', 'daily', 'hourly']).optional().describe('給与方式 monthly: 月給, daily: 日給, hourly: 時給'),
  "pay_amount": zod.number().min(getEmployeeBasicPayRuleResponseEmployeeBasicPayRulePayAmountMin).max(getEmployeeBasicPayRuleResponseEmployeeBasicPayRulePayAmountMax).optional().describe('基本給')
}).nullish()
})


export const updateEmployeeBasicPayRulePathEmployeeIdMax = 2147483647;


export const updateEmployeeBasicPayRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(updateEmployeeBasicPayRulePathEmployeeIdMax).describe('従業員ID')
})

export const updateEmployeeBasicPayRuleBodyCompanyIdMax = 2147483647;
export const updateEmployeeBasicPayRuleBodyYearMin = 2000;

export const updateEmployeeBasicPayRuleBodyYearMax = 2100;
export const updateEmployeeBasicPayRuleBodyMonthMax = 12;
export const updateEmployeeBasicPayRuleBodyEmployeeBasicPayRulePayAmountMin = 0;

export const updateEmployeeBasicPayRuleBodyEmployeeBasicPayRulePayAmountMax = 99999999;


export const updateEmployeeBasicPayRuleBody = zod.object({
  "company_id": zod.number().min(1).max(updateEmployeeBasicPayRuleBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "year": zod.number().min(updateEmployeeBasicPayRuleBodyYearMin).max(updateEmployeeBasicPayRuleBodyYearMax).describe('更新対象年（必須）'),
  "month": zod.number().min(1).max(updateEmployeeBasicPayRuleBodyMonthMax).describe('更新対象月（必須）<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます<br>\n翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>'),
  "employee_basic_pay_rule": zod.object({
  "pay_calc_type": zod.enum(['monthly', 'daily', 'hourly']).describe('給与方式 null不可 monthly: 月給, daily: 日給, hourly: 時給'),
  "pay_amount": zod.number().min(updateEmployeeBasicPayRuleBodyEmployeeBasicPayRulePayAmountMin).max(updateEmployeeBasicPayRuleBodyEmployeeBasicPayRulePayAmountMax).describe('基本給 null不可')
})
})

export const updateEmployeeBasicPayRuleResponseEmployeeBasicPayRuleIdMax = 2147483647;
export const updateEmployeeBasicPayRuleResponseEmployeeBasicPayRuleCompanyIdMax = 2147483647;
export const updateEmployeeBasicPayRuleResponseEmployeeBasicPayRuleEmployeeIdMax = 2147483647;
export const updateEmployeeBasicPayRuleResponseEmployeeBasicPayRulePayAmountMin = 0;

export const updateEmployeeBasicPayRuleResponseEmployeeBasicPayRulePayAmountMax = 99999999;


export const updateEmployeeBasicPayRuleResponse = zod.object({
  "employee_basic_pay_rule": zod.object({
  "id": zod.number().min(1).max(updateEmployeeBasicPayRuleResponseEmployeeBasicPayRuleIdMax).optional().describe('従業員の基本給ID'),
  "company_id": zod.number().min(1).max(updateEmployeeBasicPayRuleResponseEmployeeBasicPayRuleCompanyIdMax).optional().describe('事業所ID'),
  "employee_id": zod.number().min(1).max(updateEmployeeBasicPayRuleResponseEmployeeBasicPayRuleEmployeeIdMax).optional().describe('従業員ID'),
  "pay_calc_type": zod.enum(['monthly', 'daily', 'hourly']).optional().describe('給与方式 monthly: 月給, daily: 日給, hourly: 時給'),
  "pay_amount": zod.number().min(updateEmployeeBasicPayRuleResponseEmployeeBasicPayRulePayAmountMin).max(updateEmployeeBasicPayRuleResponseEmployeeBasicPayRulePayAmountMax).optional().describe('基本給')
}).nullish()
})


export const getEmployeeProfileCustomFieldsRulePathEmployeeIdMax = 2147483647;


export const getEmployeeProfileCustomFieldsRuleParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeProfileCustomFieldsRulePathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeeProfileCustomFieldsRuleQueryCompanyIdMax = 2147483647;
export const getEmployeeProfileCustomFieldsRuleQueryYearMin = 2000;

export const getEmployeeProfileCustomFieldsRuleQueryYearMax = 2100;
export const getEmployeeProfileCustomFieldsRuleQueryMonthMax = 12;


export const getEmployeeProfileCustomFieldsRuleQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeProfileCustomFieldsRuleQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getEmployeeProfileCustomFieldsRuleQueryYearMin).max(getEmployeeProfileCustomFieldsRuleQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeeProfileCustomFieldsRuleQueryMonthMax).describe('従業員情報を取得したい月<br>\n締め日支払い日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>\n翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>')
})

export const getEmployeeProfileCustomFieldsRuleResponse = zod.object({
  "profile_custom_field_groups": zod.array(zod.object({
  "id": zod.number().optional().describe('グループID'),
  "name": zod.string().optional().describe('グループ名'),
  "profile_custom_field_rules": zod.array(zod.object({
  "id": zod.number().optional().describe('カスタム項目ID'),
  "field_type": zod.enum(['file', 'text', 'number', 'date', 'selector', 'time']).optional().describe('項目タイプ file: ファイル, text: テキスト, number: 数値, date: 日付, selector: セレクター, time: 時間'),
  "name": zod.string().optional().describe('項目名'),
  "value": zod.string().nullish().describe('値（項目タイプがfileの場合、nullを返します）'),
  "file_name": zod.string().nullish().describe('ファイル名（項目タイプがfile以外の場合、nullを返します）')
})).optional().describe('カスタム項目')
})).optional()
})


export const getEmployeeWorkRecordPathEmployeeIdMax = 2147483647;
export const getEmployeeWorkRecordPathDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');


export const getEmployeeWorkRecordParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeWorkRecordPathEmployeeIdMax).describe('従業員ID'),
  "date": zod.string().date().regex(getEmployeeWorkRecordPathDateRegExp).describe('従業員情報を取得したい年月日(YYYY-MM-DD)(例:2018-08-01)')
})

export const getEmployeeWorkRecordQueryCompanyIdMax = 2147483647;


export const getEmployeeWorkRecordQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeWorkRecordQueryCompanyIdMax).describe('事業所ID')
})

export const getEmployeeWorkRecordResponseNoteMax = 255;
export const getEmployeeWorkRecordResponseNoteMaxOne = 255;


export const getEmployeeWorkRecordResponse = zod.union([zod.object({
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "work_record_segments": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('出退勤のリスト\n  - 登録されている全ての出退勤時間のリストを返します。'),
  "clock_in_at": zod.string().datetime({}).nullish().describe('出勤時刻\n  - 出勤時刻を返します。出退勤が複数登録されている場合は、最初の出退勤の出勤時間を返します。'),
  "clock_out_at": zod.string().datetime({}).nullish().describe('退勤時刻\n  - 退勤時刻を返します。出退勤が複数登録されている場合は、最後の出退勤の退勤時間を返します。'),
  "date": zod.string().datetime({}).optional().describe('対象日付'),
  "day_pattern": zod.enum(['normal_day', 'prescribed_holiday', 'legal_holiday']).optional().describe('勤務パターン\n- normal_day: 所定労働日\n- prescribed_holiday: 所定休日\n- legal_holiday: 法定休日'),
  "schedule_pattern": zod.enum(['', 'substitute_holiday_work', 'substitute_holiday', 'compensatory_holiday_work', 'compensatory_holiday', 'special_holiday']).optional().describe('スケジュールパターン\n- substitute_holiday_work: 振替出勤\n- substitute_holiday: 振替休日\n- compensatory_holiday_work: 代休出勤\n- compensatory_holiday: 代休\n- special_holiday: 特別休暇'),
  "early_leaving_mins": zod.number().optional().describe('早退分の時間（分単位）'),
  "half_special_holiday_mins": zod.number().optional().describe('特別休暇の半休を利用した時間（分単位）'),
  "hourly_special_holiday_mins": zod.number().optional().describe('特別休暇の時間休を利用した時間（分単位）'),
  "is_absence": zod.boolean().optional().describe('欠勤かどうか'),
  "is_editable": zod.boolean().optional().describe('勤怠データが編集可能かどうか'),
  "lateness_mins": zod.number().optional().describe('遅刻分の時間（分単位）'),
  "normal_work_clock_in_at": zod.string().datetime({}).nullish().describe('所定労働開始時刻'),
  "normal_work_clock_out_at": zod.string().datetime({}).nullish().describe('所定労働終了時刻'),
  "normal_work_mins": zod.number().optional().describe('所定労働時間'),
  "note": zod.string().max(getEmployeeWorkRecordResponseNoteMax).optional().describe('勤怠メモ'),
  "paid_holidays": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning_off', 'afternoon_off', 'hourly']).describe('有給休暇の種別取得単位（full:全休、half:半休、morning_off:午前休、 afternoon_off:午後休、hourly:時間休）'),
  "mins": zod.number().describe('年次有給休暇の休暇時間（分単位）'),
  "days": zod.number().describe('年次有給休暇の消化日数（全休：1, 半日単位：0.5, 時間休：0）')
})).optional().describe('年次有給休暇の実績'),
  "special_holiday": zod.number().optional().describe('この日に対する特別休暇取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_special_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_special_holiday_minsを参照してください。'),
  "special_holiday_setting_id": zod.number().nullish().describe('特別休暇設定ID'),
  "use_attendance_deduction": zod.boolean().optional().describe('欠勤・遅刻・早退を控除対象時間に算入するかどうか'),
  "use_default_work_pattern": zod.boolean().optional().describe('デフォルトの勤務時間設定を使っているかどうか'),
  "use_half_compensatory_holiday": zod.boolean().optional().describe('代休の半休を利用したかどうか'),
  "total_overtime_work_mins": zod.number().optional().describe('時間外労働時間（分）（Webの勤怠登録画面にて詳細項目の「勤務時間の長さを自動で計算しない」にチェックを入れた場合0が返却されます。時間外労働時間はtotal_overtime_except_normal_work_minsを参照してください。）'),
  "total_holiday_work_mins": zod.number().optional().describe('休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().optional().describe('深夜労働時間（分）'),
  "not_auto_calc_work_time": zod.boolean().optional().describe('勤怠登録時に勤務時間の長さを自動で計算しないかどうか'),
  "total_excess_statutory_work_mins": zod.number().optional().describe('法定内残業時間（分）'),
  "total_latenight_excess_statutory_work_mins": zod.number().optional().describe('深夜の法定内残業時間（分）'),
  "total_overtime_except_normal_work_mins": zod.number().optional().describe('所定外法定外労働時間（分）'),
  "total_latenight_overtime_except_normal_work_min": zod.number().optional().describe('深夜の所定外法定外労働時間（分）')
}),zod.object({
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "work_record_segments": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('出退勤のリスト\n  - 登録されている全ての出退勤時間のリストを返します。'),
  "clock_in_at": zod.string().datetime({}).nullish().describe('出勤時刻\n  - 出勤時刻を返します。出退勤が複数登録されている場合は、最初の出退勤の出勤時間を返します。'),
  "clock_out_at": zod.string().datetime({}).nullish().describe('退勤時刻\n  - 退勤時刻を返します。出退勤が複数登録されている場合は、最後の出退勤の退勤時間を返します。'),
  "date": zod.string().datetime({}).optional().describe('対象日付'),
  "day_pattern": zod.enum(['normal_day', 'prescribed_holiday', 'legal_holiday']).optional().describe('勤務パターン\n- normal_day: 所定労働日\n- prescribed_holiday: 所定休日\n- legal_holiday: 法定休日'),
  "schedule_pattern": zod.enum(['', 'substitute_holiday_work', 'substitute_holiday', 'compensatory_holiday_work', 'compensatory_holiday', 'special_holiday']).optional().describe('スケジュールパターン\n- substitute_holiday_work: 振替出勤\n- substitute_holiday: 振替休日\n- compensatory_holiday_work: 代休出勤\n- compensatory_holiday: 代休\n- special_holiday: 特別休暇'),
  "early_leaving_mins": zod.number().optional().describe('早退分の時間（分単位）'),
  "half_paid_holiday_mins": zod.number().optional().describe('[deprecated] 有給休暇の半休を利用した時間（分単位）※ 削除予定のため paid_holidays を参照してください'),
  "half_special_holiday_mins": zod.number().optional().describe('特別休暇の半休を利用した時間（分単位）'),
  "hourly_paid_holiday_mins": zod.number().optional().describe('[deprecated] 有給休暇の時間休を利用した時間（分単位）※ 削除予定のため paid_holidays を参照してください'),
  "hourly_special_holiday_mins": zod.number().optional().describe('特別休暇の時間休を利用した時間（分単位）'),
  "is_absence": zod.boolean().optional().describe('欠勤かどうか'),
  "is_editable": zod.boolean().optional().describe('勤怠データが編集可能かどうか'),
  "lateness_mins": zod.number().optional().describe('遅刻分の時間（分単位）'),
  "normal_work_clock_in_at": zod.string().datetime({}).nullish().describe('所定労働開始時刻'),
  "normal_work_clock_out_at": zod.string().datetime({}).nullish().describe('所定労働終了時刻'),
  "normal_work_mins": zod.number().optional().describe('所定労働時間'),
  "note": zod.string().max(getEmployeeWorkRecordResponseNoteMaxOne).optional().describe('勤怠メモ'),
  "paid_holiday": zod.number().optional().describe('[deprecated] この日に対する有給取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_paid_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_paid_holiday_minsを参照してください。※ 削除予定のため paid_holidays を参照してください'),
  "special_holiday": zod.number().optional().describe('この日に対する特別休暇取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_special_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_special_holiday_minsを参照してください。'),
  "special_holiday_setting_id": zod.number().nullish().describe('特別休暇設定ID'),
  "use_attendance_deduction": zod.boolean().optional().describe('欠勤・遅刻・早退を控除対象時間に算入するかどうか'),
  "use_default_work_pattern": zod.boolean().optional().describe('デフォルトの勤務時間設定を使っているかどうか'),
  "use_half_compensatory_holiday": zod.boolean().optional().describe('代休の半休を利用したかどうか'),
  "total_overtime_work_mins": zod.number().optional().describe('時間外労働時間（分）（Webの勤怠登録画面にて詳細項目の「勤務時間の長さを自動で計算しない」にチェックを入れた場合0が返却されます。時間外労働時間はtotal_overtime_except_normal_work_minsを参照してください。）'),
  "total_holiday_work_mins": zod.number().optional().describe('休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().optional().describe('深夜労働時間（分）'),
  "not_auto_calc_work_time": zod.boolean().optional().describe('勤怠登録時に勤務時間の長さを自動で計算しないかどうか'),
  "total_excess_statutory_work_mins": zod.number().optional().describe('法定内残業時間（分）'),
  "total_latenight_excess_statutory_work_mins": zod.number().optional().describe('深夜の法定内残業時間（分）'),
  "total_overtime_except_normal_work_mins": zod.number().optional().describe('所定外法定外労働時間（分）'),
  "total_latenight_overtime_except_normal_work_min": zod.number().optional().describe('深夜の所定外法定外労働時間（分）')
})])


export const updateEmployeeWorkRecordPathEmployeeIdMax = 2147483647;
export const updateEmployeeWorkRecordPathDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');


export const updateEmployeeWorkRecordParams = zod.object({
  "employee_id": zod.number().min(1).max(updateEmployeeWorkRecordPathEmployeeIdMax).describe('従業員ID'),
  "date": zod.string().date().regex(updateEmployeeWorkRecordPathDateRegExp).describe('更新対象年月日(YYYY-MM-DD)(例:2018-08-01)')
})

export const updateEmployeeWorkRecordBodyCompanyIdMax = 2147483647;
export const updateEmployeeWorkRecordBodyBreakRecordsItemClockInAtRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyBreakRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyWorkRecordSegmentsItemClockInAtRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyWorkRecordSegmentsItemClockOutAtRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyClockInAtRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyClockOutAtRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyEarlyLeavingMinsMin = 0;

export const updateEmployeeWorkRecordBodyEarlyLeavingMinsMax = 1440;
export const updateEmployeeWorkRecordBodyLatenessMinsMin = 0;

export const updateEmployeeWorkRecordBodyLatenessMinsMax = 1440;
export const updateEmployeeWorkRecordBodyNormalWorkClockInAtRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyNormalWorkClockOutAtRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyNormalWorkMinsMin = 0;

export const updateEmployeeWorkRecordBodyNormalWorkMinsMax = 1440;
export const updateEmployeeWorkRecordBodyNoteMax = 255;
export const updateEmployeeWorkRecordBodyPaidHolidaysItemMinsMin = 0;
export const updateEmployeeWorkRecordBodySpecialHolidaySettingIdMax = 2147483647;
export const updateEmployeeWorkRecordBodyHalfSpecialHolidayMinsMin = 0;

export const updateEmployeeWorkRecordBodyHalfSpecialHolidayMinsMax = 1440;
export const updateEmployeeWorkRecordBodyHourlySpecialHolidayMinsMin = 0;

export const updateEmployeeWorkRecordBodyHourlySpecialHolidayMinsMax = 1440;
export const updateEmployeeWorkRecordBodyCompanyIdMaxOne = 2147483647;
export const updateEmployeeWorkRecordBodyBreakRecordsItemClockInAtRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyBreakRecordsItemClockOutAtRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyWorkRecordSegmentsItemClockInAtRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyWorkRecordSegmentsItemClockOutAtRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyClockInAtRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyClockOutAtRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyEarlyLeavingMinsMinOne = 0;

export const updateEmployeeWorkRecordBodyEarlyLeavingMinsMaxOne = 1440;
export const updateEmployeeWorkRecordBodyLatenessMinsMinOne = 0;

export const updateEmployeeWorkRecordBodyLatenessMinsMaxOne = 1440;
export const updateEmployeeWorkRecordBodyNormalWorkClockInAtRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyNormalWorkClockOutAtRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateEmployeeWorkRecordBodyNormalWorkMinsMinOne = 0;

export const updateEmployeeWorkRecordBodyNormalWorkMinsMaxOne = 1440;
export const updateEmployeeWorkRecordBodyNoteMaxOne = 255;
export const updateEmployeeWorkRecordBodyHalfPaidHolidayMinsMin = 0;

export const updateEmployeeWorkRecordBodyHalfPaidHolidayMinsMax = 1440;
export const updateEmployeeWorkRecordBodyHourlyPaidHolidayMinsMin = 0;

export const updateEmployeeWorkRecordBodyHourlyPaidHolidayMinsMax = 1440;
export const updateEmployeeWorkRecordBodySpecialHolidaySettingIdMaxOne = 2147483647;
export const updateEmployeeWorkRecordBodyHalfSpecialHolidayMinsMinOne = 0;

export const updateEmployeeWorkRecordBodyHalfSpecialHolidayMinsMaxOne = 1440;
export const updateEmployeeWorkRecordBodyHourlySpecialHolidayMinsMinOne = 0;

export const updateEmployeeWorkRecordBodyHourlySpecialHolidayMinsMaxOne = 1440;


export const updateEmployeeWorkRecordBody = zod.union([zod.object({
  "company_id": zod.number().min(1).max(updateEmployeeWorkRecordBodyCompanyIdMax).describe('事業所ID（必須）'),
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyBreakRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyBreakRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "work_record_segments": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyWorkRecordSegmentsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyWorkRecordSegmentsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('出退勤のリスト'),
  "clock_in_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyClockInAtRegExp).optional().describe('出勤時刻  \n\n複数の出退勤を指定できないため非推奨です。 `work_record_segments` を利用してください。'),
  "clock_out_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyClockOutAtRegExp).optional().describe('退勤時刻\n\n複数の出退勤を指定できないため非推奨です。 `work_record_segments` を利用してください。'),
  "day_pattern": zod.enum(['normal_day', 'prescribed_holiday', 'legal_holiday']).optional().describe('勤務パターン（所定労働日: normal_day, 所定休日: prescribed_holiday, 法定休日: legal_holiday）\n\nprescribed_holiday、legal_holidayを指定すると、以下のパラメータについて、指定した値が反映されず無視されます。\n- early_leaving_mins\n- lateness_mins\n- paid_holiday'),
  "early_leaving_mins": zod.number().min(updateEmployeeWorkRecordBodyEarlyLeavingMinsMin).max(updateEmployeeWorkRecordBodyEarlyLeavingMinsMax).optional().describe('早退分の時間（分単位）'),
  "is_absence": zod.boolean().optional().describe('欠勤かどうか\n\nis_absenceにtrueを指定すると、以下のパラーメータについて、指定した値が反映されず無視されます。\n- break_records\n  - clock_in_at\n  - clock_out_at\n- clock_in_at\n- clock_out_at\n- early_leaving_mins\n- lateness_mins\n- normal_work_clock_in_at\n- normal_work_clock_out_at\n- normal_work_mins\n- paid_holidays\n- special_holiday\n- special_holiday_setting_id\n- half_special_holiday_mins\n- hourly_special_holiday_mins'),
  "lateness_mins": zod.number().min(updateEmployeeWorkRecordBodyLatenessMinsMin).max(updateEmployeeWorkRecordBodyLatenessMinsMax).optional().describe('遅刻分の時間（分単位）'),
  "normal_work_clock_in_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyNormalWorkClockInAtRegExp).optional().describe('所定労働開始時刻。指定しない場合はデフォルト設定が使用されます。（デフォルト設定は従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。）'),
  "normal_work_clock_out_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyNormalWorkClockOutAtRegExp).optional().describe('所定労働終了時刻。指定しない場合はデフォルト設定が使用されます。（デフォルト設定は従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。）'),
  "normal_work_mins": zod.number().min(updateEmployeeWorkRecordBodyNormalWorkMinsMin).max(updateEmployeeWorkRecordBodyNormalWorkMinsMax).optional().describe('所定労働時間。指定しない場合はデフォルト設定が使用されます。（デフォルト設定は従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。）'),
  "note": zod.string().max(updateEmployeeWorkRecordBodyNoteMax).optional().describe('勤怠メモ'),
  "paid_holidays": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning_off', 'afternoon_off', 'hourly']).describe('有給休暇の種別を指定します（全休：full, 半休：half, 午前休：morning_off, 午後休：afternoon_off, 時間休：hourly）'),
  "mins": zod.number().min(updateEmployeeWorkRecordBodyPaidHolidaysItemMinsMin).optional().describe('有給休暇を利用した時間（分単位） ※ 全休の場合や午前休、午後休の場合にはこちらの値は参照されません')
})).optional(),
  "special_holiday": zod.union([zod.literal(0),zod.literal(1)]).optional().describe('この日の特別休暇取得日数。1日単位で指定します。'),
  "special_holiday_setting_id": zod.number().min(1).max(updateEmployeeWorkRecordBodySpecialHolidaySettingIdMax).nullish().describe('特別休暇設定ID'),
  "half_special_holiday_mins": zod.number().min(updateEmployeeWorkRecordBodyHalfSpecialHolidayMinsMin).max(updateEmployeeWorkRecordBodyHalfSpecialHolidayMinsMax).optional().describe('特別休暇の半休を利用した時間（分単位）'),
  "hourly_special_holiday_mins": zod.number().min(updateEmployeeWorkRecordBodyHourlySpecialHolidayMinsMin).max(updateEmployeeWorkRecordBodyHourlySpecialHolidayMinsMax).optional().describe('特別休暇の時間休を利用した時間（分単位）'),
  "use_attendance_deduction": zod.boolean().optional().describe('欠勤・遅刻・早退を控除対象時間に算入するかどうか'),
  "use_default_work_pattern": zod.boolean().optional().describe('デフォルトの勤務設定を使うかどうか。\n\ntrueを指定した場合、以下のパラメータについて、指定した値に関係なく、従業員に設定した勤務賃金設定の休日の設定を参照して値が決まります\n- day_pattern\n\ntrueを指定した場合、以下のパラメータについて、指定した値に関係なく、従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。\n- normal_work_clock_in_at\n- normal_work_clock_out_at\n- normal_work_mins')
}),zod.object({
  "company_id": zod.number().min(1).max(updateEmployeeWorkRecordBodyCompanyIdMaxOne).optional().describe('事業所ID（必須）'),
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyBreakRecordsItemClockInAtRegExpOne).describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyBreakRecordsItemClockOutAtRegExpOne).describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "work_record_segments": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyWorkRecordSegmentsItemClockInAtRegExpOne).describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyWorkRecordSegmentsItemClockOutAtRegExpOne).describe('終了時刻')
})).optional().describe('出退勤のリスト'),
  "clock_in_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyClockInAtRegExpOne).optional().describe('出勤時刻  \n\n複数の出退勤を指定できないため非推奨です。 `work_record_segments` を利用してください。'),
  "clock_out_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyClockOutAtRegExpOne).optional().describe('退勤時刻\n\n複数の出退勤を指定できないため非推奨です。 `work_record_segments` を利用してください。'),
  "day_pattern": zod.enum(['normal_day', 'prescribed_holiday', 'legal_holiday']).optional().describe('勤務パターン（所定労働日: normal_day, 所定休日: prescribed_holiday, 法定休日: legal_holiday）\n\nprescribed_holiday、legal_holidayを指定すると、以下のパラメータについて、指定した値が反映されず無視されます。\n- early_leaving_mins\n- lateness_mins\n- paid_holiday'),
  "early_leaving_mins": zod.number().min(updateEmployeeWorkRecordBodyEarlyLeavingMinsMinOne).max(updateEmployeeWorkRecordBodyEarlyLeavingMinsMaxOne).optional().describe('早退分の時間（分単位）'),
  "is_absence": zod.boolean().optional().describe('欠勤かどうか\n\nis_absenceにtrueを指定すると、以下のパラーメータについて、指定した値が反映されず無視されます。\n- break_records\n  - clock_in_at\n  - clock_out_at\n- clock_in_at\n- clock_out_at\n- early_leaving_mins\n- lateness_mins\n- normal_work_clock_in_at\n- normal_work_clock_out_at\n- normal_work_mins\n- paid_holiday\n- half_paid_holiday_mins\n- hourly_paid_holiday_mins\n- special_holiday\n- special_holiday_setting_id\n- half_special_holiday_mins\n- hourly_special_holiday_mins'),
  "lateness_mins": zod.number().min(updateEmployeeWorkRecordBodyLatenessMinsMinOne).max(updateEmployeeWorkRecordBodyLatenessMinsMaxOne).optional().describe('遅刻分の時間（分単位）'),
  "normal_work_clock_in_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyNormalWorkClockInAtRegExpOne).optional().describe('所定労働開始時刻。指定しない場合はデフォルト設定が使用されます。（デフォルト設定は従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。）'),
  "normal_work_clock_out_at": zod.string().datetime({}).regex(updateEmployeeWorkRecordBodyNormalWorkClockOutAtRegExpOne).optional().describe('所定労働終了時刻。指定しない場合はデフォルト設定が使用されます。（デフォルト設定は従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。）'),
  "normal_work_mins": zod.number().min(updateEmployeeWorkRecordBodyNormalWorkMinsMinOne).max(updateEmployeeWorkRecordBodyNormalWorkMinsMaxOne).optional().describe('所定労働時間。指定しない場合はデフォルト設定が使用されます。（デフォルト設定は従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。）'),
  "note": zod.string().max(updateEmployeeWorkRecordBodyNoteMaxOne).optional().describe('勤怠メモ'),
  "paid_holiday": zod.union([zod.literal(0),zod.literal(1)]).optional().describe('[deprecated] この日の有休取得日数。1日単位で指定します。 ※ paid_holidays を指定する場合にはこちらの値は参照されません ※ 削除予定のため paid_holidays->type を指定してください'),
  "half_paid_holiday_mins": zod.number().min(updateEmployeeWorkRecordBodyHalfPaidHolidayMinsMin).max(updateEmployeeWorkRecordBodyHalfPaidHolidayMinsMax).optional().describe('[deprecated] 有給休暇の半休を利用した時間（分単位） ※ paid_holidaysを指定する場合にはこちらの値は参照されません ※ 削除予定のためpaid_holidays->mins を指定してください'),
  "hourly_paid_holiday_mins": zod.number().min(updateEmployeeWorkRecordBodyHourlyPaidHolidayMinsMin).max(updateEmployeeWorkRecordBodyHourlyPaidHolidayMinsMax).optional().describe('[deprecated] morning_off または afternoon_off を指定します ※ paid_holidaysを指定する場合にはこちらの値は参照使用されません ※ 削除予定のため paid_holidays->type を指定してください'),
  "special_holiday": zod.union([zod.literal(0),zod.literal(1)]).optional().describe('この日の特別休暇取得日数。1日単位で指定します。'),
  "special_holiday_setting_id": zod.number().min(1).max(updateEmployeeWorkRecordBodySpecialHolidaySettingIdMaxOne).nullish().describe('特別休暇設定ID'),
  "half_special_holiday_mins": zod.number().min(updateEmployeeWorkRecordBodyHalfSpecialHolidayMinsMinOne).max(updateEmployeeWorkRecordBodyHalfSpecialHolidayMinsMaxOne).optional().describe('特別休暇の半休を利用した時間（分単位）'),
  "hourly_special_holiday_mins": zod.number().min(updateEmployeeWorkRecordBodyHourlySpecialHolidayMinsMinOne).max(updateEmployeeWorkRecordBodyHourlySpecialHolidayMinsMaxOne).optional().describe('特別休暇の時間休を利用した時間（分単位）'),
  "use_attendance_deduction": zod.boolean().optional().describe('欠勤・遅刻・早退を控除対象時間に算入するかどうか'),
  "use_default_work_pattern": zod.boolean().optional().describe('デフォルトの勤務設定を使うかどうか。\n\ntrueを指定した場合、以下のパラメータについて、指定した値に関係なく、従業員に設定した勤務賃金設定の休日の設定を参照して値が決まります\n- day_pattern\n\ntrueを指定した場合、以下のパラメータについて、指定した値に関係なく、従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。\n- normal_work_clock_in_at\n- normal_work_clock_out_at\n- normal_work_mins')
})])

export const updateEmployeeWorkRecordResponseNoteMax = 255;


export const updateEmployeeWorkRecordResponse = zod.object({
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "work_record_segments": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('出退勤のリスト\n  - 登録されている全ての出退勤時間のリストを返します。'),
  "clock_in_at": zod.string().datetime({}).nullish().describe('出勤時刻\n  - 出勤時刻を返します。出退勤が複数登録されている場合は、最初の出退勤の出勤時間を返します。'),
  "clock_out_at": zod.string().datetime({}).nullish().describe('退勤時刻\n  - 退勤時刻を返します。出退勤が複数登録されている場合は、最後の出退勤の退勤時間を返します。'),
  "date": zod.string().datetime({}).optional().describe('対象日付'),
  "day_pattern": zod.enum(['normal_day', 'prescribed_holiday', 'legal_holiday']).optional().describe('勤務パターン\n- normal_day: 所定労働日\n- prescribed_holiday: 所定休日\n- legal_holiday: 法定休日'),
  "schedule_pattern": zod.enum(['', 'substitute_holiday_work', 'substitute_holiday', 'compensatory_holiday_work', 'compensatory_holiday', 'special_holiday']).optional().describe('スケジュールパターン\n- substitute_holiday_work: 振替出勤\n- substitute_holiday: 振替休日\n- compensatory_holiday_work: 代休出勤\n- compensatory_holiday: 代休\n- special_holiday: 特別休暇'),
  "early_leaving_mins": zod.number().optional().describe('早退分の時間（分単位）'),
  "half_special_holiday_mins": zod.number().optional().describe('特別休暇の半休を利用した時間（分単位）'),
  "hourly_special_holiday_mins": zod.number().optional().describe('特別休暇の時間休を利用した時間（分単位）'),
  "is_absence": zod.boolean().optional().describe('欠勤かどうか'),
  "is_editable": zod.boolean().optional().describe('勤怠データが編集可能かどうか'),
  "lateness_mins": zod.number().optional().describe('遅刻分の時間（分単位）'),
  "normal_work_clock_in_at": zod.string().datetime({}).nullish().describe('所定労働開始時刻'),
  "normal_work_clock_out_at": zod.string().datetime({}).nullish().describe('所定労働終了時刻'),
  "normal_work_mins": zod.number().optional().describe('所定労働時間'),
  "note": zod.string().max(updateEmployeeWorkRecordResponseNoteMax).optional().describe('勤怠メモ'),
  "paid_holidays": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning_off', 'afternoon_off', 'hourly']).describe('有給休暇の種別取得単位（full:全休、half:半休、morning_off:午前休、 afternoon_off:午後休、hourly:時間休）'),
  "mins": zod.number().describe('年次有給休暇の休暇時間（分単位）'),
  "days": zod.number().describe('年次有給休暇の消化日数（全休：1, 半日単位：0.5, 時間休：0）')
})).optional().describe('年次有給休暇の実績'),
  "special_holiday": zod.number().optional().describe('この日に対する特別休暇取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_special_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_special_holiday_minsを参照してください。'),
  "special_holiday_setting_id": zod.number().nullish().describe('特別休暇設定ID'),
  "use_attendance_deduction": zod.boolean().optional().describe('欠勤・遅刻・早退を控除対象時間に算入するかどうか'),
  "use_default_work_pattern": zod.boolean().optional().describe('デフォルトの勤務時間設定を使っているかどうか'),
  "use_half_compensatory_holiday": zod.boolean().optional().describe('代休の半休を利用したかどうか'),
  "total_overtime_work_mins": zod.number().optional().describe('時間外労働時間（分）（Webの勤怠登録画面にて詳細項目の「勤務時間の長さを自動で計算しない」にチェックを入れた場合0が返却されます。時間外労働時間はtotal_overtime_except_normal_work_minsを参照してください。）'),
  "total_holiday_work_mins": zod.number().optional().describe('休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().optional().describe('深夜労働時間（分）'),
  "not_auto_calc_work_time": zod.boolean().optional().describe('勤怠登録時に勤務時間の長さを自動で計算しないかどうか'),
  "total_excess_statutory_work_mins": zod.number().optional().describe('法定内残業時間（分）'),
  "total_latenight_excess_statutory_work_mins": zod.number().optional().describe('深夜の法定内残業時間（分）'),
  "total_overtime_except_normal_work_mins": zod.number().optional().describe('所定外法定外労働時間（分）'),
  "total_latenight_overtime_except_normal_work_min": zod.number().optional().describe('深夜の所定外法定外労働時間（分）')
})


export const destroyEmployeeWorkRecordPathEmployeeIdMax = 2147483647;
export const destroyEmployeeWorkRecordPathDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');


export const destroyEmployeeWorkRecordParams = zod.object({
  "employee_id": zod.number().min(1).max(destroyEmployeeWorkRecordPathEmployeeIdMax).describe('従業員ID'),
  "date": zod.string().date().regex(destroyEmployeeWorkRecordPathDateRegExp).describe('削除対象年月日(YYYY-MM-DD)(例:2018-08-01)')
})

export const destroyEmployeeWorkRecordQueryCompanyIdMax = 2147483647;


export const destroyEmployeeWorkRecordQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyEmployeeWorkRecordQueryCompanyIdMax).describe('事業所ID')
})


export const getEmployeeWorkRecordSummaryPathEmployeeIdMax = 2147483647;
export const getEmployeeWorkRecordSummaryPathYearMin = 2000;

export const getEmployeeWorkRecordSummaryPathYearMax = 2100;
export const getEmployeeWorkRecordSummaryPathMonthMax = 12;


export const getEmployeeWorkRecordSummaryParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeWorkRecordSummaryPathEmployeeIdMax).describe('従業員ID'),
  "year": zod.number().min(getEmployeeWorkRecordSummaryPathYearMin).max(getEmployeeWorkRecordSummaryPathYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getEmployeeWorkRecordSummaryPathMonthMax).describe('従業員情報を取得したい月')
})

export const getEmployeeWorkRecordSummaryQueryCompanyIdMax = 2147483647;


export const getEmployeeWorkRecordSummaryQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeWorkRecordSummaryQueryCompanyIdMax).describe('事業所ID'),
  "work_records": zod.boolean().optional().describe('サマリ情報に日次の勤怠情報を含める(true/false)(デフォルト: false)')
})

export const getEmployeeWorkRecordSummaryResponseMonthMax = 12;
export const getEmployeeWorkRecordSummaryResponseWorkRecordsItemNoteMax = 255;
export const getEmployeeWorkRecordSummaryResponseWorkRecordsItemNoteMaxOne = 255;


export const getEmployeeWorkRecordSummaryResponse = zod.object({
  "year": zod.number().optional().describe('給与支払い年'),
  "month": zod.number().min(1).max(getEmployeeWorkRecordSummaryResponseMonthMax).optional().describe('給与支払い月'),
  "start_date": zod.string().date().optional().describe('集計開始日'),
  "end_date": zod.string().date().optional().describe('集計終了日'),
  "work_days": zod.number().optional().describe('労働日数'),
  "total_work_mins": zod.number().optional().describe('総勤務時間（分）'),
  "total_normal_work_mins": zod.number().optional().describe('所定内労働時間（分）'),
  "total_excess_statutory_work_mins": zod.number().optional().describe('給与計算に用いられる法定内残業時間（分）'),
  "total_overtime_except_normal_work_mins": zod.number().optional().describe('所定外法定外労働時間'),
  "total_overtime_within_normal_work_mins": zod.number().optional().describe('所定内法定外労働時間（裁量労働制の場合はみなしベース）'),
  "total_holiday_work_mins": zod.number().optional().describe('法定休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().optional().describe('深夜労働allow(company)時間（分）'),
  "num_absences": zod.number().optional().describe('欠勤日数'),
  "num_paid_holidays": zod.number().optional().describe('有給取得日数'),
  "num_paid_holidays_and_hours": zod.object({
  "days": zod.number().optional().describe('日数 0.5は半休を表す'),
  "hours": zod.number().optional().describe('時間数')
}).optional(),
  "num_paid_holidays_left": zod.number().optional().describe('有給残日数'),
  "num_paid_holidays_and_hours_left": zod.object({
  "days": zod.number().optional().describe('日数 0.5は半休を表す'),
  "hours": zod.number().optional().describe('時間数')
}).optional(),
  "num_substitute_holidays_used": zod.number().optional().describe('振替休日の使用日数'),
  "num_compensatory_holidays_used": zod.number().optional().describe('代休の使用日数'),
  "num_special_holidays_used": zod.number().optional().describe('特別休暇の使用日数'),
  "num_special_holidays_and_hours_used": zod.object({
  "days": zod.number().optional().describe('日数 0.5は半休を表す'),
  "hours": zod.number().optional().describe('時間数')
}).optional(),
  "total_lateness_and_early_leaving_mins": zod.number().optional().describe('遅刻早退時間（分）'),
  "multi_hourly_wages": zod.array(zod.object({
  "name": zod.string().optional().describe('時給名'),
  "total_normal_time_mins": zod.number().optional().describe('所定内労働時間（分）')
})).optional().describe('複数時給の労働時間の内訳（複数時給を設定している従業員のみ）'),
  "work_records": zod.array(zod.union([zod.object({
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "work_record_segments": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('出退勤のリスト\n  - 登録されている全ての出退勤時間のリストを返します。'),
  "clock_in_at": zod.string().datetime({}).nullish().describe('出勤時刻\n  - 出勤時刻を返します。出退勤が複数登録されている場合は、最初の出退勤の出勤時間を返します。'),
  "clock_out_at": zod.string().datetime({}).nullish().describe('退勤時刻\n  - 退勤時刻を返します。出退勤が複数登録されている場合は、最後の出退勤の退勤時間を返します。'),
  "date": zod.string().datetime({}).optional().describe('対象日付'),
  "day_pattern": zod.enum(['normal_day', 'prescribed_holiday', 'legal_holiday']).optional().describe('勤務パターン\n- normal_day: 所定労働日\n- prescribed_holiday: 所定休日\n- legal_holiday: 法定休日'),
  "schedule_pattern": zod.enum(['', 'substitute_holiday_work', 'substitute_holiday', 'compensatory_holiday_work', 'compensatory_holiday', 'special_holiday']).optional().describe('スケジュールパターン\n- substitute_holiday_work: 振替出勤\n- substitute_holiday: 振替休日\n- compensatory_holiday_work: 代休出勤\n- compensatory_holiday: 代休\n- special_holiday: 特別休暇'),
  "early_leaving_mins": zod.number().optional().describe('早退分の時間（分単位）'),
  "half_special_holiday_mins": zod.number().optional().describe('特別休暇の半休を利用した時間（分単位）'),
  "hourly_special_holiday_mins": zod.number().optional().describe('特別休暇の時間休を利用した時間（分単位）'),
  "is_absence": zod.boolean().optional().describe('欠勤かどうか'),
  "is_editable": zod.boolean().optional().describe('勤怠データが編集可能かどうか'),
  "lateness_mins": zod.number().optional().describe('遅刻分の時間（分単位）'),
  "normal_work_clock_in_at": zod.string().datetime({}).nullish().describe('所定労働開始時刻'),
  "normal_work_clock_out_at": zod.string().datetime({}).nullish().describe('所定労働終了時刻'),
  "normal_work_mins": zod.number().optional().describe('所定労働時間'),
  "note": zod.string().max(getEmployeeWorkRecordSummaryResponseWorkRecordsItemNoteMax).optional().describe('勤怠メモ'),
  "paid_holidays": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning_off', 'afternoon_off', 'hourly']).describe('有給休暇の種別取得単位（full:全休、half:半休、morning_off:午前休、 afternoon_off:午後休、hourly:時間休）'),
  "mins": zod.number().describe('年次有給休暇の休暇時間（分単位）'),
  "days": zod.number().describe('年次有給休暇の消化日数（全休：1, 半日単位：0.5, 時間休：0）')
})).optional().describe('年次有給休暇の実績'),
  "special_holiday": zod.number().optional().describe('この日に対する特別休暇取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_special_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_special_holiday_minsを参照してください。'),
  "special_holiday_setting_id": zod.number().nullish().describe('特別休暇設定ID'),
  "use_attendance_deduction": zod.boolean().optional().describe('欠勤・遅刻・早退を控除対象時間に算入するかどうか'),
  "use_default_work_pattern": zod.boolean().optional().describe('デフォルトの勤務時間設定を使っているかどうか'),
  "use_half_compensatory_holiday": zod.boolean().optional().describe('代休の半休を利用したかどうか'),
  "total_overtime_work_mins": zod.number().optional().describe('時間外労働時間（分）（Webの勤怠登録画面にて詳細項目の「勤務時間の長さを自動で計算しない」にチェックを入れた場合0が返却されます。時間外労働時間はtotal_overtime_except_normal_work_minsを参照してください。）'),
  "total_holiday_work_mins": zod.number().optional().describe('休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().optional().describe('深夜労働時間（分）'),
  "not_auto_calc_work_time": zod.boolean().optional().describe('勤怠登録時に勤務時間の長さを自動で計算しないかどうか'),
  "total_excess_statutory_work_mins": zod.number().optional().describe('法定内残業時間（分）'),
  "total_latenight_excess_statutory_work_mins": zod.number().optional().describe('深夜の法定内残業時間（分）'),
  "total_overtime_except_normal_work_mins": zod.number().optional().describe('所定外法定外労働時間（分）'),
  "total_latenight_overtime_except_normal_work_min": zod.number().optional().describe('深夜の所定外法定外労働時間（分）')
}),zod.object({
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "work_record_segments": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('出退勤のリスト\n  - 登録されている全ての出退勤時間のリストを返します。'),
  "clock_in_at": zod.string().datetime({}).nullish().describe('出勤時刻\n  - 出勤時刻を返します。出退勤が複数登録されている場合は、最初の出退勤の出勤時間を返します。'),
  "clock_out_at": zod.string().datetime({}).nullish().describe('退勤時刻\n  - 退勤時刻を返します。出退勤が複数登録されている場合は、最後の出退勤の退勤時間を返します。'),
  "date": zod.string().datetime({}).optional().describe('対象日付'),
  "day_pattern": zod.enum(['normal_day', 'prescribed_holiday', 'legal_holiday']).optional().describe('勤務パターン\n- normal_day: 所定労働日\n- prescribed_holiday: 所定休日\n- legal_holiday: 法定休日'),
  "schedule_pattern": zod.enum(['', 'substitute_holiday_work', 'substitute_holiday', 'compensatory_holiday_work', 'compensatory_holiday', 'special_holiday']).optional().describe('スケジュールパターン\n- substitute_holiday_work: 振替出勤\n- substitute_holiday: 振替休日\n- compensatory_holiday_work: 代休出勤\n- compensatory_holiday: 代休\n- special_holiday: 特別休暇'),
  "early_leaving_mins": zod.number().optional().describe('早退分の時間（分単位）'),
  "half_paid_holiday_mins": zod.number().optional().describe('[deprecated] 有給休暇の半休を利用した時間（分単位）※ 削除予定のため paid_holidays を参照してください'),
  "half_special_holiday_mins": zod.number().optional().describe('特別休暇の半休を利用した時間（分単位）'),
  "hourly_paid_holiday_mins": zod.number().optional().describe('[deprecated] 有給休暇の時間休を利用した時間（分単位）※ 削除予定のため paid_holidays を参照してください'),
  "hourly_special_holiday_mins": zod.number().optional().describe('特別休暇の時間休を利用した時間（分単位）'),
  "is_absence": zod.boolean().optional().describe('欠勤かどうか'),
  "is_editable": zod.boolean().optional().describe('勤怠データが編集可能かどうか'),
  "lateness_mins": zod.number().optional().describe('遅刻分の時間（分単位）'),
  "normal_work_clock_in_at": zod.string().datetime({}).nullish().describe('所定労働開始時刻'),
  "normal_work_clock_out_at": zod.string().datetime({}).nullish().describe('所定労働終了時刻'),
  "normal_work_mins": zod.number().optional().describe('所定労働時間'),
  "note": zod.string().max(getEmployeeWorkRecordSummaryResponseWorkRecordsItemNoteMaxOne).optional().describe('勤怠メモ'),
  "paid_holiday": zod.number().optional().describe('[deprecated] この日に対する有給取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_paid_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_paid_holiday_minsを参照してください。※ 削除予定のため paid_holidays を参照してください'),
  "special_holiday": zod.number().optional().describe('この日に対する特別休暇取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_special_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_special_holiday_minsを参照してください。'),
  "special_holiday_setting_id": zod.number().nullish().describe('特別休暇設定ID'),
  "use_attendance_deduction": zod.boolean().optional().describe('欠勤・遅刻・早退を控除対象時間に算入するかどうか'),
  "use_default_work_pattern": zod.boolean().optional().describe('デフォルトの勤務時間設定を使っているかどうか'),
  "use_half_compensatory_holiday": zod.boolean().optional().describe('代休の半休を利用したかどうか'),
  "total_overtime_work_mins": zod.number().optional().describe('時間外労働時間（分）（Webの勤怠登録画面にて詳細項目の「勤務時間の長さを自動で計算しない」にチェックを入れた場合0が返却されます。時間外労働時間はtotal_overtime_except_normal_work_minsを参照してください。）'),
  "total_holiday_work_mins": zod.number().optional().describe('休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().optional().describe('深夜労働時間（分）'),
  "not_auto_calc_work_time": zod.boolean().optional().describe('勤怠登録時に勤務時間の長さを自動で計算しないかどうか'),
  "total_excess_statutory_work_mins": zod.number().optional().describe('法定内残業時間（分）'),
  "total_latenight_excess_statutory_work_mins": zod.number().optional().describe('深夜の法定内残業時間（分）'),
  "total_overtime_except_normal_work_mins": zod.number().optional().describe('所定外法定外労働時間（分）'),
  "total_latenight_overtime_except_normal_work_min": zod.number().optional().describe('深夜の所定外法定外労働時間（分）')
})])).optional().describe('日々の勤怠情報'),
  "total_shortage_work_mins": zod.number().nullish().describe('不足時間（分）'),
  "total_deemed_paid_excess_statutory_work_mins": zod.number().nullish().describe('みなし外の法定内残業時間（分）'),
  "total_deemed_paid_overtime_except_normal_work_mins": zod.number().nullish().describe('みなし外の時間外労働時間（分）')
})


export const updateEmployeeWorkRecordSummaryPathEmployeeIdMax = 2147483647;
export const updateEmployeeWorkRecordSummaryPathYearMin = 2000;

export const updateEmployeeWorkRecordSummaryPathYearMax = 2100;
export const updateEmployeeWorkRecordSummaryPathMonthMax = 12;


export const updateEmployeeWorkRecordSummaryParams = zod.object({
  "employee_id": zod.number().min(1).max(updateEmployeeWorkRecordSummaryPathEmployeeIdMax).describe('従業員ID'),
  "year": zod.number().min(updateEmployeeWorkRecordSummaryPathYearMin).max(updateEmployeeWorkRecordSummaryPathYearMax).describe('更新対象年'),
  "month": zod.number().min(1).max(updateEmployeeWorkRecordSummaryPathMonthMax).describe('更新対象月')
})

export const updateEmployeeWorkRecordSummaryBodyCompanyIdMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyWorkDaysMin = 0;

export const updateEmployeeWorkRecordSummaryBodyWorkDaysMax = 31;
export const updateEmployeeWorkRecordSummaryBodyWorkDaysOnWeekdaysMin = 0;

export const updateEmployeeWorkRecordSummaryBodyWorkDaysOnWeekdaysMax = 31;
export const updateEmployeeWorkRecordSummaryBodyWorkDaysOnPrescribedHolidaysMin = 0;

export const updateEmployeeWorkRecordSummaryBodyWorkDaysOnPrescribedHolidaysMax = 31;
export const updateEmployeeWorkRecordSummaryBodyWorkDaysOnLegalHolidaysMin = 0;

export const updateEmployeeWorkRecordSummaryBodyWorkDaysOnLegalHolidaysMax = 31;
export const updateEmployeeWorkRecordSummaryBodyTotalWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalWorkMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalNormalWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalNormalWorkMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalExcessStatutoryWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalExcessStatutoryWorkMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalHolidayWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalHolidayWorkMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalLatenightWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalLatenightWorkMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalActualExcessStatutoryWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalActualExcessStatutoryWorkMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalOvertimeWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalOvertimeWorkMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyNumAbsencesMin = 0;

export const updateEmployeeWorkRecordSummaryBodyNumAbsencesMax = 31;
export const updateEmployeeWorkRecordSummaryBodyNumAbsencesForDeductionMin = 0;

export const updateEmployeeWorkRecordSummaryBodyNumAbsencesForDeductionMax = 9999.999;
export const updateEmployeeWorkRecordSummaryBodyTotalLatenessMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalLatenessMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalLatenessMinsForDeductionMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalLatenessMinsForDeductionMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalEarlyLeavingMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalEarlyLeavingMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalEarlyLeavingMinsForDeductionMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalEarlyLeavingMinsForDeductionMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyNumPaidHolidaysMin = 0;

export const updateEmployeeWorkRecordSummaryBodyNumPaidHolidaysMax = 31;
export const updateEmployeeWorkRecordSummaryBodyTotalShortageWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalShortageWorkMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalDeemedPaidExcessStatutoryWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalDeemedPaidExcessStatutoryWorkMinsMax = 2147483647;
export const updateEmployeeWorkRecordSummaryBodyTotalDeemedPaidOvertimeExceptNormalWorkMinsMin = 0;

export const updateEmployeeWorkRecordSummaryBodyTotalDeemedPaidOvertimeExceptNormalWorkMinsMax = 2147483647;


export const updateEmployeeWorkRecordSummaryBody = zod.object({
  "company_id": zod.number().min(1).max(updateEmployeeWorkRecordSummaryBodyCompanyIdMax).describe('事業所ID（必須）'),
  "work_days": zod.number().min(updateEmployeeWorkRecordSummaryBodyWorkDaysMin).max(updateEmployeeWorkRecordSummaryBodyWorkDaysMax).optional().describe('総勤務日数'),
  "work_days_on_weekdays": zod.number().min(updateEmployeeWorkRecordSummaryBodyWorkDaysOnWeekdaysMin).max(updateEmployeeWorkRecordSummaryBodyWorkDaysOnWeekdaysMax).optional().describe('所定労働日の勤務日数'),
  "work_days_on_prescribed_holidays": zod.number().min(updateEmployeeWorkRecordSummaryBodyWorkDaysOnPrescribedHolidaysMin).max(updateEmployeeWorkRecordSummaryBodyWorkDaysOnPrescribedHolidaysMax).optional().describe('所定休日の勤務日数'),
  "work_days_on_legal_holidays": zod.number().min(updateEmployeeWorkRecordSummaryBodyWorkDaysOnLegalHolidaysMin).max(updateEmployeeWorkRecordSummaryBodyWorkDaysOnLegalHolidaysMax).optional().describe('法定休日の勤務日数'),
  "total_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalWorkMinsMax).optional().describe('労働時間（分）'),
  "total_normal_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalNormalWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalNormalWorkMinsMax).optional().describe('所定労働時間（分）'),
  "total_excess_statutory_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalExcessStatutoryWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalExcessStatutoryWorkMinsMax).optional().describe('給与計算に用いられる法定内残業時間（分）'),
  "total_holiday_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalHolidayWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalHolidayWorkMinsMax).optional().describe('法定休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalLatenightWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalLatenightWorkMinsMax).optional().describe('深夜労働時間（分）'),
  "total_actual_excess_statutory_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalActualExcessStatutoryWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalActualExcessStatutoryWorkMinsMax).optional().describe('実労働時間ベースの法定内残業時間（分）'),
  "total_overtime_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalOvertimeWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalOvertimeWorkMinsMax).optional().describe('時間外労働時間（分）'),
  "num_absences": zod.number().min(updateEmployeeWorkRecordSummaryBodyNumAbsencesMin).max(updateEmployeeWorkRecordSummaryBodyNumAbsencesMax).optional().describe('欠勤日数'),
  "num_absences_for_deduction": zod.number().min(updateEmployeeWorkRecordSummaryBodyNumAbsencesForDeductionMin).max(updateEmployeeWorkRecordSummaryBodyNumAbsencesForDeductionMax).optional().describe('控除対象の欠勤日数\n\nフレックスタイム制の場合は、指定した値が反映されず無視されます。'),
  "total_lateness_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalLatenessMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalLatenessMinsMax).optional().describe('遅刻時間（分）'),
  "total_lateness_mins_for_deduction": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalLatenessMinsForDeductionMin).max(updateEmployeeWorkRecordSummaryBodyTotalLatenessMinsForDeductionMax).optional().describe('控除対象の遅刻時間（分）\n\nフレックスタイム制と裁量労働制の場合は、指定した値が反映されず無視されます。'),
  "total_early_leaving_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalEarlyLeavingMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalEarlyLeavingMinsMax).optional().describe('早退時間（分）'),
  "total_early_leaving_mins_for_deduction": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalEarlyLeavingMinsForDeductionMin).max(updateEmployeeWorkRecordSummaryBodyTotalEarlyLeavingMinsForDeductionMax).optional().describe('控除対象の早退時間（分）\n\nフレックスタイム制と裁量労働制の場合は、指定した値が反映されず無視されます。'),
  "num_paid_holidays": zod.number().min(updateEmployeeWorkRecordSummaryBodyNumPaidHolidaysMin).max(updateEmployeeWorkRecordSummaryBodyNumPaidHolidaysMax).optional().describe('有給取得日数'),
  "total_shortage_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalShortageWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalShortageWorkMinsMax).optional().describe('不足時間（分）（フレックスタイム制でのみ使用）'),
  "total_deemed_paid_excess_statutory_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalDeemedPaidExcessStatutoryWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalDeemedPaidExcessStatutoryWorkMinsMax).optional().describe('みなし外の法定内残業時間（分）（裁量労働制でのみ使用）'),
  "total_deemed_paid_overtime_except_normal_work_mins": zod.number().min(updateEmployeeWorkRecordSummaryBodyTotalDeemedPaidOvertimeExceptNormalWorkMinsMin).max(updateEmployeeWorkRecordSummaryBodyTotalDeemedPaidOvertimeExceptNormalWorkMinsMax).optional().describe('みなし外の時間外労働時間（分）（裁量労働制でのみ使用）')
})

export const updateEmployeeWorkRecordSummaryResponseMonthMax = 12;
export const updateEmployeeWorkRecordSummaryResponseWorkRecordsItemNoteMax = 255;
export const updateEmployeeWorkRecordSummaryResponseWorkRecordsItemNoteMaxOne = 255;


export const updateEmployeeWorkRecordSummaryResponse = zod.object({
  "year": zod.number().optional().describe('給与支払い年'),
  "month": zod.number().min(1).max(updateEmployeeWorkRecordSummaryResponseMonthMax).optional().describe('給与支払い月'),
  "start_date": zod.string().date().optional().describe('集計開始日'),
  "end_date": zod.string().date().optional().describe('集計終了日'),
  "work_days": zod.number().optional().describe('労働日数'),
  "total_work_mins": zod.number().optional().describe('総勤務時間（分）'),
  "total_normal_work_mins": zod.number().optional().describe('所定内労働時間（分）'),
  "total_excess_statutory_work_mins": zod.number().optional().describe('給与計算に用いられる法定内残業時間（分）'),
  "total_overtime_except_normal_work_mins": zod.number().optional().describe('所定外法定外労働時間'),
  "total_overtime_within_normal_work_mins": zod.number().optional().describe('所定内法定外労働時間（裁量労働制の場合はみなしベース）'),
  "total_holiday_work_mins": zod.number().optional().describe('法定休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().optional().describe('深夜労働allow(company)時間（分）'),
  "num_absences": zod.number().optional().describe('欠勤日数'),
  "num_paid_holidays": zod.number().optional().describe('有給取得日数'),
  "num_paid_holidays_and_hours": zod.object({
  "days": zod.number().optional().describe('日数 0.5は半休を表す'),
  "hours": zod.number().optional().describe('時間数')
}).optional(),
  "num_paid_holidays_left": zod.number().optional().describe('有給残日数'),
  "num_paid_holidays_and_hours_left": zod.object({
  "days": zod.number().optional().describe('日数 0.5は半休を表す'),
  "hours": zod.number().optional().describe('時間数')
}).optional(),
  "num_substitute_holidays_used": zod.number().optional().describe('振替休日の使用日数'),
  "num_compensatory_holidays_used": zod.number().optional().describe('代休の使用日数'),
  "num_special_holidays_used": zod.number().optional().describe('特別休暇の使用日数'),
  "num_special_holidays_and_hours_used": zod.object({
  "days": zod.number().optional().describe('日数 0.5は半休を表す'),
  "hours": zod.number().optional().describe('時間数')
}).optional(),
  "total_lateness_and_early_leaving_mins": zod.number().optional().describe('遅刻早退時間（分）'),
  "multi_hourly_wages": zod.array(zod.object({
  "name": zod.string().optional().describe('時給名'),
  "total_normal_time_mins": zod.number().optional().describe('所定内労働時間（分）')
})).optional().describe('複数時給の労働時間の内訳（複数時給を設定している従業員のみ）'),
  "work_records": zod.array(zod.union([zod.object({
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "work_record_segments": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('出退勤のリスト\n  - 登録されている全ての出退勤時間のリストを返します。'),
  "clock_in_at": zod.string().datetime({}).nullish().describe('出勤時刻\n  - 出勤時刻を返します。出退勤が複数登録されている場合は、最初の出退勤の出勤時間を返します。'),
  "clock_out_at": zod.string().datetime({}).nullish().describe('退勤時刻\n  - 退勤時刻を返します。出退勤が複数登録されている場合は、最後の出退勤の退勤時間を返します。'),
  "date": zod.string().datetime({}).optional().describe('対象日付'),
  "day_pattern": zod.enum(['normal_day', 'prescribed_holiday', 'legal_holiday']).optional().describe('勤務パターン\n- normal_day: 所定労働日\n- prescribed_holiday: 所定休日\n- legal_holiday: 法定休日'),
  "schedule_pattern": zod.enum(['', 'substitute_holiday_work', 'substitute_holiday', 'compensatory_holiday_work', 'compensatory_holiday', 'special_holiday']).optional().describe('スケジュールパターン\n- substitute_holiday_work: 振替出勤\n- substitute_holiday: 振替休日\n- compensatory_holiday_work: 代休出勤\n- compensatory_holiday: 代休\n- special_holiday: 特別休暇'),
  "early_leaving_mins": zod.number().optional().describe('早退分の時間（分単位）'),
  "half_special_holiday_mins": zod.number().optional().describe('特別休暇の半休を利用した時間（分単位）'),
  "hourly_special_holiday_mins": zod.number().optional().describe('特別休暇の時間休を利用した時間（分単位）'),
  "is_absence": zod.boolean().optional().describe('欠勤かどうか'),
  "is_editable": zod.boolean().optional().describe('勤怠データが編集可能かどうか'),
  "lateness_mins": zod.number().optional().describe('遅刻分の時間（分単位）'),
  "normal_work_clock_in_at": zod.string().datetime({}).nullish().describe('所定労働開始時刻'),
  "normal_work_clock_out_at": zod.string().datetime({}).nullish().describe('所定労働終了時刻'),
  "normal_work_mins": zod.number().optional().describe('所定労働時間'),
  "note": zod.string().max(updateEmployeeWorkRecordSummaryResponseWorkRecordsItemNoteMax).optional().describe('勤怠メモ'),
  "paid_holidays": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning_off', 'afternoon_off', 'hourly']).describe('有給休暇の種別取得単位（full:全休、half:半休、morning_off:午前休、 afternoon_off:午後休、hourly:時間休）'),
  "mins": zod.number().describe('年次有給休暇の休暇時間（分単位）'),
  "days": zod.number().describe('年次有給休暇の消化日数（全休：1, 半日単位：0.5, 時間休：0）')
})).optional().describe('年次有給休暇の実績'),
  "special_holiday": zod.number().optional().describe('この日に対する特別休暇取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_special_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_special_holiday_minsを参照してください。'),
  "special_holiday_setting_id": zod.number().nullish().describe('特別休暇設定ID'),
  "use_attendance_deduction": zod.boolean().optional().describe('欠勤・遅刻・早退を控除対象時間に算入するかどうか'),
  "use_default_work_pattern": zod.boolean().optional().describe('デフォルトの勤務時間設定を使っているかどうか'),
  "use_half_compensatory_holiday": zod.boolean().optional().describe('代休の半休を利用したかどうか'),
  "total_overtime_work_mins": zod.number().optional().describe('時間外労働時間（分）（Webの勤怠登録画面にて詳細項目の「勤務時間の長さを自動で計算しない」にチェックを入れた場合0が返却されます。時間外労働時間はtotal_overtime_except_normal_work_minsを参照してください。）'),
  "total_holiday_work_mins": zod.number().optional().describe('休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().optional().describe('深夜労働時間（分）'),
  "not_auto_calc_work_time": zod.boolean().optional().describe('勤怠登録時に勤務時間の長さを自動で計算しないかどうか'),
  "total_excess_statutory_work_mins": zod.number().optional().describe('法定内残業時間（分）'),
  "total_latenight_excess_statutory_work_mins": zod.number().optional().describe('深夜の法定内残業時間（分）'),
  "total_overtime_except_normal_work_mins": zod.number().optional().describe('所定外法定外労働時間（分）'),
  "total_latenight_overtime_except_normal_work_min": zod.number().optional().describe('深夜の所定外法定外労働時間（分）')
}),zod.object({
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "work_record_segments": zod.array(zod.object({
  "clock_in_at": zod.string().datetime({}).optional().describe('開始時刻'),
  "clock_out_at": zod.string().datetime({}).optional().describe('終了時刻')
})).optional().describe('出退勤のリスト\n  - 登録されている全ての出退勤時間のリストを返します。'),
  "clock_in_at": zod.string().datetime({}).nullish().describe('出勤時刻\n  - 出勤時刻を返します。出退勤が複数登録されている場合は、最初の出退勤の出勤時間を返します。'),
  "clock_out_at": zod.string().datetime({}).nullish().describe('退勤時刻\n  - 退勤時刻を返します。出退勤が複数登録されている場合は、最後の出退勤の退勤時間を返します。'),
  "date": zod.string().datetime({}).optional().describe('対象日付'),
  "day_pattern": zod.enum(['normal_day', 'prescribed_holiday', 'legal_holiday']).optional().describe('勤務パターン\n- normal_day: 所定労働日\n- prescribed_holiday: 所定休日\n- legal_holiday: 法定休日'),
  "schedule_pattern": zod.enum(['', 'substitute_holiday_work', 'substitute_holiday', 'compensatory_holiday_work', 'compensatory_holiday', 'special_holiday']).optional().describe('スケジュールパターン\n- substitute_holiday_work: 振替出勤\n- substitute_holiday: 振替休日\n- compensatory_holiday_work: 代休出勤\n- compensatory_holiday: 代休\n- special_holiday: 特別休暇'),
  "early_leaving_mins": zod.number().optional().describe('早退分の時間（分単位）'),
  "half_paid_holiday_mins": zod.number().optional().describe('[deprecated] 有給休暇の半休を利用した時間（分単位）※ 削除予定のため paid_holidays を参照してください'),
  "half_special_holiday_mins": zod.number().optional().describe('特別休暇の半休を利用した時間（分単位）'),
  "hourly_paid_holiday_mins": zod.number().optional().describe('[deprecated] 有給休暇の時間休を利用した時間（分単位）※ 削除予定のため paid_holidays を参照してください'),
  "hourly_special_holiday_mins": zod.number().optional().describe('特別休暇の時間休を利用した時間（分単位）'),
  "is_absence": zod.boolean().optional().describe('欠勤かどうか'),
  "is_editable": zod.boolean().optional().describe('勤怠データが編集可能かどうか'),
  "lateness_mins": zod.number().optional().describe('遅刻分の時間（分単位）'),
  "normal_work_clock_in_at": zod.string().datetime({}).nullish().describe('所定労働開始時刻'),
  "normal_work_clock_out_at": zod.string().datetime({}).nullish().describe('所定労働終了時刻'),
  "normal_work_mins": zod.number().optional().describe('所定労働時間'),
  "note": zod.string().max(updateEmployeeWorkRecordSummaryResponseWorkRecordsItemNoteMaxOne).optional().describe('勤怠メモ'),
  "paid_holiday": zod.number().optional().describe('[deprecated] この日に対する有給取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_paid_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_paid_holiday_minsを参照してください。※ 削除予定のため paid_holidays を参照してください'),
  "special_holiday": zod.number().optional().describe('この日に対する特別休暇取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_special_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_special_holiday_minsを参照してください。'),
  "special_holiday_setting_id": zod.number().nullish().describe('特別休暇設定ID'),
  "use_attendance_deduction": zod.boolean().optional().describe('欠勤・遅刻・早退を控除対象時間に算入するかどうか'),
  "use_default_work_pattern": zod.boolean().optional().describe('デフォルトの勤務時間設定を使っているかどうか'),
  "use_half_compensatory_holiday": zod.boolean().optional().describe('代休の半休を利用したかどうか'),
  "total_overtime_work_mins": zod.number().optional().describe('時間外労働時間（分）（Webの勤怠登録画面にて詳細項目の「勤務時間の長さを自動で計算しない」にチェックを入れた場合0が返却されます。時間外労働時間はtotal_overtime_except_normal_work_minsを参照してください。）'),
  "total_holiday_work_mins": zod.number().optional().describe('休日労働時間（分）'),
  "total_latenight_work_mins": zod.number().optional().describe('深夜労働時間（分）'),
  "not_auto_calc_work_time": zod.boolean().optional().describe('勤怠登録時に勤務時間の長さを自動で計算しないかどうか'),
  "total_excess_statutory_work_mins": zod.number().optional().describe('法定内残業時間（分）'),
  "total_latenight_excess_statutory_work_mins": zod.number().optional().describe('深夜の法定内残業時間（分）'),
  "total_overtime_except_normal_work_mins": zod.number().optional().describe('所定外法定外労働時間（分）'),
  "total_latenight_overtime_except_normal_work_min": zod.number().optional().describe('深夜の所定外法定外労働時間（分）')
})])).optional().describe('日々の勤怠情報'),
  "total_shortage_work_mins": zod.number().nullish().describe('不足時間（分）'),
  "total_deemed_paid_excess_statutory_work_mins": zod.number().nullish().describe('みなし外の法定内残業時間（分）'),
  "total_deemed_paid_overtime_except_normal_work_mins": zod.number().nullish().describe('みなし外の時間外労働時間（分）')
})


export const getEmployeeTimeClocksPathEmployeeIdMax = 2147483647;


export const getEmployeeTimeClocksParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeTimeClocksPathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeeTimeClocksQueryCompanyIdMax = 2147483647;
export const getEmployeeTimeClocksQueryFromDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getEmployeeTimeClocksQueryToDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getEmployeeTimeClocksQueryLimitMax = 100;
export const getEmployeeTimeClocksQueryOffsetMin = 0;

export const getEmployeeTimeClocksQueryOffsetMax = 2147483647;


export const getEmployeeTimeClocksQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeTimeClocksQueryCompanyIdMax).describe('事業所ID'),
  "from_date": zod.string().date().regex(getEmployeeTimeClocksQueryFromDateRegExp).optional().describe('取得する打刻期間の開始日(YYYY-MM-DD)(例:2018-08-01)(デフォルト: 当月の打刻開始日)'),
  "to_date": zod.string().date().regex(getEmployeeTimeClocksQueryToDateRegExp).optional().describe('取得する打刻期間の終了日(YYYY-MM-DD)(例:2018-08-31)(デフォルト: 当日)'),
  "limit": zod.number().min(1).max(getEmployeeTimeClocksQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getEmployeeTimeClocksQueryOffsetMin).max(getEmployeeTimeClocksQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getEmployeeTimeClocksResponseIdMax = 2147483647;
export const getEmployeeTimeClocksResponseNoteMax = 255;


export const getEmployeeTimeClocksResponseItem = zod.object({
  "id": zod.number().min(1).max(getEmployeeTimeClocksResponseIdMax).optional().describe('打刻ID'),
  "date": zod.string().date().optional().describe('打刻日'),
  "type": zod.enum(['clock_in', 'break_begin', 'break_end', 'clock_out']).optional().describe('打刻種別(clock_in:出勤, break_begin:休憩開始, break_end:休憩終了, clock_out:退勤)'),
  "datetime": zod.string().datetime({}).optional().describe('打刻時刻'),
  "original_datetime": zod.string().datetime({}).optional().describe('オリジナルの打刻時間'),
  "note": zod.string().max(getEmployeeTimeClocksResponseNoteMax).optional().describe('打刻メモ')
})
export const getEmployeeTimeClocksResponse = zod.array(getEmployeeTimeClocksResponseItem)


export const createEmployeeTimeClockPathEmployeeIdMax = 2147483647;


export const createEmployeeTimeClockParams = zod.object({
  "employee_id": zod.number().min(1).max(createEmployeeTimeClockPathEmployeeIdMax).describe('従業員ID')
})

export const createEmployeeTimeClockBodyCompanyIdMax = 2147483647;
export const createEmployeeTimeClockBodyBaseDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const createEmployeeTimeClockBodyDatetimeRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$');


export const createEmployeeTimeClockBody = zod.object({
  "company_id": zod.number().min(1).max(createEmployeeTimeClockBodyCompanyIdMax).describe('(required)'),
  "type": zod.enum(['clock_in', 'break_begin', 'break_end', 'clock_out']).describe('打刻種別（required）[clock_in:出勤, break_begin:休憩開始, break_end:休憩終了, clock_out:退勤]の何れか'),
  "base_date": zod.string().date().regex(createEmployeeTimeClockBodyBaseDateRegExp).optional().describe('打刻日。打刻が日をまたぐ場合に、前日の日付を指定します。(YYYY-MM-DD)(例:2018-07-31)'),
  "datetime": zod.string().datetime({}).regex(createEmployeeTimeClockBodyDatetimeRegExp).optional().describe('打刻時刻。(YYYY-MM-DD&nbsp;HH:MM:SS)(例:2018-07-31&nbsp;08:00:00)')
})


export const getEmployeeTimeClockPathEmployeeIdMax = 2147483647;
export const getEmployeeTimeClockPathIdMax = 2147483647;


export const getEmployeeTimeClockParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeTimeClockPathEmployeeIdMax).describe('従業員ID'),
  "id": zod.number().min(1).max(getEmployeeTimeClockPathIdMax).describe('打刻ID')
})

export const getEmployeeTimeClockQueryCompanyIdMax = 2147483647;


export const getEmployeeTimeClockQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeTimeClockQueryCompanyIdMax).describe('事業所ID')
})

export const getEmployeeTimeClockResponseEmployeeTimeClockIdMax = 2147483647;
export const getEmployeeTimeClockResponseEmployeeTimeClockNoteMax = 255;


export const getEmployeeTimeClockResponse = zod.object({
  "employee_time_clock": zod.object({
  "id": zod.number().min(1).max(getEmployeeTimeClockResponseEmployeeTimeClockIdMax).optional().describe('打刻ID'),
  "date": zod.string().date().optional().describe('打刻日'),
  "type": zod.enum(['clock_in', 'break_begin', 'break_end', 'clock_out']).optional().describe('打刻種別(clock_in:出勤, break_begin:休憩開始, break_end:休憩終了, clock_out:退勤)'),
  "datetime": zod.string().datetime({}).optional().describe('打刻時刻'),
  "original_datetime": zod.string().datetime({}).optional().describe('オリジナルの打刻時間'),
  "note": zod.string().max(getEmployeeTimeClockResponseEmployeeTimeClockNoteMax).optional().describe('打刻メモ')
}).optional()
})


export const getEmployeeTimeClocksAvailableTypesPathEmployeeIdMax = 2147483647;


export const getEmployeeTimeClocksAvailableTypesParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeeTimeClocksAvailableTypesPathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeeTimeClocksAvailableTypesQueryCompanyIdMax = 2147483647;
export const getEmployeeTimeClocksAvailableTypesQueryDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');


export const getEmployeeTimeClocksAvailableTypesQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeTimeClocksAvailableTypesQueryCompanyIdMax).describe('事業所ID'),
  "date": zod.string().date().regex(getEmployeeTimeClocksAvailableTypesQueryDateRegExp).optional().describe('従業員情報を取得したい年月日(YYYY-MM-DD)(例:2018-08-01)(デフォルト：当日)')
})

export const getEmployeeTimeClocksAvailableTypesResponse = zod.object({
  "available_types": zod.array(zod.enum(['clock_in', 'break_begin', 'break_end', 'clock_out'])).optional().describe('打刻可能種別(clock_in:出勤, break_begin:休憩開始, break_end:休憩終了, clock_out:退勤)'),
  "base_date": zod.string().date().optional().describe('打刻基準日')
})


export const getEmployeesSpecialHolidaysPathEmployeeIdMax = 2147483647;


export const getEmployeesSpecialHolidaysParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeesSpecialHolidaysPathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeesSpecialHolidaysQueryCompanyIdMax = 2147483647;
export const getEmployeesSpecialHolidaysQueryDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getEmployeesSpecialHolidaysQueryStartDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getEmployeesSpecialHolidaysQueryEndDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');


export const getEmployeesSpecialHolidaysQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeesSpecialHolidaysQueryCompanyIdMax).describe('事業所ID'),
  "date": zod.string().date().regex(getEmployeesSpecialHolidaysQueryDateRegExp).optional().describe('対象日'),
  "start_date": zod.string().date().regex(getEmployeesSpecialHolidaysQueryStartDateRegExp).optional().describe('対象開始日'),
  "end_date": zod.string().date().regex(getEmployeesSpecialHolidaysQueryEndDateRegExp).optional().describe('対象終了日')
})

export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemIdMax = 2147483647;
export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemCompanyIdMax = 2147483647;
export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemEmployeeIdMax = 2147483647;
export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemSpecialHolidaySettingIdMax = 2147483647;
export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemDaysMin = 0;

export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemDaysMax = 2147483647;
export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemUsedMin = 0;

export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemUsedMax = 999999999.9999;
export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemLeftMin = 0;

export const getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemLeftMax = 999999999.9999;


export const getEmployeesSpecialHolidaysResponse = zod.object({
  "employee_special_holidays": zod.array(zod.object({
  "id": zod.number().min(1).max(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemIdMax).optional().describe('特別休暇付与ID'),
  "company_id": zod.number().min(1).max(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemCompanyIdMax).optional().describe('事業所ID'),
  "employee_id": zod.number().min(1).max(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemEmployeeIdMax).optional().describe('従業員ID'),
  "special_holiday_setting_id": zod.number().min(1).max(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemSpecialHolidaySettingIdMax).optional().describe('特別休暇設定ID'),
  "name": zod.string().optional().describe('特別休暇名称'),
  "type_name": zod.string().optional().describe('特別休暇・休業休職種別名'),
  "paid_type": zod.enum(['paid', 'unpaid']).optional().describe('有給・無給区分（paid: 有給、unpaid: 無休）'),
  "attendance_rate_calc_type": zod.enum(['in_workdays', 'not_in_workdays', 'not_in_total_workdays']).optional().describe('出勤率計算方法（in_workdays: 出勤日数に含める、not_in_workdays: 出勤日数に含めない、not_in_total_workdays: 全労働日に含めない）'),
  "usage_day": zod.enum(['full', 'half', 'hour']).optional().describe('最小消化単位（full: 全休、half: 半休、hour: 時間休）'),
  "valid_date_from": zod.string().date().optional().describe('有効期間開始日(YYYY-MM-DD)(例:2023-01-01)'),
  "valid_date_to": zod.string().date().optional().describe('有効期間終了日(YYYY-MM-DD)(例:2023-01-31)'),
  "days": zod.number().min(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemDaysMin).max(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemDaysMax).optional().describe('付与日数'),
  "used": zod.number().min(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemUsedMin).max(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemUsedMax).optional().describe('使用数'),
  "num_days_and_hours_used": zod.object({
  "days": zod.number().optional().describe('日数'),
  "hours": zod.number().optional().describe('時間数')
}).optional().describe('使用日数・時間数'),
  "left": zod.number().min(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemLeftMin).max(getEmployeesSpecialHolidaysResponseEmployeeSpecialHolidaysItemLeftMax).optional().describe('残数'),
  "num_days_and_hours_left": zod.object({
  "days": zod.number().optional().describe('日数'),
  "hours": zod.number().optional().describe('時間数')
}).optional().describe('残日数・時間数')
})).optional()
})


export const getEmployeesAttendanceTagSummariesPathEmployeeIdMax = 2147483647;
export const getEmployeesAttendanceTagSummariesPathYearMin = 2000;

export const getEmployeesAttendanceTagSummariesPathYearMax = 2100;
export const getEmployeesAttendanceTagSummariesPathMonthMax = 12;


export const getEmployeesAttendanceTagSummariesParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeesAttendanceTagSummariesPathEmployeeIdMax).describe('従業員ID'),
  "year": zod.number().min(getEmployeesAttendanceTagSummariesPathYearMin).max(getEmployeesAttendanceTagSummariesPathYearMax).describe('勤怠タグサマリを取得したい年'),
  "month": zod.number().min(1).max(getEmployeesAttendanceTagSummariesPathMonthMax).describe('勤怠タグサマリを取得したい月')
})

export const getEmployeesAttendanceTagSummariesQueryCompanyIdMax = 2147483647;


export const getEmployeesAttendanceTagSummariesQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeesAttendanceTagSummariesQueryCompanyIdMax).describe('事業所ID')
})

export const getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagIdMax = 2147483647;
export const getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagCompanyIdMax = 2147483647;
export const getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagMaxAmountMax = 999;
export const getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAmountMin = 0;

export const getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAmountMax = 99999;


export const getEmployeesAttendanceTagSummariesResponse = zod.object({
  "employee_attendance_tag_summaries": zod.array(zod.object({
  "attendance_tag": zod.object({
  "id": zod.number().min(1).max(getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagIdMax).describe('勤怠タグID'),
  "company_id": zod.number().min(1).max(getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagCompanyIdMax).describe('事業所ID'),
  "name": zod.string().describe('勤怠タグ名称'),
  "description": zod.string().describe('勤怠タグ備考'),
  "max_amount": zod.number().min(1).max(getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagMaxAmountMax).describe('勤怠タグ回数上限'),
  "published": zod.boolean().describe('勤怠タグ公開ステータス'),
  "is_employee_usable": zod.boolean().describe('対象従業員が利用可能かどうか')
}),
  "amount": zod.number().min(getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAmountMin).max(getEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAmountMax).describe('勤怠タグ回数')
})).optional()
})


export const updateEmployeesAttendanceTagSummariesPathEmployeeIdMax = 2147483647;
export const updateEmployeesAttendanceTagSummariesPathYearMin = 2000;

export const updateEmployeesAttendanceTagSummariesPathYearMax = 2100;
export const updateEmployeesAttendanceTagSummariesPathMonthMax = 12;


export const updateEmployeesAttendanceTagSummariesParams = zod.object({
  "employee_id": zod.number().min(1).max(updateEmployeesAttendanceTagSummariesPathEmployeeIdMax).describe('従業員ID'),
  "year": zod.number().min(updateEmployeesAttendanceTagSummariesPathYearMin).max(updateEmployeesAttendanceTagSummariesPathYearMax).describe('勤怠タグサマリを更新したい年'),
  "month": zod.number().min(1).max(updateEmployeesAttendanceTagSummariesPathMonthMax).describe('勤怠タグサマリを更新したい月')
})

export const updateEmployeesAttendanceTagSummariesBodyCompanyIdMax = 2147483647;
export const updateEmployeesAttendanceTagSummariesBodyEmployeeAttendanceTagSummariesItemAttendanceTagIdMax = 2147483647;
export const updateEmployeesAttendanceTagSummariesBodyEmployeeAttendanceTagSummariesItemAmountMin = 0;

export const updateEmployeesAttendanceTagSummariesBodyEmployeeAttendanceTagSummariesItemAmountMax = 99999;


export const updateEmployeesAttendanceTagSummariesBody = zod.object({
  "company_id": zod.number().min(1).max(updateEmployeesAttendanceTagSummariesBodyCompanyIdMax).describe('事業所ID'),
  "employee_attendance_tag_summaries": zod.array(zod.object({
  "attendance_tag_id": zod.number().min(1).max(updateEmployeesAttendanceTagSummariesBodyEmployeeAttendanceTagSummariesItemAttendanceTagIdMax).describe('勤怠タグID'),
  "amount": zod.number().min(updateEmployeesAttendanceTagSummariesBodyEmployeeAttendanceTagSummariesItemAmountMin).max(updateEmployeesAttendanceTagSummariesBodyEmployeeAttendanceTagSummariesItemAmountMax).describe('勤怠タグ回数')
})).describe('更新対象の勤怠タグサマリのリスト')
})

export const updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagIdMax = 2147483647;
export const updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagCompanyIdMax = 2147483647;
export const updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagMaxAmountMax = 999;
export const updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAmountMin = 0;

export const updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAmountMax = 99999;


export const updateEmployeesAttendanceTagSummariesResponse = zod.object({
  "employee_attendance_tag_summaries": zod.array(zod.object({
  "attendance_tag": zod.object({
  "id": zod.number().min(1).max(updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagIdMax).describe('勤怠タグID'),
  "company_id": zod.number().min(1).max(updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagCompanyIdMax).describe('事業所ID'),
  "name": zod.string().describe('勤怠タグ名称'),
  "description": zod.string().describe('勤怠タグ備考'),
  "max_amount": zod.number().min(1).max(updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAttendanceTagMaxAmountMax).describe('勤怠タグ回数上限'),
  "published": zod.boolean().describe('勤怠タグ公開ステータス'),
  "is_employee_usable": zod.boolean().describe('対象従業員が利用可能かどうか')
}),
  "amount": zod.number().min(updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAmountMin).max(updateEmployeesAttendanceTagSummariesResponseEmployeeAttendanceTagSummariesItemAmountMax).describe('勤怠タグ回数')
})).optional()
})


export const getEmployeesAttendanceTagsPathEmployeeIdMax = 2147483647;


export const getEmployeesAttendanceTagsParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeesAttendanceTagsPathEmployeeIdMax).describe('従業員ID')
})

export const getEmployeesAttendanceTagsQueryCompanyIdMax = 2147483647;


export const getEmployeesAttendanceTagsQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeesAttendanceTagsQueryCompanyIdMax).describe('事業所ID')
})

export const getEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemIdMax = 2147483647;
export const getEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemCompanyIdMax = 2147483647;
export const getEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemMaxAmountMax = 999;


export const getEmployeesAttendanceTagsResponse = zod.object({
  "employee_attendance_tags": zod.array(zod.object({
  "id": zod.number().min(1).max(getEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemIdMax).describe('勤怠タグID'),
  "company_id": zod.number().min(1).max(getEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemCompanyIdMax).describe('事業所ID'),
  "name": zod.string().describe('勤怠タグ名称'),
  "description": zod.string().describe('勤怠タグ備考'),
  "max_amount": zod.number().min(1).max(getEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemMaxAmountMax).describe('勤怠タグ回数上限'),
  "published": zod.boolean().describe('勤怠タグ公開ステータス'),
  "is_employee_usable": zod.boolean().describe('対象従業員が利用可能かどうか')
})).optional()
})


export const getEmployeesAttendanceTagsByDatePathEmployeeIdMax = 2147483647;
export const getEmployeesAttendanceTagsByDatePathDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');


export const getEmployeesAttendanceTagsByDateParams = zod.object({
  "employee_id": zod.number().min(1).max(getEmployeesAttendanceTagsByDatePathEmployeeIdMax).describe('従業員ID'),
  "date": zod.string().date().regex(getEmployeesAttendanceTagsByDatePathDateRegExp).describe('対象年月日(YYYY-MM-DD)(例:2018-08-01)')
})

export const getEmployeesAttendanceTagsByDateQueryCompanyIdMax = 2147483647;


export const getEmployeesAttendanceTagsByDateQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeesAttendanceTagsByDateQueryCompanyIdMax).describe('事業所ID')
})

export const getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAttendanceTagIdMax = 2147483647;
export const getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAttendanceTagCompanyIdMax = 2147483647;
export const getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAttendanceTagMaxAmountMax = 999;
export const getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAmountMin = 0;

export const getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAmountMax = 999;


export const getEmployeesAttendanceTagsByDateResponse = zod.object({
  "employee_attendance_tags": zod.array(zod.object({
  "attendance_tag": zod.object({
  "id": zod.number().min(1).max(getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAttendanceTagIdMax).describe('勤怠タグID'),
  "company_id": zod.number().min(1).max(getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAttendanceTagCompanyIdMax).describe('事業所ID'),
  "name": zod.string().describe('勤怠タグ名称'),
  "description": zod.string().describe('勤怠タグ備考'),
  "max_amount": zod.number().min(1).max(getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAttendanceTagMaxAmountMax).describe('勤怠タグ回数上限'),
  "published": zod.boolean().describe('勤怠タグ公開ステータス'),
  "is_employee_usable": zod.boolean().describe('対象従業員が利用可能かどうか')
}),
  "amount": zod.number().min(getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAmountMin).max(getEmployeesAttendanceTagsByDateResponseEmployeeAttendanceTagsItemAmountMax).describe('勤怠タグ回数')
})).optional()
})


export const updateEmployeesAttendanceTagsPathEmployeeIdMax = 2147483647;
export const updateEmployeesAttendanceTagsPathDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');


export const updateEmployeesAttendanceTagsParams = zod.object({
  "employee_id": zod.number().min(1).max(updateEmployeesAttendanceTagsPathEmployeeIdMax).describe('従業員ID'),
  "date": zod.string().date().regex(updateEmployeesAttendanceTagsPathDateRegExp).describe('更新対象年月日(YYYY-MM-DD)(例:2018-08-01)')
})

export const updateEmployeesAttendanceTagsBodyCompanyIdMax = 2147483647;
export const updateEmployeesAttendanceTagsBodyEmployeeAttendanceTagsItemAttendanceTagIdMax = 2147483647;
export const updateEmployeesAttendanceTagsBodyEmployeeAttendanceTagsItemAmountMin = 0;

export const updateEmployeesAttendanceTagsBodyEmployeeAttendanceTagsItemAmountMax = 999;


export const updateEmployeesAttendanceTagsBody = zod.object({
  "company_id": zod.number().min(1).max(updateEmployeesAttendanceTagsBodyCompanyIdMax).describe('事業所ID'),
  "employee_attendance_tags": zod.array(zod.object({
  "attendance_tag_id": zod.number().min(1).max(updateEmployeesAttendanceTagsBodyEmployeeAttendanceTagsItemAttendanceTagIdMax).describe('勤怠タグID'),
  "amount": zod.number().min(updateEmployeesAttendanceTagsBodyEmployeeAttendanceTagsItemAmountMin).max(updateEmployeesAttendanceTagsBodyEmployeeAttendanceTagsItemAmountMax).describe('勤怠タグ回数')
})).describe('更新対象の勤怠タグのリスト')
})

export const updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAttendanceTagIdMax = 2147483647;
export const updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAttendanceTagCompanyIdMax = 2147483647;
export const updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAttendanceTagMaxAmountMax = 999;
export const updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAmountMin = 0;

export const updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAmountMax = 999;


export const updateEmployeesAttendanceTagsResponse = zod.object({
  "employee_attendance_tags": zod.array(zod.object({
  "attendance_tag": zod.object({
  "id": zod.number().min(1).max(updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAttendanceTagIdMax).describe('勤怠タグID'),
  "company_id": zod.number().min(1).max(updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAttendanceTagCompanyIdMax).describe('事業所ID'),
  "name": zod.string().describe('勤怠タグ名称'),
  "description": zod.string().describe('勤怠タグ備考'),
  "max_amount": zod.number().min(1).max(updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAttendanceTagMaxAmountMax).describe('勤怠タグ回数上限'),
  "published": zod.boolean().describe('勤怠タグ公開ステータス'),
  "is_employee_usable": zod.boolean().describe('対象従業員が利用可能かどうか')
}),
  "amount": zod.number().min(updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAmountMin).max(updateEmployeesAttendanceTagsResponseEmployeeAttendanceTagsItemAmountMax).describe('勤怠タグ回数')
})).optional()
})


export const getSalariesEmployeePayrollStatementsQueryCompanyIdMax = 2147483647;
export const getSalariesEmployeePayrollStatementsQueryYearMin = 2000;

export const getSalariesEmployeePayrollStatementsQueryYearMax = 2100;
export const getSalariesEmployeePayrollStatementsQueryMonthMax = 12;
export const getSalariesEmployeePayrollStatementsQueryLimitMax = 100;
export const getSalariesEmployeePayrollStatementsQueryOffsetMin = 0;

export const getSalariesEmployeePayrollStatementsQueryOffsetMax = 2147483647;


export const getSalariesEmployeePayrollStatementsQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getSalariesEmployeePayrollStatementsQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getSalariesEmployeePayrollStatementsQueryYearMin).max(getSalariesEmployeePayrollStatementsQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getSalariesEmployeePayrollStatementsQueryMonthMax).describe('従業員情報を取得したい月'),
  "limit": zod.number().min(1).max(getSalariesEmployeePayrollStatementsQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getSalariesEmployeePayrollStatementsQueryOffsetMin).max(getSalariesEmployeePayrollStatementsQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getSalariesEmployeePayrollStatementsResponseTotalCountMin = 0;

export const getSalariesEmployeePayrollStatementsResponseTotalCountMax = 2147483647;


export const getSalariesEmployeePayrollStatementsResponse = zod.object({
  "employee_payroll_statements": zod.array(zod.object({
  "id": zod.number().optional().describe('給与明細ID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "employee_name": zod.string().optional().describe('従業員の姓名'),
  "employee_display_name": zod.string().optional().describe('従業員の表示名'),
  "employee_num": zod.string().nullish().describe('従業員番号'),
  "pay_date": zod.string().date().optional().describe('支払日'),
  "start_date": zod.string().date().optional().describe('給与計算開始日（固定給）'),
  "closing_date": zod.string().date().optional().describe('給与計算締日（固定給）'),
  "variable_pay_start_date": zod.string().date().optional().describe('給与計算開始日（変動給） 残業手当、遅刻早退・欠勤などの計算に使われる期間'),
  "variable_pay_closing_date": zod.string().date().optional().describe('給与計算締日（変動給）'),
  "fixed": zod.boolean().optional().describe('給与明細が確定されているかどうか'),
  "calc_status": zod.string().optional().describe('計算状況ステータス calculating: 計算中, calculated: 計算完了, overwritten: 直接編集, imported: インポート, error: エラー'),
  "calculated_at": zod.string().datetime({}).nullish().describe('計算状況ステータスの更新日'),
  "pay_calc_type": zod.enum(['monthly', 'daily', 'hourly', '']).optional().describe('給与形態 monthly: 月給, daily: 日給, hourly: 時給, (空文字列): 計算中'),
  "board_member_remuneration_amount": zod.string().nullish().describe('役員報酬'),
  "basic_pay_amount": zod.string().nullish().describe('基本給'),
  "work_days": zod.string().nullish().describe('労働日数'),
  "normal_work_time": zod.string().nullish().describe('労働時間のうち、所定労働時間に該当するもの'),
  "normal_work_days": zod.string().nullish().describe('所定労働出勤日数'),
  "work_mins_by_paid_holiday": zod.string().nullish().describe('有給休暇時間数'),
  "num_paid_holidays": zod.string().nullish().describe('有給日数'),
  "is_board_member": zod.boolean().optional().describe('役員かどうか'),
  "total_attendance_deduction_amount": zod.string().nullish().describe('勤怠控除額合計'),
  "total_allowance_amount": zod.string().nullish().describe('支給手当額合計'),
  "total_deduction_amount": zod.string().nullish().describe('控除額合計'),
  "total_deduction_employer_share": zod.string().nullish().describe('法定福利費の会社負担分の合計（健康保険、厚生年金、雇用保険等）'),
  "net_payment_amount": zod.string().nullish().describe('差引支給額(手取り額)'),
  "gross_payment_amount": zod.string().nullish().describe('総支給額(額面)'),
  "total_worked_days_count": zod.string().nullish().describe('平日と休日の合計労働日数（日給用）'),
  "total_taxable_payment_amount": zod.string().nullish().describe('課税対象支給額'),
  "total_expense_amount": zod.string().nullish().describe('総経費精算額'),
  "total_transfer_amount": zod.string().nullish().describe('総振込額'),
  "total_annual_payment_amount": zod.string().nullish().describe('課税支給累計額'),
  "payments": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('支給項目（基本給、残業代、通勤手当等）'),
  "deductions": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('控除項目（健康保険、厚生年金、雇用保険等）'),
  "deductions_employer_share": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('法定福利費の会社負担分（健康保険、厚生年金、雇用保険等）'),
  "attendances": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "time": zod.string().optional().describe('時間'),
  "amount": zod.string().optional().describe('控除額')
})).optional().describe('勤怠控除項目（遅刻早退控除、欠勤控除等）'),
  "overtime_pays": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "time": zod.string().nullish().describe('時間(単位: 分)。固定残業代の場合、nullになります。'),
  "amount": zod.string().optional().describe('手当金額'),
  "code": zod.string().nullish().describe('コード（事業所毎に設定可能な小文字英数最大10桁のコード）')
})).nullish().describe('時間外労働項目(法定内残業、時間外労働、休日労働、深夜労働等)'),
  "remark": zod.string().nullish().describe('備考')
})).optional(),
  "total_count": zod.number().min(getSalariesEmployeePayrollStatementsResponseTotalCountMin).max(getSalariesEmployeePayrollStatementsResponseTotalCountMax).optional().describe('指定した年月に支払いのある給与明細の合計件数')
})


export const getSalariesEmployeePayrollStatementPathEmployeeIdMax = 2147483647;


export const getSalariesEmployeePayrollStatementParams = zod.object({
  "employee_id": zod.number().min(1).max(getSalariesEmployeePayrollStatementPathEmployeeIdMax).describe('従業員ID')
})

export const getSalariesEmployeePayrollStatementQueryCompanyIdMax = 2147483647;
export const getSalariesEmployeePayrollStatementQueryYearMin = 2000;

export const getSalariesEmployeePayrollStatementQueryYearMax = 2100;
export const getSalariesEmployeePayrollStatementQueryMonthMax = 12;


export const getSalariesEmployeePayrollStatementQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getSalariesEmployeePayrollStatementQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getSalariesEmployeePayrollStatementQueryYearMin).max(getSalariesEmployeePayrollStatementQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getSalariesEmployeePayrollStatementQueryMonthMax).describe('従業員情報を取得したい月')
})

export const getSalariesEmployeePayrollStatementResponse = zod.object({
  "employee_payroll_statement": zod.object({
  "id": zod.number().optional().describe('給与明細ID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "employee_name": zod.string().optional().describe('従業員の姓名'),
  "employee_display_name": zod.string().optional().describe('従業員の表示名'),
  "employee_num": zod.string().nullish().describe('従業員番号'),
  "pay_date": zod.string().date().optional().describe('支払日'),
  "start_date": zod.string().date().optional().describe('給与計算開始日（固定給）'),
  "closing_date": zod.string().date().optional().describe('給与計算締日（固定給）'),
  "variable_pay_start_date": zod.string().date().optional().describe('給与計算開始日（変動給） 残業手当、遅刻早退・欠勤などの計算に使われる期間'),
  "variable_pay_closing_date": zod.string().date().optional().describe('給与計算締日（変動給）'),
  "fixed": zod.boolean().optional().describe('給与明細が確定されているかどうか'),
  "calc_status": zod.string().optional().describe('計算状況ステータス calculating: 計算中, calculated: 計算完了, overwritten: 直接編集, imported: インポート, error: エラー'),
  "calculated_at": zod.string().datetime({}).nullish().describe('計算状況ステータスの更新日'),
  "pay_calc_type": zod.enum(['monthly', 'daily', 'hourly', '']).optional().describe('給与形態 monthly: 月給, daily: 日給, hourly: 時給, (空文字列): 計算中'),
  "board_member_remuneration_amount": zod.string().nullish().describe('役員報酬'),
  "basic_pay_amount": zod.string().nullish().describe('基本給'),
  "work_days": zod.string().nullish().describe('労働日数'),
  "normal_work_time": zod.string().nullish().describe('労働時間のうち、所定労働時間に該当するもの'),
  "normal_work_days": zod.string().nullish().describe('所定労働出勤日数'),
  "work_mins_by_paid_holiday": zod.string().nullish().describe('有給休暇時間数'),
  "num_paid_holidays": zod.string().nullish().describe('有給日数'),
  "is_board_member": zod.boolean().optional().describe('役員かどうか'),
  "total_attendance_deduction_amount": zod.string().nullish().describe('勤怠控除額合計'),
  "total_allowance_amount": zod.string().nullish().describe('支給手当額合計'),
  "total_deduction_amount": zod.string().nullish().describe('控除額合計'),
  "total_deduction_employer_share": zod.string().nullish().describe('法定福利費の会社負担分の合計（健康保険、厚生年金、雇用保険等）'),
  "net_payment_amount": zod.string().nullish().describe('差引支給額(手取り額)'),
  "gross_payment_amount": zod.string().nullish().describe('総支給額(額面)'),
  "total_worked_days_count": zod.string().nullish().describe('平日と休日の合計労働日数（日給用）'),
  "total_taxable_payment_amount": zod.string().nullish().describe('課税対象支給額'),
  "total_expense_amount": zod.string().nullish().describe('総経費精算額'),
  "total_transfer_amount": zod.string().nullish().describe('総振込額'),
  "total_annual_payment_amount": zod.string().nullish().describe('課税支給累計額'),
  "payments": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('支給項目（基本給、残業代、通勤手当等）'),
  "deductions": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('控除項目（健康保険、厚生年金、雇用保険等）'),
  "deductions_employer_share": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('法定福利費の会社負担分（健康保険、厚生年金、雇用保険等）'),
  "attendances": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "time": zod.string().optional().describe('時間'),
  "amount": zod.string().optional().describe('控除額')
})).optional().describe('勤怠控除項目（遅刻早退控除、欠勤控除等）'),
  "overtime_pays": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "time": zod.string().nullish().describe('時間(単位: 分)。固定残業代の場合、nullになります。'),
  "amount": zod.string().optional().describe('手当金額'),
  "code": zod.string().nullish().describe('コード（事業所毎に設定可能な小文字英数最大10桁のコード）')
})).nullish().describe('時間外労働項目(法定内残業、時間外労働、休日労働、深夜労働等)'),
  "remark": zod.string().nullish().describe('備考')
}).optional()
})


export const getBonusesEmployeePayrollStatementsQueryCompanyIdMax = 2147483647;
export const getBonusesEmployeePayrollStatementsQueryYearMin = 2000;

export const getBonusesEmployeePayrollStatementsQueryYearMax = 2100;
export const getBonusesEmployeePayrollStatementsQueryMonthMax = 12;
export const getBonusesEmployeePayrollStatementsQueryLimitMax = 100;
export const getBonusesEmployeePayrollStatementsQueryOffsetMin = 0;

export const getBonusesEmployeePayrollStatementsQueryOffsetMax = 2147483647;


export const getBonusesEmployeePayrollStatementsQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getBonusesEmployeePayrollStatementsQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getBonusesEmployeePayrollStatementsQueryYearMin).max(getBonusesEmployeePayrollStatementsQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getBonusesEmployeePayrollStatementsQueryMonthMax).describe('従業員情報を取得したい月'),
  "limit": zod.number().min(1).max(getBonusesEmployeePayrollStatementsQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getBonusesEmployeePayrollStatementsQueryOffsetMin).max(getBonusesEmployeePayrollStatementsQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getBonusesEmployeePayrollStatementsResponse = zod.object({
  "employee_payroll_statements": zod.array(zod.object({
  "id": zod.number().optional().describe('賞与明細ID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "employee_name": zod.string().optional().describe('従業員の姓名'),
  "employee_display_name": zod.string().optional().describe('従業員の表示名'),
  "employee_num": zod.string().nullish().describe('従業員番号'),
  "closing_date": zod.string().date().optional().describe('確定日'),
  "pay_date": zod.string().date().optional().describe('支払日'),
  "fixed": zod.boolean().optional().describe('賞与明細が確定されているかどうか'),
  "calc_status": zod.string().optional().describe('計算状況ステータス calculating: 計算中, calculated: 計算完了, error: エラー'),
  "calculated_at": zod.string().datetime({}).nullish().describe('計算状況ステータスの更新日'),
  "bonus_amount": zod.string().nullish().describe('賞与額'),
  "total_allowance_amount": zod.string().nullish().describe('手当額合計'),
  "total_deduction_amount": zod.string().nullish().describe('控除額合計'),
  "net_payment_amount": zod.string().nullish().describe('差引支給額(手取り額)'),
  "gross_payment_amount": zod.string().nullish().describe('総支給額(額面)'),
  "total_taxable_payment_amount": zod.string().nullish().describe('課税対象支給額'),
  "allowances": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('手当'),
  "deductions": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('控除項目（所得税、社会保険料等）'),
  "remark": zod.string().optional().describe('備考')
})).optional(),
  "total_count": zod.number().optional().describe('合計件数')
})


export const getBonusesEmployeePayrollStatementPathEmployeeIdMax = 2147483647;


export const getBonusesEmployeePayrollStatementParams = zod.object({
  "employee_id": zod.number().min(1).max(getBonusesEmployeePayrollStatementPathEmployeeIdMax).describe('従業員ID')
})

export const getBonusesEmployeePayrollStatementQueryCompanyIdMax = 2147483647;
export const getBonusesEmployeePayrollStatementQueryYearMin = 2000;

export const getBonusesEmployeePayrollStatementQueryYearMax = 2100;
export const getBonusesEmployeePayrollStatementQueryMonthMax = 12;


export const getBonusesEmployeePayrollStatementQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getBonusesEmployeePayrollStatementQueryCompanyIdMax).describe('事業所ID'),
  "year": zod.number().min(getBonusesEmployeePayrollStatementQueryYearMin).max(getBonusesEmployeePayrollStatementQueryYearMax).describe('従業員情報を取得したい年'),
  "month": zod.number().min(1).max(getBonusesEmployeePayrollStatementQueryMonthMax).describe('従業員情報を取得したい月')
})

export const getBonusesEmployeePayrollStatementResponse = zod.object({
  "employee_payroll_statement": zod.object({
  "id": zod.number().optional().describe('賞与明細ID'),
  "company_id": zod.number().optional().describe('事業所ID'),
  "employee_id": zod.number().optional().describe('従業員ID'),
  "employee_name": zod.string().optional().describe('従業員の姓名'),
  "employee_display_name": zod.string().optional().describe('従業員の表示名'),
  "employee_num": zod.string().nullish().describe('従業員番号'),
  "closing_date": zod.string().date().optional().describe('確定日'),
  "pay_date": zod.string().date().optional().describe('支払日'),
  "fixed": zod.boolean().optional().describe('賞与明細が確定されているかどうか'),
  "calc_status": zod.string().optional().describe('計算状況ステータス calculating: 計算中, calculated: 計算完了, error: エラー'),
  "calculated_at": zod.string().datetime({}).nullish().describe('計算状況ステータスの更新日'),
  "bonus_amount": zod.string().nullish().describe('賞与額'),
  "total_allowance_amount": zod.string().nullish().describe('手当額合計'),
  "total_deduction_amount": zod.string().nullish().describe('控除額合計'),
  "net_payment_amount": zod.string().nullish().describe('差引支給額(手取り額)'),
  "gross_payment_amount": zod.string().nullish().describe('総支給額(額面)'),
  "total_taxable_payment_amount": zod.string().nullish().describe('課税対象支給額'),
  "allowances": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('手当'),
  "deductions": zod.array(zod.object({
  "name": zod.string().optional().describe('項目名'),
  "amount": zod.string().optional().describe('金額')
})).optional().describe('控除項目（所得税、社会保険料等）'),
  "remark": zod.string().optional().describe('備考')
}).optional()
})


export const getEmployeeGroupMembershipsQueryCompanyIdMax = 2147483647;
export const getEmployeeGroupMembershipsQueryBaseDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getEmployeeGroupMembershipsQueryWithNoPayrollCalculationDefault = false;export const getEmployeeGroupMembershipsQueryEmployeeIdsMax = 8192;
export const getEmployeeGroupMembershipsQueryLimitMax = 100;
export const getEmployeeGroupMembershipsQueryOffsetMin = 0;

export const getEmployeeGroupMembershipsQueryOffsetMax = 2147483647;


export const getEmployeeGroupMembershipsQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getEmployeeGroupMembershipsQueryCompanyIdMax).describe('事業所ID'),
  "base_date": zod.string().date().regex(getEmployeeGroupMembershipsQueryBaseDateRegExp).describe('指定日。指定日付時点における所属情報をリストで返します。(YYYY-MM-DD)(例:2018-07-31)'),
  "with_no_payroll_calculation": zod.boolean().optional().describe('trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。'),
  "employee_ids": zod.string().max(getEmployeeGroupMembershipsQueryEmployeeIdsMax).optional().describe('取得対象とする従業員IDを指定することができます。指定しない場合は全従業員が対象となります。\n(例:1,2,3,4,5)\n'),
  "limit": zod.number().min(1).max(getEmployeeGroupMembershipsQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getEmployeeGroupMembershipsQueryOffsetMin).max(getEmployeeGroupMembershipsQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getEmployeeGroupMembershipsResponse = zod.object({
  "employee_group_memberships": zod.array(zod.object({
  "id": zod.number().optional().describe('従業員ID'),
  "num": zod.string().nullish().describe('従業員番号'),
  "display_name": zod.string().optional().describe('従業員名（表示名）'),
  "entry_date": zod.string().date().optional().describe('入社日'),
  "retire_date": zod.string().date().nullish().describe('退職日'),
  "user_id": zod.number().nullish().describe('ユーザーID(従業員詳細未設定の場合、nullになります。)'),
  "login_email": zod.string().nullish().describe('ログイン用メールアドレス(従業員詳細未設定の場合、nullになります。)'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "gender": zod.enum(['unselected', 'male', 'female']).optional().describe('性別　unselected: 未選択, male: 男性, female: 女性'),
  "payroll_calculation": zod.boolean().optional().describe('給与計算対象従業員の場合trueを返します'),
  "group_memberships": zod.array(zod.object({
  "start_date": zod.string().date().optional().describe('開始日'),
  "end_date": zod.string().date().optional().describe('終了日'),
  "boss_id": zod.number().nullish().describe('上司ID'),
  "main_duty": zod.enum(['unspecified', 'sub_duty', 'main_duty']).optional().describe('主務'),
  "group_id": zod.number().optional().describe('部門ID'),
  "group_code": zod.string().optional().describe('部門コード'),
  "group_name": zod.string().optional().describe('部門名称'),
  "level": zod.number().optional().describe('部門階層レベル'),
  "position_id": zod.number().nullish().describe('役職ID'),
  "position_code": zod.string().nullish().describe('役職コード'),
  "position_name": zod.string().nullish().describe('役職名称'),
  "parent_group_id": zod.number().nullish().describe('親部門ID'),
  "parent_group_code": zod.string().nullish().describe('親部門コード'),
  "parent_group_name": zod.string().nullish().describe('親部門名称')
})).optional()
})).optional(),
  "total_count": zod.number().optional().describe('合計件数')
})


export const getGroupsQueryCompanyIdMax = 2147483647;


export const getGroupsQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getGroupsQueryCompanyIdMax).describe('事業所ID')
})

export const getGroupsResponseGroupsItemIdMax = 2147483647;
export const getGroupsResponseGroupsItemCodeMax = 255;
export const getGroupsResponseGroupsItemNameMax = 255;
export const getGroupsResponseGroupsItemLevelMax = 2147483647;
export const getGroupsResponseGroupsItemParentGroupIdMax = 2147483647;
export const getGroupsResponseGroupsItemParentGroupCodeMax = 255;
export const getGroupsResponseGroupsItemParentGroupNameMax = 255;
export const getGroupsResponseTotalCountMin = 0;

export const getGroupsResponseTotalCountMax = 2147483647;


export const getGroupsResponse = zod.object({
  "groups": zod.array(zod.object({
  "id": zod.number().min(1).max(getGroupsResponseGroupsItemIdMax).describe('部門ID'),
  "code": zod.string().max(getGroupsResponseGroupsItemCodeMax).nullish().describe('部門コード'),
  "name": zod.string().max(getGroupsResponseGroupsItemNameMax).describe('部門名称'),
  "level": zod.number().min(1).max(getGroupsResponseGroupsItemLevelMax).describe('部門階層レベル（数字が大きいほど階層が深いです。）'),
  "parent_group_id": zod.number().min(1).max(getGroupsResponseGroupsItemParentGroupIdMax).nullish().describe('親部門ID'),
  "parent_group_code": zod.string().max(getGroupsResponseGroupsItemParentGroupCodeMax).nullish().describe('親部門コード'),
  "parent_group_name": zod.string().max(getGroupsResponseGroupsItemParentGroupNameMax).nullish().describe('親部門名称')
})),
  "total_count": zod.number().min(getGroupsResponseTotalCountMin).max(getGroupsResponseTotalCountMax).describe('合計件数')
})


export const createGroupBodyCompanyIdMax = 2147483647;
export const createGroupBodyGroupCodeMax = 255;
export const createGroupBodyGroupNameMax = 255;
export const createGroupBodyGroupParentGroupIdMax = 2147483647;


export const createGroupBody = zod.object({
  "company_id": zod.number().min(1).max(createGroupBodyCompanyIdMax).describe('作成対象事業所ID（必須）'),
  "group": zod.object({
  "code": zod.string().min(1).max(createGroupBodyGroupCodeMax).nullish().describe('部門コード（入力しない場合、空文字が入力されます。）'),
  "name": zod.string().min(1).max(createGroupBodyGroupNameMax).describe('部門名称（必須）'),
  "parent_group_id": zod.number().min(1).max(createGroupBodyGroupParentGroupIdMax).nullish().describe('親部門ID（部門階層レベルが10以内になるように親部門IDを指定してください。）')
})
})


export const updateGroupPathIdMax = 2147483647;


export const updateGroupParams = zod.object({
  "id": zod.number().min(1).max(updateGroupPathIdMax).describe('部門ID')
})

export const updateGroupBodyCompanyIdMax = 2147483647;
export const updateGroupBodyGroupCodeMax = 255;
export const updateGroupBodyGroupNameMax = 255;


export const updateGroupBody = zod.object({
  "company_id": zod.number().min(1).max(updateGroupBodyCompanyIdMax).describe('作成対象事業所ID（必須）'),
  "group": zod.object({
  "code": zod.string().min(1).max(updateGroupBodyGroupCodeMax).nullish().describe('部門コード（入力しない場合、空文字が入力されます。）'),
  "name": zod.string().min(1).max(updateGroupBodyGroupNameMax).describe('部門名称')
})
})

export const updateGroupResponseGroupIdMax = 2147483647;
export const updateGroupResponseGroupCodeMax = 255;
export const updateGroupResponseGroupNameMax = 255;
export const updateGroupResponseGroupLevelMax = 2147483647;
export const updateGroupResponseGroupParentGroupIdMax = 2147483647;
export const updateGroupResponseGroupParentGroupCodeMax = 255;
export const updateGroupResponseGroupParentGroupNameMax = 255;


export const updateGroupResponse = zod.object({
  "group": zod.object({
  "id": zod.number().min(1).max(updateGroupResponseGroupIdMax).describe('部門ID'),
  "code": zod.string().max(updateGroupResponseGroupCodeMax).nullish().describe('部門コード'),
  "name": zod.string().max(updateGroupResponseGroupNameMax).describe('部門名称'),
  "level": zod.number().min(1).max(updateGroupResponseGroupLevelMax).describe('部門階層レベル（数字が大きいほど階層が深いです。）'),
  "parent_group_id": zod.number().min(1).max(updateGroupResponseGroupParentGroupIdMax).nullish().describe('親部門ID'),
  "parent_group_code": zod.string().max(updateGroupResponseGroupParentGroupCodeMax).nullish().describe('親部門コード'),
  "parent_group_name": zod.string().max(updateGroupResponseGroupParentGroupNameMax).nullish().describe('親部門名称')
})
})


export const destroyGroupPathIdMax = 2147483647;


export const destroyGroupParams = zod.object({
  "id": zod.number().min(1).max(destroyGroupPathIdMax).describe('部門ID')
})

export const destroyGroupQueryCompanyIdMax = 2147483647;


export const destroyGroupQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyGroupQueryCompanyIdMax).describe('事業所ID')
})


export const getPositionsQueryCompanyIdMax = 2147483647;


export const getPositionsQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getPositionsQueryCompanyIdMax).describe('事業所ID')
})

export const getPositionsResponsePositionsItemIdMax = 2147483647;
export const getPositionsResponsePositionsItemCodeMax = 255;
export const getPositionsResponsePositionsItemNameMax = 255;
export const getPositionsResponseTotalCountMin = 0;

export const getPositionsResponseTotalCountMax = 2147483647;


export const getPositionsResponse = zod.object({
  "positions": zod.array(zod.object({
  "id": zod.number().min(1).max(getPositionsResponsePositionsItemIdMax).describe('役職ID'),
  "code": zod.string().max(getPositionsResponsePositionsItemCodeMax).nullish().describe('役職コード'),
  "name": zod.string().max(getPositionsResponsePositionsItemNameMax).describe('役職名称')
})),
  "total_count": zod.number().min(getPositionsResponseTotalCountMin).max(getPositionsResponseTotalCountMax).describe('合計件数')
})


export const createPositionBodyCompanyIdMax = 2147483647;
export const createPositionBodyPositionCodeMax = 255;
export const createPositionBodyPositionNameMax = 255;


export const createPositionBody = zod.object({
  "company_id": zod.number().min(1).max(createPositionBodyCompanyIdMax).describe('作成対象事業所ID（必須）'),
  "position": zod.object({
  "code": zod.string().min(1).max(createPositionBodyPositionCodeMax).nullish().describe('役職コード（入力しない場合、空文字が入力されます。）'),
  "name": zod.string().min(1).max(createPositionBodyPositionNameMax).describe('役職名称（必須）')
})
})


export const updatePositionPathIdMax = 2147483647;


export const updatePositionParams = zod.object({
  "id": zod.number().min(1).max(updatePositionPathIdMax).describe('役職ID')
})

export const updatePositionBodyCompanyIdMax = 2147483647;
export const updatePositionBodyPositionCodeMax = 255;
export const updatePositionBodyPositionNameMax = 255;


export const updatePositionBody = zod.object({
  "company_id": zod.number().min(1).max(updatePositionBodyCompanyIdMax).describe('作成対象事業所ID（必須）'),
  "position": zod.object({
  "code": zod.string().min(1).max(updatePositionBodyPositionCodeMax).nullish().describe('役職コード（入力しない場合、空文字が入力されます。）'),
  "name": zod.string().min(1).max(updatePositionBodyPositionNameMax).describe('役職名称（必須）')
})
})

export const updatePositionResponsePositionIdMax = 2147483647;
export const updatePositionResponsePositionCodeMax = 255;
export const updatePositionResponsePositionNameMax = 255;


export const updatePositionResponse = zod.object({
  "position": zod.object({
  "id": zod.number().min(1).max(updatePositionResponsePositionIdMax).describe('役職ID'),
  "code": zod.string().max(updatePositionResponsePositionCodeMax).nullish().describe('役職コード'),
  "name": zod.string().max(updatePositionResponsePositionNameMax).describe('役職名称')
})
})


export const destroyPositionPathIdMax = 2147483647;


export const destroyPositionParams = zod.object({
  "id": zod.number().min(1).max(destroyPositionPathIdMax).describe('役職ID')
})

export const destroyPositionQueryCompanyIdMax = 2147483647;


export const destroyPositionQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyPositionQueryCompanyIdMax).describe('事業所ID')
})


export const getApprovalRequestsMonthlyAttendancesQueryCompanyIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendancesQueryApplicationNumberMax = 2147483647;
export const getApprovalRequestsMonthlyAttendancesQueryStartIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsMonthlyAttendancesQueryEndIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsMonthlyAttendancesQueryApproverIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendancesQueryApplicantIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendancesQueryStartTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsMonthlyAttendancesQueryEndTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsMonthlyAttendancesQueryLimitMax = 100;
export const getApprovalRequestsMonthlyAttendancesQueryOffsetMin = 0;

export const getApprovalRequestsMonthlyAttendancesQueryOffsetMax = 2147483647;


export const getApprovalRequestsMonthlyAttendancesQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesQueryCompanyIdMax).describe('事業所ID'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).optional().describe('申請ステータス\n- `draft` - 下書き\n- `in_progress` - 申請中\n- `approved` - 承認済\n- `feedback` - 差戻し'),
  "application_number": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesQueryApplicationNumberMax).optional().describe('申請No'),
  "start_issue_date": zod.string().date().regex(getApprovalRequestsMonthlyAttendancesQueryStartIssueDateRegExp).optional().describe('申請開始日'),
  "end_issue_date": zod.string().date().regex(getApprovalRequestsMonthlyAttendancesQueryEndIssueDateRegExp).optional().describe('申請終了日'),
  "approver_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesQueryApproverIdMax).optional().describe('現在承認ステップの承認者のユーザーID\n\napprover_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません\n'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesQueryApplicantIdMax).optional().describe('申請者のユーザーID'),
  "start_target_date": zod.string().date().regex(getApprovalRequestsMonthlyAttendancesQueryStartTargetDateRegExp).optional().describe('対象開始日'),
  "end_target_date": zod.string().date().regex(getApprovalRequestsMonthlyAttendancesQueryEndTargetDateRegExp).optional().describe('対象終了日'),
  "passed_auto_check": zod.boolean().optional().describe('自動チェック結果\n- trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。\n- falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。\n- キーごと指定しない場合、すべての申請を返却します。'),
  "limit": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getApprovalRequestsMonthlyAttendancesQueryOffsetMin).max(getApprovalRequestsMonthlyAttendancesQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemCompanyIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemApplicationNumberMax = 2147483647;
export const getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemApplicantIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemApproverIdsItemMax = 2147483647;
export const getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsMonthlyAttendancesResponseTotalCountMin = 0;

export const getApprovalRequestsMonthlyAttendancesResponseTotalCountMax = 2147483647;


export const getApprovalRequestsMonthlyAttendancesResponse = zod.object({
  "monthly_attendances": zod.array(zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemTargetDateRegExp).describe('対象日'),
  "issue_date": zod.string().date().regex(getApprovalRequestsMonthlyAttendancesResponseMonthlyAttendancesItemIssueDateRegExp).describe('申請日'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果')
})),
  "total_count": zod.number().min(getApprovalRequestsMonthlyAttendancesResponseTotalCountMin).max(getApprovalRequestsMonthlyAttendancesResponseTotalCountMax).describe('合計件数')
})


export const createApprovalRequestsMonthlyAttendanceBodyCompanyIdMax = 2147483647;
export const createApprovalRequestsMonthlyAttendanceBodyTargetYearMin = 2000;

export const createApprovalRequestsMonthlyAttendanceBodyTargetYearMax = 2100;
export const createApprovalRequestsMonthlyAttendanceBodyTargetMonthMax = 12;
export const createApprovalRequestsMonthlyAttendanceBodyApprovalFlowRouteIdMax = 2147483647;
export const createApprovalRequestsMonthlyAttendanceBodyApproverIdMax = 2147483647;


export const createApprovalRequestsMonthlyAttendanceBody = zod.object({
  "company_id": zod.number().min(1).max(createApprovalRequestsMonthlyAttendanceBodyCompanyIdMax).describe('事業所ID（必須）'),
  "target_year": zod.number().min(createApprovalRequestsMonthlyAttendanceBodyTargetYearMin).max(createApprovalRequestsMonthlyAttendanceBodyTargetYearMax).describe('対象年（必須）'),
  "target_month": zod.number().min(1).max(createApprovalRequestsMonthlyAttendanceBodyTargetMonthMax).describe('対象月（必須）'),
  "approval_flow_route_id": zod.number().min(1).max(createApprovalRequestsMonthlyAttendanceBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(createApprovalRequestsMonthlyAttendanceBodyApproverIdMax).optional().describe('承認者のユーザーID')
})


export const getApprovalRequestsMonthlyAttendancePathIdMax = 2147483647;


export const getApprovalRequestsMonthlyAttendanceParams = zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendancePathIdMax).describe('月次勤怠締め申請ID')
})

export const getApprovalRequestsMonthlyAttendanceQueryCompanyIdMax = 2147483647;


export const getApprovalRequestsMonthlyAttendanceQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendanceQueryCompanyIdMax).describe('事業所ID')
})

export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCompanyIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApplicationNumberMax = 2147483647;
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApplicantIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApproverIdsItemMax = 2147483647;
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowRouteIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowLogsItemUserIdMin = 0;

export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowLogsItemUserIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentStepIdMax = 2147483647;
export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentRoundMin = 0;

export const getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentRoundMax = 2147483647;


export const getApprovalRequestsMonthlyAttendanceResponse = zod.object({
  "monthly_attendance": zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceTargetDateRegExp).describe('対象日'),
  "issue_date": zod.string().date().regex(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceIssueDateRegExp).describe('申請日'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowLogsItemUserIdMin).max(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentRoundMin).max(getApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})
})


export const updateApprovalRequestsMonthlyAttendancePathIdMax = 2147483647;


export const updateApprovalRequestsMonthlyAttendanceParams = zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendancePathIdMax).describe('月次勤怠締め申請ID')
})

export const updateApprovalRequestsMonthlyAttendanceBodyCompanyIdMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceBodyApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceBodyApproverIdMax = 2147483647;


export const updateApprovalRequestsMonthlyAttendanceBody = zod.object({
  "company_id": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceBodyCompanyIdMax).describe('事業所ID（必須）'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceBodyApproverIdMax).optional().describe('承認者のユーザーID')
})

export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceIdMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCompanyIdMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApplicationNumberMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApplicantIdMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApproverIdsItemMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowLogsItemUserIdMin = 0;

export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowLogsItemUserIdMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentStepIdMax = 2147483647;
export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentRoundMin = 0;

export const updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentRoundMax = 2147483647;


export const updateApprovalRequestsMonthlyAttendanceResponse = zod.object({
  "monthly_attendance": zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceTargetDateRegExp).describe('対象日'),
  "issue_date": zod.string().date().regex(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceIssueDateRegExp).describe('申請日'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowLogsItemUserIdMin).max(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentRoundMin).max(updateApprovalRequestsMonthlyAttendanceResponseMonthlyAttendanceCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})
})


export const destroyApprovalRequestsMonthlyAttendancePathIdMax = 2147483647;


export const destroyApprovalRequestsMonthlyAttendanceParams = zod.object({
  "id": zod.number().min(1).max(destroyApprovalRequestsMonthlyAttendancePathIdMax).describe('月次勤怠締め申請ID')
})

export const destroyApprovalRequestsMonthlyAttendanceQueryCompanyIdMax = 2147483647;


export const destroyApprovalRequestsMonthlyAttendanceQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyApprovalRequestsMonthlyAttendanceQueryCompanyIdMax).describe('事業所ID')
})


export const actionApprovalRequestsMonthlyAttendancePathIdMax = 2147483647;


export const actionApprovalRequestsMonthlyAttendanceParams = zod.object({
  "id": zod.number().min(1).max(actionApprovalRequestsMonthlyAttendancePathIdMax).describe('月次勤怠締め申請ID')
})

export const actionApprovalRequestsMonthlyAttendanceBodyCompanyIdMax = 2147483647;
export const actionApprovalRequestsMonthlyAttendanceBodyTargetRoundMax = 2147483647;
export const actionApprovalRequestsMonthlyAttendanceBodyTargetStepIdMax = 2147483647;
export const actionApprovalRequestsMonthlyAttendanceBodyNextApproverIdMax = 2147483647;


export const actionApprovalRequestsMonthlyAttendanceBody = zod.object({
  "company_id": zod.number().min(1).max(actionApprovalRequestsMonthlyAttendanceBodyCompanyIdMax).describe('事業所ID'),
  "approval_action": zod.enum(['approve', 'cancel', 'feedback', 'force_feedback']).describe('申請操作。（approve:承認、cancel:取り消し、feedback:差戻し、force_feedback:承認取り消し）'),
  "target_round": zod.number().min(1).max(actionApprovalRequestsMonthlyAttendanceBodyTargetRoundMax).nullable().describe('対象round。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。取得APIレスポンス.current_roundを送信してください。'),
  "target_step_id": zod.number().min(1).max(actionApprovalRequestsMonthlyAttendanceBodyTargetStepIdMax).nullable().describe('対象承認ステップID。取得APIレスポンス.current_step_idを送信してください。'),
  "next_approver_id": zod.number().min(1).max(actionApprovalRequestsMonthlyAttendanceBodyNextApproverIdMax).nullish().describe('次のステップの承認者のユーザーID')
})


export const getApprovalRequestsWorkTimesQueryCompanyIdMax = 2147483647;
export const getApprovalRequestsWorkTimesQueryApplicationNumberMax = 2147483647;
export const getApprovalRequestsWorkTimesQueryStartIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsWorkTimesQueryEndIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsWorkTimesQueryApproverIdMax = 2147483647;
export const getApprovalRequestsWorkTimesQueryApplicantIdMax = 2147483647;
export const getApprovalRequestsWorkTimesQueryStartTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsWorkTimesQueryEndTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsWorkTimesQueryLimitMax = 100;
export const getApprovalRequestsWorkTimesQueryOffsetMin = 0;

export const getApprovalRequestsWorkTimesQueryOffsetMax = 2147483647;


export const getApprovalRequestsWorkTimesQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsWorkTimesQueryCompanyIdMax).describe('事業所ID'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).optional().describe('申請ステータス\n- `draft` - 下書き\n- `in_progress` - 申請中\n- `approved` - 承認済\n- `feedback` - 差戻し'),
  "application_number": zod.number().min(1).max(getApprovalRequestsWorkTimesQueryApplicationNumberMax).optional().describe('申請No'),
  "start_issue_date": zod.string().date().regex(getApprovalRequestsWorkTimesQueryStartIssueDateRegExp).optional().describe('申請開始日'),
  "end_issue_date": zod.string().date().regex(getApprovalRequestsWorkTimesQueryEndIssueDateRegExp).optional().describe('申請終了日'),
  "approver_id": zod.number().min(1).max(getApprovalRequestsWorkTimesQueryApproverIdMax).optional().describe('現在承認ステップの承認者のユーザーID\napprover_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません\n'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsWorkTimesQueryApplicantIdMax).optional().describe('申請者のユーザーID'),
  "start_target_date": zod.string().date().regex(getApprovalRequestsWorkTimesQueryStartTargetDateRegExp).optional().describe('対象開始日'),
  "end_target_date": zod.string().date().regex(getApprovalRequestsWorkTimesQueryEndTargetDateRegExp).optional().describe('対象終了日'),
  "passed_auto_check": zod.boolean().optional().describe('自動チェック結果\n- trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。\n- falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。\n- キーごと指定しない場合、すべての申請を返却します。'),
  "limit": zod.number().min(1).max(getApprovalRequestsWorkTimesQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getApprovalRequestsWorkTimesQueryOffsetMin).max(getApprovalRequestsWorkTimesQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getApprovalRequestsWorkTimesResponseWorkTimesItemIdMax = 2147483647;
export const getApprovalRequestsWorkTimesResponseWorkTimesItemCompanyIdMax = 2147483647;
export const getApprovalRequestsWorkTimesResponseWorkTimesItemApplicationNumberMax = 2147483647;
export const getApprovalRequestsWorkTimesResponseWorkTimesItemApplicantIdMax = 2147483647;
export const getApprovalRequestsWorkTimesResponseWorkTimesItemApproverIdsItemMax = 2147483647;
export const getApprovalRequestsWorkTimesResponseWorkTimesItemTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsWorkTimesResponseWorkTimesItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimesResponseWorkTimesItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimesResponseWorkTimesItemWorkRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimesResponseWorkTimesItemWorkRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimesResponseWorkTimesItemBreakRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimesResponseWorkTimesItemBreakRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimesResponseWorkTimesItemIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsWorkTimesResponseWorkTimesItemCommentMax = 255;
export const getApprovalRequestsWorkTimesResponseTotalCountMin = 0;

export const getApprovalRequestsWorkTimesResponseTotalCountMax = 2147483647;


export const getApprovalRequestsWorkTimesResponse = zod.object({
  "work_times": zod.array(zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsWorkTimesResponseWorkTimesItemIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsWorkTimesResponseWorkTimesItemCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsWorkTimesResponseWorkTimesItemApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsWorkTimesResponseWorkTimesItemApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsWorkTimesResponseWorkTimesItemApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsWorkTimesResponseWorkTimesItemTargetDateRegExp).describe('対象日'),
  "clear_work_time": zod.boolean().describe('勤務時間削除フラグ（false:勤務時間を修正する、true:勤務時間を削除する）'),
  "clock_in_at": zod.string().regex(getApprovalRequestsWorkTimesResponseWorkTimesItemClockInAtRegExp).nullish().describe('勤務開始時間\n  - 勤務時間が複数登録されている場合は、最初の勤務の出勤時間を返します。'),
  "clock_out_at": zod.string().regex(getApprovalRequestsWorkTimesResponseWorkTimesItemClockOutAtRegExp).nullish().describe('勤務終了時間\n  - 勤務時間が複数登録されている場合は、最後の勤務の退勤時間を返します。'),
  "work_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(getApprovalRequestsWorkTimesResponseWorkTimesItemWorkRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(getApprovalRequestsWorkTimesResponseWorkTimesItemWorkRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('勤務時間のリスト\n  - 登録されている全ての勤務時間のリストを返します。'),
  "lateness_mins": zod.number().describe('遅刻分の時間（分単位）'),
  "early_leaving_mins": zod.number().describe('早退分の時間（分単位）'),
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(getApprovalRequestsWorkTimesResponseWorkTimesItemBreakRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(getApprovalRequestsWorkTimesResponseWorkTimesItemBreakRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "issue_date": zod.string().date().regex(getApprovalRequestsWorkTimesResponseWorkTimesItemIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsWorkTimesResponseWorkTimesItemCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果')
})),
  "total_count": zod.number().min(getApprovalRequestsWorkTimesResponseTotalCountMin).max(getApprovalRequestsWorkTimesResponseTotalCountMax).describe('合計件数')
})


export const createApprovalRequestsWorkTimeBodyCompanyIdMax = 2147483647;
export const createApprovalRequestsWorkTimeBodyTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const createApprovalRequestsWorkTimeBodyClearWorkTimeDefault = false;export const createApprovalRequestsWorkTimeBodyWorkRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsWorkTimeBodyWorkRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsWorkTimeBodyBreakRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsWorkTimeBodyBreakRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsWorkTimeBodyCommentMax = 255;
export const createApprovalRequestsWorkTimeBodyApprovalFlowRouteIdMax = 2147483647;
export const createApprovalRequestsWorkTimeBodyApproverIdMax = 2147483647;


export const createApprovalRequestsWorkTimeBody = zod.object({
  "company_id": zod.number().min(1).max(createApprovalRequestsWorkTimeBodyCompanyIdMax).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(createApprovalRequestsWorkTimeBodyTargetDateRegExp).describe('対象日（必須）'),
  "clear_work_time": zod.boolean().optional().describe('false: 勤務時間を修正する  \ntrue: 勤務時間を削除する\n\n勤務時間を削除する場合は以下のパラメータは指定しないでください。\n- work_records\n- lateness_mins\n- early_leaving_mins\n- break_records'),
  "work_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(createApprovalRequestsWorkTimeBodyWorkRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(createApprovalRequestsWorkTimeBodyWorkRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('勤務時間のリスト'),
  "lateness_mins": zod.number().optional().describe('遅刻分の時間（分単位）'),
  "early_leaving_mins": zod.number().optional().describe('早退分の時間（分単位）'),
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(createApprovalRequestsWorkTimeBodyBreakRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(createApprovalRequestsWorkTimeBodyBreakRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "comment": zod.string().max(createApprovalRequestsWorkTimeBodyCommentMax).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(createApprovalRequestsWorkTimeBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(createApprovalRequestsWorkTimeBodyApproverIdMax).optional().describe('承認者のユーザーID')
})


export const getApprovalRequestsWorkTimePathIdMax = 2147483647;


export const getApprovalRequestsWorkTimeParams = zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsWorkTimePathIdMax).describe('勤務時間修正申請ID')
})

export const getApprovalRequestsWorkTimeQueryCompanyIdMax = 2147483647;


export const getApprovalRequestsWorkTimeQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsWorkTimeQueryCompanyIdMax).describe('事業所ID')
})

export const getApprovalRequestsWorkTimeResponseWorkTimeIdMax = 2147483647;
export const getApprovalRequestsWorkTimeResponseWorkTimeCompanyIdMax = 2147483647;
export const getApprovalRequestsWorkTimeResponseWorkTimeApplicationNumberMax = 2147483647;
export const getApprovalRequestsWorkTimeResponseWorkTimeApplicantIdMax = 2147483647;
export const getApprovalRequestsWorkTimeResponseWorkTimeApproverIdsItemMax = 2147483647;
export const getApprovalRequestsWorkTimeResponseWorkTimeTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsWorkTimeResponseWorkTimeClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimeResponseWorkTimeClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimeResponseWorkTimeWorkRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimeResponseWorkTimeWorkRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimeResponseWorkTimeBreakRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimeResponseWorkTimeBreakRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsWorkTimeResponseWorkTimeIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsWorkTimeResponseWorkTimeCommentMax = 255;
export const getApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowRouteIdMax = 2147483647;
export const getApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowLogsItemUserIdMin = 0;

export const getApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowLogsItemUserIdMax = 2147483647;
export const getApprovalRequestsWorkTimeResponseWorkTimeCurrentStepIdMax = 2147483647;
export const getApprovalRequestsWorkTimeResponseWorkTimeCurrentRoundMin = 0;

export const getApprovalRequestsWorkTimeResponseWorkTimeCurrentRoundMax = 2147483647;


export const getApprovalRequestsWorkTimeResponse = zod.object({
  "work_time": zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsWorkTimeResponseWorkTimeIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsWorkTimeResponseWorkTimeCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsWorkTimeResponseWorkTimeApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsWorkTimeResponseWorkTimeApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsWorkTimeResponseWorkTimeApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsWorkTimeResponseWorkTimeTargetDateRegExp).describe('対象日'),
  "clear_work_time": zod.boolean().describe('勤務時間削除フラグ（false:勤務時間を修正する、true:勤務時間を削除する）'),
  "clock_in_at": zod.string().regex(getApprovalRequestsWorkTimeResponseWorkTimeClockInAtRegExp).nullish().describe('勤務開始時間\n  - 勤務が複数登録されている場合は、最初の勤務の出勤時間を返します。'),
  "clock_out_at": zod.string().regex(getApprovalRequestsWorkTimeResponseWorkTimeClockOutAtRegExp).nullish().describe('勤務終了時間\n  - 勤務が複数登録されている場合は、最後の勤務の退勤時間を返します。'),
  "work_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(getApprovalRequestsWorkTimeResponseWorkTimeWorkRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(getApprovalRequestsWorkTimeResponseWorkTimeWorkRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('勤務時間のリスト\n  - 登録されている全ての勤務時間のリストを返します。'),
  "lateness_mins": zod.number().describe('遅刻分の時間（分単位）'),
  "early_leaving_mins": zod.number().describe('早退分の時間（分単位）'),
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(getApprovalRequestsWorkTimeResponseWorkTimeBreakRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(getApprovalRequestsWorkTimeResponseWorkTimeBreakRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "issue_date": zod.string().date().regex(getApprovalRequestsWorkTimeResponseWorkTimeIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsWorkTimeResponseWorkTimeCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(getApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(getApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowLogsItemUserIdMin).max(getApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(getApprovalRequestsWorkTimeResponseWorkTimeCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(getApprovalRequestsWorkTimeResponseWorkTimeCurrentRoundMin).max(getApprovalRequestsWorkTimeResponseWorkTimeCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})
})


export const updateApprovalRequestsWorkTimePathIdMax = 2147483647;


export const updateApprovalRequestsWorkTimeParams = zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsWorkTimePathIdMax).describe('勤務時間修正申請ID')
})

export const updateApprovalRequestsWorkTimeBodyCompanyIdMax = 2147483647;
export const updateApprovalRequestsWorkTimeBodyTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsWorkTimeBodyClearWorkTimeDefault = false;export const updateApprovalRequestsWorkTimeBodyWorkRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeBodyWorkRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeBodyBreakRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeBodyBreakRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeBodyCommentMax = 255;
export const updateApprovalRequestsWorkTimeBodyApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsWorkTimeBodyApproverIdMax = 2147483647;


export const updateApprovalRequestsWorkTimeBody = zod.object({
  "company_id": zod.number().min(1).max(updateApprovalRequestsWorkTimeBodyCompanyIdMax).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(updateApprovalRequestsWorkTimeBodyTargetDateRegExp).describe('対象日（必須）'),
  "clear_work_time": zod.boolean().optional().describe('false: 勤務時間を修正する  \ntrue: 勤務時間を削除する\n\n勤務時間を削除する場合は以下のパラメータは指定しないでください。\n- work_records\n- lateness_mins\n- early_leaving_mins\n- break_records'),
  "work_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(updateApprovalRequestsWorkTimeBodyWorkRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(updateApprovalRequestsWorkTimeBodyWorkRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('勤務時間のリスト'),
  "lateness_mins": zod.number().optional().describe('遅刻分の時間（分単位）'),
  "early_leaving_mins": zod.number().optional().describe('早退分の時間（分単位）'),
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(updateApprovalRequestsWorkTimeBodyBreakRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(updateApprovalRequestsWorkTimeBodyBreakRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "comment": zod.string().max(updateApprovalRequestsWorkTimeBodyCommentMax).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsWorkTimeBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(updateApprovalRequestsWorkTimeBodyApproverIdMax).optional().describe('承認者のユーザーID')
})

export const updateApprovalRequestsWorkTimeResponseWorkTimeIdMax = 2147483647;
export const updateApprovalRequestsWorkTimeResponseWorkTimeCompanyIdMax = 2147483647;
export const updateApprovalRequestsWorkTimeResponseWorkTimeApplicationNumberMax = 2147483647;
export const updateApprovalRequestsWorkTimeResponseWorkTimeApplicantIdMax = 2147483647;
export const updateApprovalRequestsWorkTimeResponseWorkTimeApproverIdsItemMax = 2147483647;
export const updateApprovalRequestsWorkTimeResponseWorkTimeTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsWorkTimeResponseWorkTimeClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeResponseWorkTimeClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeResponseWorkTimeWorkRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeResponseWorkTimeWorkRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeResponseWorkTimeBreakRecordsItemClockInAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeResponseWorkTimeBreakRecordsItemClockOutAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsWorkTimeResponseWorkTimeIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsWorkTimeResponseWorkTimeCommentMax = 255;
export const updateApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowLogsItemUserIdMin = 0;

export const updateApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowLogsItemUserIdMax = 2147483647;
export const updateApprovalRequestsWorkTimeResponseWorkTimeCurrentStepIdMax = 2147483647;
export const updateApprovalRequestsWorkTimeResponseWorkTimeCurrentRoundMin = 0;

export const updateApprovalRequestsWorkTimeResponseWorkTimeCurrentRoundMax = 2147483647;


export const updateApprovalRequestsWorkTimeResponse = zod.object({
  "work_time": zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsWorkTimeResponseWorkTimeIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(updateApprovalRequestsWorkTimeResponseWorkTimeCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(updateApprovalRequestsWorkTimeResponseWorkTimeApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(updateApprovalRequestsWorkTimeResponseWorkTimeApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(updateApprovalRequestsWorkTimeResponseWorkTimeApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(updateApprovalRequestsWorkTimeResponseWorkTimeTargetDateRegExp).describe('対象日'),
  "clear_work_time": zod.boolean().describe('勤務時間削除フラグ（false:勤務時間を修正する、true:勤務時間を削除する）'),
  "clock_in_at": zod.string().regex(updateApprovalRequestsWorkTimeResponseWorkTimeClockInAtRegExp).nullish().describe('勤務開始時間\n  - 勤務が複数登録されている場合は、最初の勤務の出勤時間を返します。'),
  "clock_out_at": zod.string().regex(updateApprovalRequestsWorkTimeResponseWorkTimeClockOutAtRegExp).nullish().describe('勤務終了時間\n  - 勤務が複数登録されている場合は、最後の勤務の退勤時間を返します。'),
  "work_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(updateApprovalRequestsWorkTimeResponseWorkTimeWorkRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(updateApprovalRequestsWorkTimeResponseWorkTimeWorkRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('勤務時間のリスト\n  - 登録されている全ての勤務時間のリストを返します。'),
  "lateness_mins": zod.number().describe('遅刻分の時間（分単位）'),
  "early_leaving_mins": zod.number().describe('早退分の時間（分単位）'),
  "break_records": zod.array(zod.object({
  "clock_in_at": zod.string().regex(updateApprovalRequestsWorkTimeResponseWorkTimeBreakRecordsItemClockInAtRegExp).describe('開始時刻'),
  "clock_out_at": zod.string().regex(updateApprovalRequestsWorkTimeResponseWorkTimeBreakRecordsItemClockOutAtRegExp).describe('終了時刻')
})).optional().describe('休憩時間のリスト'),
  "issue_date": zod.string().date().regex(updateApprovalRequestsWorkTimeResponseWorkTimeIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(updateApprovalRequestsWorkTimeResponseWorkTimeCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(updateApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowLogsItemUserIdMin).max(updateApprovalRequestsWorkTimeResponseWorkTimeApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(updateApprovalRequestsWorkTimeResponseWorkTimeCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(updateApprovalRequestsWorkTimeResponseWorkTimeCurrentRoundMin).max(updateApprovalRequestsWorkTimeResponseWorkTimeCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})
})


export const destroyApprovalRequestsWorkTimePathIdMax = 2147483647;


export const destroyApprovalRequestsWorkTimeParams = zod.object({
  "id": zod.number().min(1).max(destroyApprovalRequestsWorkTimePathIdMax).describe('勤務時間修正申請ID')
})

export const destroyApprovalRequestsWorkTimeQueryCompanyIdMax = 2147483647;


export const destroyApprovalRequestsWorkTimeQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyApprovalRequestsWorkTimeQueryCompanyIdMax).describe('事業所ID')
})


export const actionApprovalRequestsWorkTimePathIdMax = 2147483647;


export const actionApprovalRequestsWorkTimeParams = zod.object({
  "id": zod.number().min(1).max(actionApprovalRequestsWorkTimePathIdMax).describe('勤務時間修正申請ID')
})

export const actionApprovalRequestsWorkTimeBodyCompanyIdMax = 2147483647;
export const actionApprovalRequestsWorkTimeBodyTargetRoundMax = 2147483647;
export const actionApprovalRequestsWorkTimeBodyTargetStepIdMax = 2147483647;
export const actionApprovalRequestsWorkTimeBodyNextApproverIdMax = 2147483647;


export const actionApprovalRequestsWorkTimeBody = zod.object({
  "company_id": zod.number().min(1).max(actionApprovalRequestsWorkTimeBodyCompanyIdMax).describe('事業所ID'),
  "approval_action": zod.enum(['approve', 'cancel', 'feedback', 'force_feedback']).describe('申請操作。（approve:承認、cancel:取り消し、feedback:差戻し、force_feedback:承認取り消し）'),
  "target_round": zod.number().min(1).max(actionApprovalRequestsWorkTimeBodyTargetRoundMax).nullable().describe('対象round。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。取得APIレスポンス.current_roundを送信してください。'),
  "target_step_id": zod.number().min(1).max(actionApprovalRequestsWorkTimeBodyTargetStepIdMax).nullable().describe('対象承認ステップID。取得APIレスポンス.current_step_idを送信してください。'),
  "next_approver_id": zod.number().min(1).max(actionApprovalRequestsWorkTimeBodyNextApproverIdMax).nullish().describe('次のステップの承認者のユーザーID')
})


export const getApprovalRequestsPaidHolidaysQueryCompanyIdMax = 2147483647;
export const getApprovalRequestsPaidHolidaysQueryApplicationNumberMax = 2147483647;
export const getApprovalRequestsPaidHolidaysQueryStartIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidaysQueryEndIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidaysQueryApproverIdMax = 2147483647;
export const getApprovalRequestsPaidHolidaysQueryApplicantIdMax = 2147483647;
export const getApprovalRequestsPaidHolidaysQueryStartTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidaysQueryEndTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidaysQueryLimitMax = 100;
export const getApprovalRequestsPaidHolidaysQueryOffsetMin = 0;

export const getApprovalRequestsPaidHolidaysQueryOffsetMax = 2147483647;


export const getApprovalRequestsPaidHolidaysQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsPaidHolidaysQueryCompanyIdMax).describe('事業所ID'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).optional().describe('申請ステータス\n- `draft` - 下書き\n- `in_progress` - 申請中\n- `approved` - 承認済\n- `feedback` - 差戻し'),
  "application_number": zod.number().min(1).max(getApprovalRequestsPaidHolidaysQueryApplicationNumberMax).optional().describe('申請No'),
  "start_issue_date": zod.string().date().regex(getApprovalRequestsPaidHolidaysQueryStartIssueDateRegExp).optional().describe('申請開始日'),
  "end_issue_date": zod.string().date().regex(getApprovalRequestsPaidHolidaysQueryEndIssueDateRegExp).optional().describe('申請終了日'),
  "approver_id": zod.number().min(1).max(getApprovalRequestsPaidHolidaysQueryApproverIdMax).optional().describe('現在承認ステップの承認者のユーザーID\n\napprover_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません\n'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsPaidHolidaysQueryApplicantIdMax).optional().describe('申請者のユーザーID'),
  "start_target_date": zod.string().date().regex(getApprovalRequestsPaidHolidaysQueryStartTargetDateRegExp).optional().describe('対象開始日'),
  "end_target_date": zod.string().date().regex(getApprovalRequestsPaidHolidaysQueryEndTargetDateRegExp).optional().describe('対象終了日'),
  "passed_auto_check": zod.boolean().optional().describe('自動チェック結果\n- trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。\n- falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。\n- キーごと指定しない場合、すべての申請を返却します。'),
  "limit": zod.number().min(1).max(getApprovalRequestsPaidHolidaysQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getApprovalRequestsPaidHolidaysQueryOffsetMin).max(getApprovalRequestsPaidHolidaysQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemIdMax = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemCompanyIdMax = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApplicationNumberMax = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApplicantIdMax = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApproverIdsItemMax = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemValuesItemStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemValuesItemEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemCommentMax = 255;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemIdMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemCompanyIdMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApplicationNumberMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApplicantIdMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApproverIdsItemMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemTargetDateRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemIssueDateRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemCommentMaxOne = 255;
export const getApprovalRequestsPaidHolidaysResponseTotalCountMin = 0;

export const getApprovalRequestsPaidHolidaysResponseTotalCountMax = 2147483647;


export const getApprovalRequestsPaidHolidaysResponse = zod.object({
  "paid_holidays": zod.array(zod.union([zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemTargetDateRegExp).describe('対象日'),
  "values": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hourly']).describe('取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hourly:時間休）'),
  "start_at": zod.string().regex(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemValuesItemStartAtRegExp).nullish().describe('取得予定開始時間'),
  "end_at": zod.string().regex(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemValuesItemEndAtRegExp).nullish().describe('取得予定終了時間')
})),
  "issue_date": zod.string().date().regex(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果')
}),zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemIdMaxOne).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemCompanyIdMaxOne).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApplicationNumberMaxOne).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApplicantIdMaxOne).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemApproverIdsItemMaxOne).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemTargetDateRegExpOne).describe('対象日'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('[deprecated] 取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休）※ 削除予定のため paid_holiday->values->type を参照してください'),
  "start_at": zod.string().regex(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemStartAtRegExp).nullish().describe('[deprecated] 取得予定開始時間 ※ 削除予定のため paid_holiday->values->start_at を参照してください'),
  "end_at": zod.string().regex(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemEndAtRegExp).nullish().describe('[deprecated] 取得予定終了時間 ※ 削除予定のため paid_holiday->values->end_at を参照してください'),
  "issue_date": zod.string().date().regex(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemIssueDateRegExpOne).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsPaidHolidaysResponsePaidHolidaysItemCommentMaxOne).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果')
})])),
  "total_count": zod.number().min(getApprovalRequestsPaidHolidaysResponseTotalCountMin).max(getApprovalRequestsPaidHolidaysResponseTotalCountMax).describe('合計件数')
})


export const createApprovalRequestsPaidHolidayBodyCompanyIdMax = 2147483647;
export const createApprovalRequestsPaidHolidayBodyTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const createApprovalRequestsPaidHolidayBodyValuesItemStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsPaidHolidayBodyValuesItemEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsPaidHolidayBodyCommentMax = 255;
export const createApprovalRequestsPaidHolidayBodyApprovalFlowRouteIdMax = 2147483647;
export const createApprovalRequestsPaidHolidayBodyApproverIdMax = 2147483647;
export const createApprovalRequestsPaidHolidayBodyCompanyIdMaxOne = 2147483647;
export const createApprovalRequestsPaidHolidayBodyTargetDateRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const createApprovalRequestsPaidHolidayBodyStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}?$');
export const createApprovalRequestsPaidHolidayBodyEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}?$');
export const createApprovalRequestsPaidHolidayBodyCommentMaxOne = 255;
export const createApprovalRequestsPaidHolidayBodyApprovalFlowRouteIdMaxOne = 2147483647;
export const createApprovalRequestsPaidHolidayBodyApproverIdMaxOne = 2147483647;


export const createApprovalRequestsPaidHolidayBody = zod.union([zod.object({
  "company_id": zod.number().min(1).max(createApprovalRequestsPaidHolidayBodyCompanyIdMax).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(createApprovalRequestsPaidHolidayBodyTargetDateRegExp).describe('対象日（必須）'),
  "values": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hourly']).describe('取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hourly:時間休）'),
  "start_at": zod.string().regex(createApprovalRequestsPaidHolidayBodyValuesItemStartAtRegExp).nullish().describe('取得予定開始時間 ※ 全休の場合や午前休、午後休の場合にはこちらの値は参照されません'),
  "end_at": zod.string().regex(createApprovalRequestsPaidHolidayBodyValuesItemEndAtRegExp).nullish().describe('取得予定終了時間 ※ 全休の場合や午前休、午後休の場合にはこちらの値は参照されません')
})),
  "comment": zod.string().max(createApprovalRequestsPaidHolidayBodyCommentMax).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(createApprovalRequestsPaidHolidayBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(createApprovalRequestsPaidHolidayBodyApproverIdMax).optional().describe('承認者のユーザーID')
}),zod.object({
  "company_id": zod.number().min(1).max(createApprovalRequestsPaidHolidayBodyCompanyIdMaxOne).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(createApprovalRequestsPaidHolidayBodyTargetDateRegExpOne).describe('対象日（必須）'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('[deprecated] 取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休） ※ paid_holidays->values を指定している場合にはこちらの値は参照されません ※ 削除予定のためvalues->type を指定してください'),
  "start_at": zod.string().regex(createApprovalRequestsPaidHolidayBodyStartAtRegExp).optional().describe('[deprecated] 取得予定開始時間 ※ paid_holidays->values を指定している場合にはこちらの値は参照されません ※ 削除予定のため values->start_at を指定してください'),
  "end_at": zod.string().regex(createApprovalRequestsPaidHolidayBodyEndAtRegExp).optional().describe('[deprecated] 取得予定終了時間 ※ paid_holidays->values を指定している場合にはこちらの値は参照されません ※ 削除予定のため values->end_at を指定してください'),
  "comment": zod.string().max(createApprovalRequestsPaidHolidayBodyCommentMaxOne).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(createApprovalRequestsPaidHolidayBodyApprovalFlowRouteIdMaxOne).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(createApprovalRequestsPaidHolidayBodyApproverIdMaxOne).optional().describe('承認者のユーザーID')
})])


export const getApprovalRequestsPaidHolidayPathIdMax = 2147483647;


export const getApprovalRequestsPaidHolidayParams = zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsPaidHolidayPathIdMax).describe('有給申請ID')
})

export const getApprovalRequestsPaidHolidayQueryCompanyIdMax = 2147483647;


export const getApprovalRequestsPaidHolidayQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsPaidHolidayQueryCompanyIdMax).describe('事業所ID')
})

export const getApprovalRequestsPaidHolidayResponsePaidHolidayIdMax = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayCompanyIdMax = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApplicationNumberMax = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApplicantIdMax = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApproverIdsItemMax = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidayResponsePaidHolidayValuesItemStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsPaidHolidayResponsePaidHolidayValuesItemEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsPaidHolidayResponsePaidHolidayIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidayResponsePaidHolidayCommentMax = 255;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowRouteIdMax = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMin = 0;

export const getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMax = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentStepIdMax = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMin = 0;

export const getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMax = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayIdMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayCompanyIdMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApplicationNumberMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApplicantIdMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApproverIdsItemMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayTargetDateRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidayResponsePaidHolidayStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsPaidHolidayResponsePaidHolidayEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsPaidHolidayResponsePaidHolidayIssueDateRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsPaidHolidayResponsePaidHolidayCommentMaxOne = 255;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowRouteIdMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMinOne = 0;

export const getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentStepIdMaxOne = 2147483647;
export const getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMinOne = 0;

export const getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMaxOne = 2147483647;


export const getApprovalRequestsPaidHolidayResponse = zod.object({
  "paid_holiday": zod.union([zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsPaidHolidayResponsePaidHolidayTargetDateRegExp).describe('対象日'),
  "values": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hourly']).describe('取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hourly:時間休）'),
  "start_at": zod.string().regex(getApprovalRequestsPaidHolidayResponsePaidHolidayValuesItemStartAtRegExp).nullish().describe('取得予定開始時間'),
  "end_at": zod.string().regex(getApprovalRequestsPaidHolidayResponsePaidHolidayValuesItemEndAtRegExp).nullish().describe('取得予定終了時間')
})),
  "issue_date": zod.string().date().regex(getApprovalRequestsPaidHolidayResponsePaidHolidayIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsPaidHolidayResponsePaidHolidayCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMin).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMin).max(getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
}),zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayIdMaxOne).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayCompanyIdMaxOne).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApplicationNumberMaxOne).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApplicantIdMaxOne).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApproverIdsItemMaxOne).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsPaidHolidayResponsePaidHolidayTargetDateRegExpOne).describe('対象日'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('[deprecated] 取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休）※ 削除予定のため paid_holiday->values->type を参照してください'),
  "start_at": zod.string().regex(getApprovalRequestsPaidHolidayResponsePaidHolidayStartAtRegExp).nullish().describe('[deprecated] 取得予定開始時間 ※ 削除予定のため paid_holiday->values->start_at を参照してください'),
  "end_at": zod.string().regex(getApprovalRequestsPaidHolidayResponsePaidHolidayEndAtRegExp).nullish().describe('[deprecated] 取得予定終了時間 ※ 削除予定のため paid_holiday->values->end_at を参照してください'),
  "issue_date": zod.string().date().regex(getApprovalRequestsPaidHolidayResponsePaidHolidayIssueDateRegExpOne).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsPaidHolidayResponsePaidHolidayCommentMaxOne).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowRouteIdMaxOne).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMinOne).max(getApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMaxOne).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentStepIdMaxOne).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMinOne).max(getApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMaxOne).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})])
})


export const updateApprovalRequestsPaidHolidayPathIdMax = 2147483647;


export const updateApprovalRequestsPaidHolidayParams = zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayPathIdMax).describe('有給申請ID')
})

export const updateApprovalRequestsPaidHolidayBodyCompanyIdMax = 2147483647;
export const updateApprovalRequestsPaidHolidayBodyTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsPaidHolidayBodyValuesItemStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsPaidHolidayBodyValuesItemEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsPaidHolidayBodyCommentMax = 255;
export const updateApprovalRequestsPaidHolidayBodyApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsPaidHolidayBodyApproverIdMax = 2147483647;
export const updateApprovalRequestsPaidHolidayBodyCompanyIdMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayBodyTargetDateRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsPaidHolidayBodyStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}?$');
export const updateApprovalRequestsPaidHolidayBodyEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}?$');
export const updateApprovalRequestsPaidHolidayBodyCommentMaxOne = 255;
export const updateApprovalRequestsPaidHolidayBodyApprovalFlowRouteIdMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayBodyApproverIdMaxOne = 2147483647;


export const updateApprovalRequestsPaidHolidayBody = zod.union([zod.object({
  "company_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayBodyCompanyIdMax).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(updateApprovalRequestsPaidHolidayBodyTargetDateRegExp).describe('対象日（必須）'),
  "values": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hourly']).describe('取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hourly:時間休）'),
  "start_at": zod.string().regex(updateApprovalRequestsPaidHolidayBodyValuesItemStartAtRegExp).nullish().describe('取得予定開始時間 ※ 全休の場合や午前休、午後休の場合にはこちらの値は参照されません'),
  "end_at": zod.string().regex(updateApprovalRequestsPaidHolidayBodyValuesItemEndAtRegExp).nullish().describe('取得予定終了時間 ※ 全休の場合や午前休、午後休の場合にはこちらの値は参照されません')
})),
  "comment": zod.string().max(updateApprovalRequestsPaidHolidayBodyCommentMax).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayBodyApproverIdMax).optional().describe('承認者のユーザーID')
}),zod.object({
  "company_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayBodyCompanyIdMaxOne).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(updateApprovalRequestsPaidHolidayBodyTargetDateRegExpOne).describe('対象日（必須）'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('[deprecated] 取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休） ※ paid_holidays->values を指定している場合にはこちらの値は参照されません ※ 削除予定のためvalues->type を指定してください'),
  "start_at": zod.string().regex(updateApprovalRequestsPaidHolidayBodyStartAtRegExp).optional().describe('[deprecated] 取得予定開始時間 ※ paid_holidays->values を指定している場合にはこちらの値は参照されません ※ 削除予定のため values->start_at を指定してください'),
  "end_at": zod.string().regex(updateApprovalRequestsPaidHolidayBodyEndAtRegExp).optional().describe('[deprecated] 取得予定終了時間 ※ paid_holidays->values を指定している場合にはこちらの値は参照されません ※ 削除予定のため values->end_at を指定してください'),
  "comment": zod.string().max(updateApprovalRequestsPaidHolidayBodyCommentMaxOne).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayBodyApprovalFlowRouteIdMaxOne).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayBodyApproverIdMaxOne).optional().describe('承認者のユーザーID')
})])

export const updateApprovalRequestsPaidHolidayResponsePaidHolidayIdMax = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCompanyIdMax = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApplicationNumberMax = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApplicantIdMax = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApproverIdsItemMax = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayValuesItemStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayValuesItemEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCommentMax = 255;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMin = 0;

export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMax = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentStepIdMax = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMin = 0;

export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMax = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayIdMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCompanyIdMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApplicationNumberMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApplicantIdMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApproverIdsItemMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayTargetDateRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayIssueDateRegExpOne = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCommentMaxOne = 255;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowRouteIdMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMinOne = 0;

export const updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentStepIdMaxOne = 2147483647;
export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMinOne = 0;

export const updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMaxOne = 2147483647;


export const updateApprovalRequestsPaidHolidayResponse = zod.object({
  "paid_holiday": zod.union([zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(updateApprovalRequestsPaidHolidayResponsePaidHolidayTargetDateRegExp).describe('対象日'),
  "values": zod.array(zod.object({
  "type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hourly']).describe('取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hourly:時間休）'),
  "start_at": zod.string().regex(updateApprovalRequestsPaidHolidayResponsePaidHolidayValuesItemStartAtRegExp).nullish().describe('取得予定開始時間'),
  "end_at": zod.string().regex(updateApprovalRequestsPaidHolidayResponsePaidHolidayValuesItemEndAtRegExp).nullish().describe('取得予定終了時間')
})),
  "issue_date": zod.string().date().regex(updateApprovalRequestsPaidHolidayResponsePaidHolidayIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(updateApprovalRequestsPaidHolidayResponsePaidHolidayCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMin).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMin).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
}),zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayIdMaxOne).describe('申請ID'),
  "company_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayCompanyIdMaxOne).describe('事業所ID'),
  "application_number": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApplicationNumberMaxOne).describe('申請No'),
  "applicant_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApplicantIdMaxOne).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApproverIdsItemMaxOne).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(updateApprovalRequestsPaidHolidayResponsePaidHolidayTargetDateRegExpOne).describe('対象日'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('[deprecated] 取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休）※ 削除予定のため paid_holiday->values->type を参照してください'),
  "start_at": zod.string().regex(updateApprovalRequestsPaidHolidayResponsePaidHolidayStartAtRegExp).nullish().describe('[deprecated] 取得予定開始時間 ※ 削除予定のため paid_holiday->values->start_at を参照してください'),
  "end_at": zod.string().regex(updateApprovalRequestsPaidHolidayResponsePaidHolidayEndAtRegExp).nullish().describe('[deprecated] 取得予定終了時間 ※ 削除予定のため paid_holiday->values->end_at を参照してください'),
  "issue_date": zod.string().date().regex(updateApprovalRequestsPaidHolidayResponsePaidHolidayIssueDateRegExpOne).describe('申請日'),
  "comment": zod.string().max(updateApprovalRequestsPaidHolidayResponsePaidHolidayCommentMaxOne).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowRouteIdMaxOne).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMinOne).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayApprovalFlowLogsItemUserIdMaxOne).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentStepIdMaxOne).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMinOne).max(updateApprovalRequestsPaidHolidayResponsePaidHolidayCurrentRoundMaxOne).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})])
})


export const destroyApprovalRequestsPaidHolidayPathIdMax = 2147483647;


export const destroyApprovalRequestsPaidHolidayParams = zod.object({
  "id": zod.number().min(1).max(destroyApprovalRequestsPaidHolidayPathIdMax).describe('有給申請ID')
})

export const destroyApprovalRequestsPaidHolidayQueryCompanyIdMax = 2147483647;


export const destroyApprovalRequestsPaidHolidayQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyApprovalRequestsPaidHolidayQueryCompanyIdMax).describe('事業所ID')
})


export const actionApprovalRequestsPaidHolidayPathIdMax = 2147483647;


export const actionApprovalRequestsPaidHolidayParams = zod.object({
  "id": zod.number().min(1).max(actionApprovalRequestsPaidHolidayPathIdMax).describe('有給申請ID')
})

export const actionApprovalRequestsPaidHolidayBodyCompanyIdMax = 2147483647;
export const actionApprovalRequestsPaidHolidayBodyTargetRoundMax = 2147483647;
export const actionApprovalRequestsPaidHolidayBodyTargetStepIdMax = 2147483647;
export const actionApprovalRequestsPaidHolidayBodyNextApproverIdMax = 2147483647;


export const actionApprovalRequestsPaidHolidayBody = zod.object({
  "company_id": zod.number().min(1).max(actionApprovalRequestsPaidHolidayBodyCompanyIdMax).describe('事業所ID'),
  "approval_action": zod.enum(['approve', 'cancel', 'feedback', 'force_feedback']).describe('申請操作。（approve:承認、cancel:取り消し、feedback:差戻し、force_feedback:承認取り消し）'),
  "target_round": zod.number().min(1).max(actionApprovalRequestsPaidHolidayBodyTargetRoundMax).nullable().describe('対象round。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。取得APIレスポンス.current_roundを送信してください。'),
  "target_step_id": zod.number().min(1).max(actionApprovalRequestsPaidHolidayBodyTargetStepIdMax).nullable().describe('対象承認ステップID。取得APIレスポンス.current_step_idを送信してください。'),
  "next_approver_id": zod.number().min(1).max(actionApprovalRequestsPaidHolidayBodyNextApproverIdMax).nullish().describe('次のステップの承認者のユーザーID')
})


export const getApprovalRequestsSpecialHolidaysQueryCompanyIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysQueryApplicationNumberMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysQueryStartIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsSpecialHolidaysQueryEndIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsSpecialHolidaysQueryApproverIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysQueryApplicantIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysQueryStartTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsSpecialHolidaysQueryEndTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsSpecialHolidaysQueryLimitMax = 100;
export const getApprovalRequestsSpecialHolidaysQueryOffsetMin = 0;

export const getApprovalRequestsSpecialHolidaysQueryOffsetMax = 2147483647;


export const getApprovalRequestsSpecialHolidaysQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysQueryCompanyIdMax).describe('事業所ID'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).optional().describe('申請ステータス\n- `draft` - 下書き\n- `in_progress` - 申請中\n- `approved` - 承認済\n- `feedback` - 差戻し'),
  "application_number": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysQueryApplicationNumberMax).optional().describe('申請No'),
  "start_issue_date": zod.string().date().regex(getApprovalRequestsSpecialHolidaysQueryStartIssueDateRegExp).optional().describe('申請開始日'),
  "end_issue_date": zod.string().date().regex(getApprovalRequestsSpecialHolidaysQueryEndIssueDateRegExp).optional().describe('申請終了日'),
  "approver_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysQueryApproverIdMax).optional().describe('現在承認ステップの承認者のユーザーID\n\napprover_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません\n'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysQueryApplicantIdMax).optional().describe('申請者のユーザーID'),
  "start_target_date": zod.string().date().regex(getApprovalRequestsSpecialHolidaysQueryStartTargetDateRegExp).optional().describe('対象開始日'),
  "end_target_date": zod.string().date().regex(getApprovalRequestsSpecialHolidaysQueryEndTargetDateRegExp).optional().describe('対象終了日'),
  "passed_auto_check": zod.boolean().optional().describe('自動チェック結果\n- trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。\n- falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。\n- キーごと指定しない場合、すべての申請を返却します。'),
  "limit": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getApprovalRequestsSpecialHolidaysQueryOffsetMin).max(getApprovalRequestsSpecialHolidaysQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemCompanyIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemApplicationNumberMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemApplicantIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemApproverIdsItemMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemSpecialHolidaySettingIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemSpecialHolidayNameMax = 255;
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemCommentMax = 255;
export const getApprovalRequestsSpecialHolidaysResponseTotalCountMin = 0;

export const getApprovalRequestsSpecialHolidaysResponseTotalCountMax = 2147483647;


export const getApprovalRequestsSpecialHolidaysResponse = zod.object({
  "special_holidays": zod.array(zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemTargetDateRegExp).describe('対象日'),
  "special_holiday_setting_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemSpecialHolidaySettingIdMax).describe('特別休暇設定ID'),
  "special_holiday_name": zod.string().max(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemSpecialHolidayNameMax).describe('特別休暇名称'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('取得単位。（full:全休、half:半休、morning:午前休、afternoon:午後休、hour:時間休）'),
  "start_at": zod.string().regex(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemStartAtRegExp).nullish().describe('取得予定開始時間'),
  "end_at": zod.string().regex(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemEndAtRegExp).nullish().describe('取得予定終了時間'),
  "issue_date": zod.string().date().regex(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsSpecialHolidaysResponseSpecialHolidaysItemCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果')
})),
  "total_count": zod.number().min(getApprovalRequestsSpecialHolidaysResponseTotalCountMin).max(getApprovalRequestsSpecialHolidaysResponseTotalCountMax).describe('合計件数')
})


export const createApprovalRequestsSpecialHolidayBodyCompanyIdMax = 2147483647;
export const createApprovalRequestsSpecialHolidayBodyTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const createApprovalRequestsSpecialHolidayBodySpecialHolidaySettingIdMax = 2147483647;
export const createApprovalRequestsSpecialHolidayBodyStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}?$');
export const createApprovalRequestsSpecialHolidayBodyEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}?$');
export const createApprovalRequestsSpecialHolidayBodyCommentMax = 255;
export const createApprovalRequestsSpecialHolidayBodyApprovalFlowRouteIdMax = 2147483647;
export const createApprovalRequestsSpecialHolidayBodyApproverIdMax = 2147483647;


export const createApprovalRequestsSpecialHolidayBody = zod.object({
  "company_id": zod.number().min(1).max(createApprovalRequestsSpecialHolidayBodyCompanyIdMax).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(createApprovalRequestsSpecialHolidayBodyTargetDateRegExp).describe('対象日（必須）'),
  "special_holiday_setting_id": zod.number().min(1).max(createApprovalRequestsSpecialHolidayBodySpecialHolidaySettingIdMax).describe('特別休暇設定ID（必須）'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('取得単位（必須）（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休）'),
  "start_at": zod.string().regex(createApprovalRequestsSpecialHolidayBodyStartAtRegExp).optional().describe('取得予定開始時間（条件付き必須）\n取得単位が半休、時間休の場合は必須'),
  "end_at": zod.string().regex(createApprovalRequestsSpecialHolidayBodyEndAtRegExp).optional().describe('取得予定終了時間（条件付き必須）\n取得単位が半休、時間休の場合は必須'),
  "comment": zod.string().max(createApprovalRequestsSpecialHolidayBodyCommentMax).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(createApprovalRequestsSpecialHolidayBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(createApprovalRequestsSpecialHolidayBodyApproverIdMax).optional().describe('承認者のユーザーID')
})


export const getApprovalRequestsSpecialHolidayPathIdMax = 2147483647;


export const getApprovalRequestsSpecialHolidayParams = zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsSpecialHolidayPathIdMax).describe('特別休暇申請ID')
})

export const getApprovalRequestsSpecialHolidayQueryCompanyIdMax = 2147483647;


export const getApprovalRequestsSpecialHolidayQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidayQueryCompanyIdMax).describe('事業所ID')
})

export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayCompanyIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayApplicationNumberMax = 2147483647;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayApplicantIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayApproverIdsItemMax = 2147483647;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidaySpecialHolidaySettingIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidaySpecialHolidayNameMax = 255;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayCommentMax = 255;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowRouteIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowLogsItemUserIdMin = 0;

export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowLogsItemUserIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentStepIdMax = 2147483647;
export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentRoundMin = 0;

export const getApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentRoundMax = 2147483647;


export const getApprovalRequestsSpecialHolidayResponse = zod.object({
  "special_holiday": zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsSpecialHolidayResponseSpecialHolidayTargetDateRegExp).describe('対象日'),
  "special_holiday_setting_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidaySpecialHolidaySettingIdMax).describe('特別休暇設定ID'),
  "special_holiday_name": zod.string().max(getApprovalRequestsSpecialHolidayResponseSpecialHolidaySpecialHolidayNameMax).describe('特別休暇名称'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('取得単位。（full:全休、half:半休、morning:午前休、afternoon:午後休、hour:時間休）'),
  "start_at": zod.string().regex(getApprovalRequestsSpecialHolidayResponseSpecialHolidayStartAtRegExp).nullish().describe('取得予定開始時間'),
  "end_at": zod.string().regex(getApprovalRequestsSpecialHolidayResponseSpecialHolidayEndAtRegExp).nullish().describe('取得予定終了時間'),
  "issue_date": zod.string().date().regex(getApprovalRequestsSpecialHolidayResponseSpecialHolidayIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(getApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowLogsItemUserIdMin).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(getApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentRoundMin).max(getApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})
})


export const updateApprovalRequestsSpecialHolidayPathIdMax = 2147483647;


export const updateApprovalRequestsSpecialHolidayParams = zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayPathIdMax).describe('特別休暇申請ID')
})

export const updateApprovalRequestsSpecialHolidayBodyCompanyIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayBodyTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsSpecialHolidayBodySpecialHolidaySettingIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayBodyStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}?$');
export const updateApprovalRequestsSpecialHolidayBodyEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}?$');
export const updateApprovalRequestsSpecialHolidayBodyCommentMax = 255;
export const updateApprovalRequestsSpecialHolidayBodyApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayBodyApproverIdMax = 2147483647;


export const updateApprovalRequestsSpecialHolidayBody = zod.object({
  "company_id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayBodyCompanyIdMax).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(updateApprovalRequestsSpecialHolidayBodyTargetDateRegExp).describe('対象日（必須）'),
  "special_holiday_setting_id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayBodySpecialHolidaySettingIdMax).describe('特別休暇設定ID（必須）'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('取得単位（必須）（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休）'),
  "start_at": zod.string().regex(updateApprovalRequestsSpecialHolidayBodyStartAtRegExp).optional().describe('取得予定開始時間（条件付き必須）\n取得単位が半休、時間休の場合は必須'),
  "end_at": zod.string().regex(updateApprovalRequestsSpecialHolidayBodyEndAtRegExp).optional().describe('取得予定終了時間（条件付き必須）\n取得単位が半休、時間休の場合は必須'),
  "comment": zod.string().max(updateApprovalRequestsSpecialHolidayBodyCommentMax).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayBodyApproverIdMax).optional().describe('承認者のユーザーID')
})

export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCompanyIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApplicationNumberMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApplicantIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApproverIdsItemMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidaySpecialHolidaySettingIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidaySpecialHolidayNameMax = 255;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCommentMax = 255;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowLogsItemUserIdMin = 0;

export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowLogsItemUserIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentStepIdMax = 2147483647;
export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentRoundMin = 0;

export const updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentRoundMax = 2147483647;


export const updateApprovalRequestsSpecialHolidayResponse = zod.object({
  "special_holiday": zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayTargetDateRegExp).describe('対象日'),
  "special_holiday_setting_id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidaySpecialHolidaySettingIdMax).describe('特別休暇設定ID'),
  "special_holiday_name": zod.string().max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidaySpecialHolidayNameMax).describe('特別休暇名称'),
  "holiday_type": zod.enum(['full', 'half', 'morning', 'afternoon', 'hour']).describe('取得単位。（full:全休、half:半休、morning:午前休、afternoon:午後休、hour:時間休）'),
  "start_at": zod.string().regex(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayStartAtRegExp).nullish().describe('取得予定開始時間'),
  "end_at": zod.string().regex(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayEndAtRegExp).nullish().describe('取得予定終了時間'),
  "issue_date": zod.string().date().regex(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowLogsItemUserIdMin).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentRoundMin).max(updateApprovalRequestsSpecialHolidayResponseSpecialHolidayCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})
})


export const destroyApprovalRequestsSpecialHolidayPathIdMax = 2147483647;


export const destroyApprovalRequestsSpecialHolidayParams = zod.object({
  "id": zod.number().min(1).max(destroyApprovalRequestsSpecialHolidayPathIdMax).describe('特別休暇申請ID')
})

export const destroyApprovalRequestsSpecialHolidayQueryCompanyIdMax = 2147483647;


export const destroyApprovalRequestsSpecialHolidayQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyApprovalRequestsSpecialHolidayQueryCompanyIdMax).describe('事業所ID')
})


export const actionApprovalRequestsSpecialHolidayPathIdMax = 2147483647;


export const actionApprovalRequestsSpecialHolidayParams = zod.object({
  "id": zod.number().min(1).max(actionApprovalRequestsSpecialHolidayPathIdMax).describe('特別休暇申請ID')
})

export const actionApprovalRequestsSpecialHolidayBodyCompanyIdMax = 2147483647;
export const actionApprovalRequestsSpecialHolidayBodyTargetRoundMax = 2147483647;
export const actionApprovalRequestsSpecialHolidayBodyTargetStepIdMax = 2147483647;
export const actionApprovalRequestsSpecialHolidayBodyNextApproverIdMax = 2147483647;


export const actionApprovalRequestsSpecialHolidayBody = zod.object({
  "company_id": zod.number().min(1).max(actionApprovalRequestsSpecialHolidayBodyCompanyIdMax).describe('事業所ID'),
  "approval_action": zod.enum(['approve', 'cancel', 'feedback', 'force_feedback']).describe('申請操作。（approve:承認、cancel:取り消し、feedback:差戻し、force_feedback:承認取り消し）'),
  "target_round": zod.number().min(1).max(actionApprovalRequestsSpecialHolidayBodyTargetRoundMax).nullable().describe('対象round。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。取得APIレスポンス.current_roundを送信してください。'),
  "target_step_id": zod.number().min(1).max(actionApprovalRequestsSpecialHolidayBodyTargetStepIdMax).nullable().describe('対象承認ステップID。取得APIレスポンス.current_step_idを送信してください。'),
  "next_approver_id": zod.number().min(1).max(actionApprovalRequestsSpecialHolidayBodyNextApproverIdMax).nullish().describe('次のステップの承認者のユーザーID')
})


export const getApprovalRequestsOvertimeWorksQueryCompanyIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorksQueryApplicationNumberMax = 2147483647;
export const getApprovalRequestsOvertimeWorksQueryStartIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsOvertimeWorksQueryEndIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsOvertimeWorksQueryApproverIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorksQueryApplicantIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorksQueryStartTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsOvertimeWorksQueryEndTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsOvertimeWorksQueryLimitMax = 100;
export const getApprovalRequestsOvertimeWorksQueryOffsetMin = 0;

export const getApprovalRequestsOvertimeWorksQueryOffsetMax = 2147483647;


export const getApprovalRequestsOvertimeWorksQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorksQueryCompanyIdMax).describe('事業所ID'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).optional().describe('申請ステータス\n- `draft` - 下書き\n- `in_progress` - 申請中\n- `approved` - 承認済\n- `feedback` - 差戻し'),
  "application_number": zod.number().min(1).max(getApprovalRequestsOvertimeWorksQueryApplicationNumberMax).optional().describe('申請No'),
  "start_issue_date": zod.string().date().regex(getApprovalRequestsOvertimeWorksQueryStartIssueDateRegExp).optional().describe('申請開始日'),
  "end_issue_date": zod.string().date().regex(getApprovalRequestsOvertimeWorksQueryEndIssueDateRegExp).optional().describe('申請終了日'),
  "approver_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorksQueryApproverIdMax).optional().describe('現在承認ステップの承認者のユーザーID\n\napprover_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません\n'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorksQueryApplicantIdMax).optional().describe('申請者のユーザーID'),
  "start_target_date": zod.string().date().regex(getApprovalRequestsOvertimeWorksQueryStartTargetDateRegExp).optional().describe('対象開始日'),
  "end_target_date": zod.string().date().regex(getApprovalRequestsOvertimeWorksQueryEndTargetDateRegExp).optional().describe('対象終了日'),
  "passed_auto_check": zod.boolean().optional().describe('自動チェック結果\n- trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。\n- falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。\n- キーごと指定しない場合、すべての申請を返却します。'),
  "limit": zod.number().min(1).max(getApprovalRequestsOvertimeWorksQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getApprovalRequestsOvertimeWorksQueryOffsetMin).max(getApprovalRequestsOvertimeWorksQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemCompanyIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemApplicationNumberMax = 2147483647;
export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemApplicantIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemApproverIdsItemMax = 2147483647;
export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemCommentMax = 255;
export const getApprovalRequestsOvertimeWorksResponseTotalCountMin = 0;

export const getApprovalRequestsOvertimeWorksResponseTotalCountMax = 2147483647;


export const getApprovalRequestsOvertimeWorksResponse = zod.object({
  "overtime_works": zod.array(zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemTargetDateRegExp).describe('対象日'),
  "start_at": zod.string().regex(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemStartAtRegExp).optional().describe('取得予定開始時間（必須）'),
  "end_at": zod.string().regex(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemEndAtRegExp).optional().describe('取得予定終了時間（必須）'),
  "issue_date": zod.string().date().regex(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsOvertimeWorksResponseOvertimeWorksItemCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果')
})),
  "total_count": zod.number().min(getApprovalRequestsOvertimeWorksResponseTotalCountMin).max(getApprovalRequestsOvertimeWorksResponseTotalCountMax).describe('合計件数')
})


export const createApprovalRequestsOvertimeWorkBodyCompanyIdMax = 2147483647;
export const createApprovalRequestsOvertimeWorkBodyTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const createApprovalRequestsOvertimeWorkBodyStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsOvertimeWorkBodyEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsOvertimeWorkBodyEarlyWorkStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsOvertimeWorkBodyEarlyWorkEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsOvertimeWorkBodyOvertimeWorkStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsOvertimeWorkBodyOvertimeWorkEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const createApprovalRequestsOvertimeWorkBodyCommentMax = 255;
export const createApprovalRequestsOvertimeWorkBodyApprovalFlowRouteIdMax = 2147483647;
export const createApprovalRequestsOvertimeWorkBodyApproverIdMax = 2147483647;


export const createApprovalRequestsOvertimeWorkBody = zod.object({
  "company_id": zod.number().min(1).max(createApprovalRequestsOvertimeWorkBodyCompanyIdMax).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(createApprovalRequestsOvertimeWorkBodyTargetDateRegExp).describe('対象日（必須）'),
  "start_at": zod.string().regex(createApprovalRequestsOvertimeWorkBodyStartAtRegExp).optional().describe('取得予定開始時間'),
  "end_at": zod.string().regex(createApprovalRequestsOvertimeWorkBodyEndAtRegExp).optional().describe('取得予定終了時間'),
  "early_work_start_at": zod.string().regex(createApprovalRequestsOvertimeWorkBodyEarlyWorkStartAtRegExp).nullish().describe('実績反映ありの早出申請の開始予定時刻  \n実績反映ありの早出申請する場合は必須'),
  "early_work_end_at": zod.string().regex(createApprovalRequestsOvertimeWorkBodyEarlyWorkEndAtRegExp).nullish().describe('実績反映ありの早出申請の終了予定時刻  \n実績反映ありの早出申請する場合は必須'),
  "overtime_work_start_at": zod.string().regex(createApprovalRequestsOvertimeWorkBodyOvertimeWorkStartAtRegExp).nullish().describe('実績反映ありの残業申請の開始予定時刻  \n実績反映ありの残業申請する場合は必須'),
  "overtime_work_end_at": zod.string().regex(createApprovalRequestsOvertimeWorkBodyOvertimeWorkEndAtRegExp).nullish().describe('実績反映ありの残業申請の終了予定時刻  \n実績反映ありの残業申請する場合は必須'),
  "comment": zod.string().max(createApprovalRequestsOvertimeWorkBodyCommentMax).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(createApprovalRequestsOvertimeWorkBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(createApprovalRequestsOvertimeWorkBodyApproverIdMax).optional().describe('承認者のユーザーID')
})


export const getApprovalRequestsOvertimeWorkPathIdMax = 2147483647;


export const getApprovalRequestsOvertimeWorkParams = zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsOvertimeWorkPathIdMax).describe('残業申請ID')
})

export const getApprovalRequestsOvertimeWorkQueryCompanyIdMax = 2147483647;


export const getApprovalRequestsOvertimeWorkQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorkQueryCompanyIdMax).describe('事業所ID')
})

export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkCompanyIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkApplicationNumberMax = 2147483647;
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkApplicantIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkApproverIdsItemMax = 2147483647;
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkCommentMax = 255;
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowRouteIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowLogsItemUserIdMin = 0;

export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowLogsItemUserIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentStepIdMax = 2147483647;
export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentRoundMin = 0;

export const getApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentRoundMax = 2147483647;


export const getApprovalRequestsOvertimeWorkResponse = zod.object({
  "overtime_work": zod.object({
  "id": zod.number().min(1).max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(getApprovalRequestsOvertimeWorkResponseOvertimeWorkTargetDateRegExp).describe('対象日'),
  "start_at": zod.string().regex(getApprovalRequestsOvertimeWorkResponseOvertimeWorkStartAtRegExp).optional().describe('取得予定開始時間（必須）'),
  "end_at": zod.string().regex(getApprovalRequestsOvertimeWorkResponseOvertimeWorkEndAtRegExp).optional().describe('取得予定終了時間（必須）'),
  "issue_date": zod.string().date().regex(getApprovalRequestsOvertimeWorkResponseOvertimeWorkIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(getApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowLogsItemUserIdMin).max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(getApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentRoundMin).max(getApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})
})


export const updateApprovalRequestsOvertimeWorkPathIdMax = 2147483647;


export const updateApprovalRequestsOvertimeWorkParams = zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkPathIdMax).describe('残業申請ID')
})

export const updateApprovalRequestsOvertimeWorkBodyCompanyIdMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkBodyTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsOvertimeWorkBodyStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsOvertimeWorkBodyEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsOvertimeWorkBodyEarlyWorkStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsOvertimeWorkBodyEarlyWorkEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsOvertimeWorkBodyOvertimeWorkStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsOvertimeWorkBodyOvertimeWorkEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsOvertimeWorkBodyCommentMax = 255;
export const updateApprovalRequestsOvertimeWorkBodyApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkBodyApproverIdMax = 2147483647;


export const updateApprovalRequestsOvertimeWorkBody = zod.object({
  "company_id": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkBodyCompanyIdMax).describe('事業所ID（必須）'),
  "target_date": zod.string().date().regex(updateApprovalRequestsOvertimeWorkBodyTargetDateRegExp).describe('対象日（必須）'),
  "start_at": zod.string().regex(updateApprovalRequestsOvertimeWorkBodyStartAtRegExp).optional().describe('取得予定開始時間'),
  "end_at": zod.string().regex(updateApprovalRequestsOvertimeWorkBodyEndAtRegExp).optional().describe('取得予定終了時間'),
  "early_work_start_at": zod.string().regex(updateApprovalRequestsOvertimeWorkBodyEarlyWorkStartAtRegExp).nullish().describe('実績反映ありの早出申請の開始予定時刻  \n実績反映ありの早出申請する場合は必須'),
  "early_work_end_at": zod.string().regex(updateApprovalRequestsOvertimeWorkBodyEarlyWorkEndAtRegExp).nullish().describe('実績反映ありの早出申請の終了予定時刻  \n実績反映ありの早出申請する場合は必須'),
  "overtime_work_start_at": zod.string().regex(updateApprovalRequestsOvertimeWorkBodyOvertimeWorkStartAtRegExp).nullish().describe('実績反映ありの残業申請の開始予定時刻  \n実績反映ありの残業申請する場合は必須'),
  "overtime_work_end_at": zod.string().regex(updateApprovalRequestsOvertimeWorkBodyOvertimeWorkEndAtRegExp).nullish().describe('実績反映ありの残業申請の終了予定時刻  \n実績反映ありの残業申請する場合は必須'),
  "comment": zod.string().max(updateApprovalRequestsOvertimeWorkBodyCommentMax).optional().describe('申請理由'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkBodyApprovalFlowRouteIdMax).describe('申請経路ID（必須）'),
  "approver_id": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkBodyApproverIdMax).optional().describe('承認者のユーザーID')
})

export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkIdMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCompanyIdMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApplicationNumberMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApplicantIdMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApproverIdsItemMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkTargetDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkStartAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkEndAtRegExp = new RegExp('^[0-9]{2}:[0-9]{2}(:[0-9]{2})?$');
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkIssueDateRegExp = new RegExp('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCommentMax = 255;
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowRouteIdMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowLogsItemUserIdMin = 0;

export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowLogsItemUserIdMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentStepIdMax = 2147483647;
export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentRoundMin = 0;

export const updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentRoundMax = 2147483647;


export const updateApprovalRequestsOvertimeWorkResponse = zod.object({
  "overtime_work": zod.object({
  "id": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkIdMax).describe('申請ID'),
  "company_id": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCompanyIdMax).describe('事業所ID'),
  "application_number": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApplicationNumberMax).describe('申請No'),
  "applicant_id": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApplicantIdMax).describe('申請者のユーザーID'),
  "approver_ids": zod.array(zod.number().min(1).max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApproverIdsItemMax).nullable().describe('承認者のユーザーID')).optional().describe('承認者のユーザーID配列<br>\n次の場合、空配列になります。\n- 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請\n- 申請が差戻された'),
  "target_date": zod.string().date().regex(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkTargetDateRegExp).describe('対象日'),
  "start_at": zod.string().regex(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkStartAtRegExp).optional().describe('取得予定開始時間（必須）'),
  "end_at": zod.string().regex(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkEndAtRegExp).optional().describe('取得予定終了時間（必須）'),
  "issue_date": zod.string().date().regex(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkIssueDateRegExp).describe('申請日'),
  "comment": zod.string().max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCommentMax).nullish().describe('申請理由'),
  "status": zod.enum(['draft', 'in_progress', 'approved', 'feedback']).describe('申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）'),
  "revoke_status": zod.enum(['revoking', 'revoked']).nullable().describe('取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）'),
  "passed_auto_check": zod.boolean().describe('自動チェック結果'),
  "approval_flow_route_id": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowRouteIdMax).describe('申請経路ID'),
  "approval_flow_route_name": zod.string().describe('申請経路名'),
  "approval_flow_logs": zod.array(zod.object({
  "user_id": zod.number().min(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowLogsItemUserIdMin).max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkApprovalFlowLogsItemUserIdMax).optional().describe('申請操作をしたユーザーのユーザーID'),
  "action": zod.enum(['apply', 'approve', 'cancel', 'feedback']).optional().describe('申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）'),
  "update_at": zod.string().datetime({}).optional().describe('申請操作をした日付時間')
})).describe('承認履歴'),
  "current_step_id": zod.number().min(1).max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentStepIdMax).nullish().describe('現在承認ステップID<br>\n申請を差戻した場合、nullになります。'),
  "current_round": zod.number().min(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentRoundMin).max(updateApprovalRequestsOvertimeWorkResponseOvertimeWorkCurrentRoundMax).describe('現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。')
})
})


export const destroyApprovalRequestsOvertimeWorkPathIdMax = 2147483647;


export const destroyApprovalRequestsOvertimeWorkParams = zod.object({
  "id": zod.number().min(1).max(destroyApprovalRequestsOvertimeWorkPathIdMax).describe('残業申請ID')
})

export const destroyApprovalRequestsOvertimeWorkQueryCompanyIdMax = 2147483647;


export const destroyApprovalRequestsOvertimeWorkQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyApprovalRequestsOvertimeWorkQueryCompanyIdMax).describe('事業所ID')
})


export const actionApprovalRequestsOvertimeWorkPathIdMax = 2147483647;


export const actionApprovalRequestsOvertimeWorkParams = zod.object({
  "id": zod.number().min(1).max(actionApprovalRequestsOvertimeWorkPathIdMax).describe('残業申請ID')
})

export const actionApprovalRequestsOvertimeWorkBodyCompanyIdMax = 2147483647;
export const actionApprovalRequestsOvertimeWorkBodyTargetRoundMax = 2147483647;
export const actionApprovalRequestsOvertimeWorkBodyTargetStepIdMax = 2147483647;
export const actionApprovalRequestsOvertimeWorkBodyNextApproverIdMax = 2147483647;


export const actionApprovalRequestsOvertimeWorkBody = zod.object({
  "company_id": zod.number().min(1).max(actionApprovalRequestsOvertimeWorkBodyCompanyIdMax).describe('事業所ID'),
  "approval_action": zod.enum(['approve', 'cancel', 'feedback', 'force_feedback']).describe('申請操作。（approve:承認、cancel:取り消し、feedback:差戻し、force_feedback:承認取り消し）'),
  "target_round": zod.number().min(1).max(actionApprovalRequestsOvertimeWorkBodyTargetRoundMax).nullable().describe('対象round。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。取得APIレスポンス.current_roundを送信してください。'),
  "target_step_id": zod.number().min(1).max(actionApprovalRequestsOvertimeWorkBodyTargetStepIdMax).nullable().describe('対象承認ステップID。取得APIレスポンス.current_step_idを送信してください。'),
  "next_approver_id": zod.number().min(1).max(actionApprovalRequestsOvertimeWorkBodyNextApproverIdMax).nullish().describe('次のステップの承認者のユーザーID')
})


export const getApprovalRequestsOvertimeWorkSettingQueryCompanyIdMax = 2147483647;


export const getApprovalRequestsOvertimeWorkSettingQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalRequestsOvertimeWorkSettingQueryCompanyIdMax).describe('事業所ID'),
  "date": zod.string().describe('対象日(YYYY-MM-DD)(例:2018-08-01)\n- 申請の対象日を指定してください。')
})

export const getApprovalRequestsOvertimeWorkSettingResponse = zod.object({
  "start_at": zod.string().datetime({}).optional().describe('所定出勤時刻'),
  "end_at": zod.string().datetime({}).optional().describe('所定退勤時刻'),
  "should_reflect_in_work_record": zod.boolean().describe('勤務カレンダーに反映するかどうか'),
  "early_work_mins_unit": zod.array(zod.number()).optional().describe('早出に指定できる分の単位'),
  "overtime_work_mins_unit": zod.array(zod.number()).optional().describe('残業に指定できる分の単位')
})


export const getApprovalFlowRoutesQueryCompanyIdMax = 2147483647;
export const getApprovalFlowRoutesQueryIncludedUserIdMax = 2147483647;


export const getApprovalFlowRoutesQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalFlowRoutesQueryCompanyIdMax).describe('事業所ID'),
  "included_user_id": zod.number().min(1).max(getApprovalFlowRoutesQueryIncludedUserIdMax).optional().describe('経路に含まれるユーザーのユーザーID'),
  "usage": zod.enum(['AttendanceWorkflow', 'PersonalDataWorkflow']).optional().describe('申請種別（申請経路を使用できる申請種別を示します。例えば、AttendanceWorkflow の場合は、勤怠申請で使用できる申請経路です。）\n- `AttendanceWorkflow` - 勤怠申請\n- `PersonalDataWorkflow` - 身上変更申請')
})

export const getApprovalFlowRoutesResponseApprovalFlowRoutesItemIdMax = 2147483647;
export const getApprovalFlowRoutesResponseApprovalFlowRoutesItemUserIdMax = 2147483647;
export const getApprovalFlowRoutesResponseApprovalFlowRoutesItemFirstStepIdMax = 2147483647;


export const getApprovalFlowRoutesResponse = zod.object({
  "approval_flow_routes": zod.array(zod.object({
  "id": zod.number().min(1).max(getApprovalFlowRoutesResponseApprovalFlowRoutesItemIdMax).describe('申請経路ID'),
  "name": zod.string().optional().describe('申請経路名'),
  "description": zod.string().optional().describe('申請経路の説明'),
  "user_id": zod.number().min(1).max(getApprovalFlowRoutesResponseApprovalFlowRoutesItemUserIdMax).nullish().describe('更新したユーザーのユーザーID'),
  "definition_system": zod.boolean().optional().describe('システム作成の申請経路かどうか'),
  "first_step_id": zod.number().min(1).max(getApprovalFlowRoutesResponseApprovalFlowRoutesItemFirstStepIdMax).optional().describe('最初の承認ステップのID'),
  "usages": zod.array(zod.enum(['AttendanceWorkflow', 'PersonalDataWorkflow'])).optional().describe('申請種別（申請経路を使用できる申請種別を示します。例えば、AttendanceWorkflow の場合は、勤怠申請で使用できる申請経路です。）\n- AttendanceWorkflow - 勤怠申請\n- PersonalDataWorkflow - 身上変更申請')
}))
})


export const getApprovalFlowRoutePathIdMax = 2147483647;


export const getApprovalFlowRouteParams = zod.object({
  "id": zod.number().min(1).max(getApprovalFlowRoutePathIdMax).describe('申請経路ID')
})

export const getApprovalFlowRouteQueryCompanyIdMax = 2147483647;


export const getApprovalFlowRouteQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getApprovalFlowRouteQueryCompanyIdMax).describe('事業所ID')
})

export const getApprovalFlowRouteResponseApprovalFlowRouteIdMax = 2147483647;
export const getApprovalFlowRouteResponseApprovalFlowRouteUserIdMax = 2147483647;
export const getApprovalFlowRouteResponseApprovalFlowRouteFirstStepIdMax = 2147483647;
export const getApprovalFlowRouteResponseApprovalFlowRouteStepsItemIdMax = 2147483647;
export const getApprovalFlowRouteResponseApprovalFlowRouteStepsItemNextStepIdMax = 2147483647;
export const getApprovalFlowRouteResponseApprovalFlowRouteStepsItemUserIdsItemMax = 2147483647;


export const getApprovalFlowRouteResponse = zod.object({
  "approval_flow_route": zod.object({
  "id": zod.number().min(1).max(getApprovalFlowRouteResponseApprovalFlowRouteIdMax).describe('申請経路ID'),
  "name": zod.string().optional().describe('申請経路名'),
  "description": zod.string().optional().describe('申請経路の説明'),
  "user_id": zod.number().min(1).max(getApprovalFlowRouteResponseApprovalFlowRouteUserIdMax).nullish().describe('更新したユーザーのユーザーID'),
  "definition_system": zod.boolean().optional().describe('システム作成の申請経路かどうか'),
  "first_step_id": zod.number().min(1).max(getApprovalFlowRouteResponseApprovalFlowRouteFirstStepIdMax).optional().describe('最初の承認ステップのID'),
  "usages": zod.array(zod.enum(['AttendanceWorkflow', 'PersonalDataWorkflow'])).optional().describe('申請種別（申請経路を使用できる申請種別を示します。例えば、AttendanceWorkflow の場合は、勤怠申請で使用できる申請経路です。）\n- AttendanceWorkflow - 勤怠申請\n- PersonalDataWorkflow - 身上変更申請'),
  "steps": zod.array(zod.object({
  "id": zod.number().min(1).max(getApprovalFlowRouteResponseApprovalFlowRouteStepsItemIdMax).describe('承認ステップID'),
  "next_step_id": zod.number().min(1).max(getApprovalFlowRouteResponseApprovalFlowRouteStepsItemNextStepIdMax).nullable().describe('次の承認ステップID'),
  "resource_type": zod.enum(['predefined_user', 'selected_user', 'unspecified', 'and_resource', 'or_resource', 'and_position', 'or_position']).describe('承認方法( predefined_user: メンバー指定 (1人), selected_user: 申請時にメンバー指定,unspecified: 指定なし, and_resource: メンバー指定 (複数、全員の承認), or_resource: メンバー指定 (複数、1人の承認), and_position: 役職指定 (複数、全員の承認), or_position: 役職指定 (複数、1人の承認) ) '),
  "user_ids": zod.array(zod.number().min(1).max(getApprovalFlowRouteResponseApprovalFlowRouteStepsItemUserIdsItemMax).describe('承認者のユーザーID')).optional().describe('承認者のユーザーID (配列)')
})).optional().describe('承認ステップ（配列）')
})
})


export const getYearendAdjustmentEmployeesPathYearMin = 2000;

export const getYearendAdjustmentEmployeesPathYearMax = 2100;


export const getYearendAdjustmentEmployeesParams = zod.object({
  "year": zod.number().min(getYearendAdjustmentEmployeesPathYearMin).max(getYearendAdjustmentEmployeesPathYearMax).describe('年末調整対象を取得したい年')
})

export const getYearendAdjustmentEmployeesQueryCompanyIdMax = 2147483647;
export const getYearendAdjustmentEmployeesQueryLimitMax = 100;
export const getYearendAdjustmentEmployeesQueryOffsetMin = 0;

export const getYearendAdjustmentEmployeesQueryOffsetMax = 2147483647;


export const getYearendAdjustmentEmployeesQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getYearendAdjustmentEmployeesQueryCompanyIdMax).describe('事業所ID'),
  "limit": zod.number().min(1).max(getYearendAdjustmentEmployeesQueryLimitMax).optional().describe('取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100)'),
  "offset": zod.number().min(getYearendAdjustmentEmployeesQueryOffsetMin).max(getYearendAdjustmentEmployeesQueryOffsetMax).optional().describe('取得レコードのオフセット (デフォルト: 0)')
})

export const getYearendAdjustmentEmployeesResponseTotalCountMin = 0;

export const getYearendAdjustmentEmployeesResponseTotalCountMax = 2147483647;


export const getYearendAdjustmentEmployeesResponse = zod.object({
  "employees": zod.array(zod.object({
  "employee_id": zod.number().optional().describe('従業員ID'),
  "num": zod.string().nullish().describe('従業員番号'),
  "employee_display_name": zod.string().optional().describe('従業員名'),
  "is_not_adjust": zod.boolean().optional().describe('年末調整対象外\n- true - 年末調整対象外\n- false - 年末調整対象'),
  "status": zod.enum(['initialized', 'in_employee_progress', 'submitted', 'fixed']).optional().describe('年末調整ステータス\n- initialized - 入力依頼前\n- in_employee_progress - 従業員入力中\n- submitted - 従業員入力済\n- fixed - 確定')
})).optional(),
  "total_count": zod.number().min(getYearendAdjustmentEmployeesResponseTotalCountMin).max(getYearendAdjustmentEmployeesResponseTotalCountMax).optional().describe('合計件数')
})


export const getYearendAdjustmentEmployeePathYearMin = 2000;

export const getYearendAdjustmentEmployeePathYearMax = 2100;
export const getYearendAdjustmentEmployeePathEmployeeIdMax = 2147483647;


export const getYearendAdjustmentEmployeeParams = zod.object({
  "year": zod.number().min(getYearendAdjustmentEmployeePathYearMin).max(getYearendAdjustmentEmployeePathYearMax).describe('年末調整を取得したい年'),
  "employee_id": zod.number().min(1).max(getYearendAdjustmentEmployeePathEmployeeIdMax).describe('従業員ID')
})

export const getYearendAdjustmentEmployeeQueryCompanyIdMax = 2147483647;


export const getYearendAdjustmentEmployeeQueryParams = zod.object({
  "company_id": zod.number().min(1).max(getYearendAdjustmentEmployeeQueryCompanyIdMax).describe('事業所ID')
})

export const getYearendAdjustmentEmployeeResponseEmployeeLastNameMax = 255;
export const getYearendAdjustmentEmployeeResponseEmployeeFirstNameMax = 255;
export const getYearendAdjustmentEmployeeResponseEmployeeLastNameKanaMax = 255;
export const getYearendAdjustmentEmployeeResponseEmployeeFirstNameKanaMax = 255;
export const getYearendAdjustmentEmployeeResponseEmployeeZipcode1Max = 3;
export const getYearendAdjustmentEmployeeResponseEmployeeZipcode2Max = 4;
export const getYearendAdjustmentEmployeeResponseEmployeePrefectureCodeMin = -1;

export const getYearendAdjustmentEmployeeResponseEmployeePrefectureCodeMax = 46;
export const getYearendAdjustmentEmployeeResponseEmployeeAddressMax = 255;
export const getYearendAdjustmentEmployeeResponseEmployeeAddressKanaMax = 255;
export const getYearendAdjustmentEmployeeResponseEmployeeOtherCompanyRevenueMin = 0;

export const getYearendAdjustmentEmployeeResponseEmployeeOtherCompanyRevenueMax = 1999999999;
export const getYearendAdjustmentEmployeeResponseEmployeeAllOtherIncomeMin = 0;

export const getYearendAdjustmentEmployeeResponseEmployeeAllOtherIncomeMax = 1999999999;
export const getYearendAdjustmentEmployeeResponseEmployeeHouseholderNameMax = 255;
export const getYearendAdjustmentEmployeeResponseDependentsItemLastNameMax = 255;
export const getYearendAdjustmentEmployeeResponseDependentsItemFirstNameMax = 255;
export const getYearendAdjustmentEmployeeResponseDependentsItemLastNameKanaMax = 255;
export const getYearendAdjustmentEmployeeResponseDependentsItemFirstNameKanaMax = 255;
export const getYearendAdjustmentEmployeeResponseDependentsItemIncomeMin = 0;

export const getYearendAdjustmentEmployeeResponseDependentsItemIncomeMax = 999999999;
export const getYearendAdjustmentEmployeeResponseDependentsItemEmploymentRevenueMin = 0;

export const getYearendAdjustmentEmployeeResponseDependentsItemEmploymentRevenueMax = 999999999;
export const getYearendAdjustmentEmployeeResponseDependentsItemAllOtherIncomeMin = 0;

export const getYearendAdjustmentEmployeeResponseDependentsItemAllOtherIncomeMax = 999999999;
export const getYearendAdjustmentEmployeeResponseDependentsItemZipcode1Max = 3;
export const getYearendAdjustmentEmployeeResponseDependentsItemZipcode2Max = 4;
export const getYearendAdjustmentEmployeeResponseDependentsItemPrefectureCodeMin = -1;

export const getYearendAdjustmentEmployeeResponseDependentsItemPrefectureCodeMax = 46;
export const getYearendAdjustmentEmployeeResponseDependentsItemAddressMax = 255;
export const getYearendAdjustmentEmployeeResponseDependentsItemAddressKanaMax = 255;
export const getYearendAdjustmentEmployeeResponseDependentsItemAnnualRemittanceAmountMin = 0;

export const getYearendAdjustmentEmployeeResponseDependentsItemAnnualRemittanceAmountMax = 999999999;
export const getYearendAdjustmentEmployeeResponseDependentsItemRetirementIncomeMin = 0;

export const getYearendAdjustmentEmployeeResponseDependentsItemRetirementIncomeMax = 999999999;
export const getYearendAdjustmentEmployeeResponseInsurancesItemIdMax = 2147483647;
export const getYearendAdjustmentEmployeeResponseInsurancesItemCompanyNameMax = 255;
export const getYearendAdjustmentEmployeeResponseInsurancesItemKindOfPurposeMax = 255;
export const getYearendAdjustmentEmployeeResponseInsurancesItemPolicyholderLastNameMax = 255;
export const getYearendAdjustmentEmployeeResponseInsurancesItemPolicyholderFirstNameMax = 255;
export const getYearendAdjustmentEmployeeResponseInsurancesItemRecipientLastNameMax = 255;
export const getYearendAdjustmentEmployeeResponseInsurancesItemRecipientFirstNameMax = 255;
export const getYearendAdjustmentEmployeeResponseInsurancesItemPaymentStartDateRegExp = new RegExp('^([1-2][0-9]{3}-[0-9]{2}-[0-9]{2})?$');
export const getYearendAdjustmentEmployeeResponseInsurancesItemAmountMin = 0;

export const getYearendAdjustmentEmployeeResponseInsurancesItemAmountMax = 99999999;
export const getYearendAdjustmentEmployeeResponseHousingLoanDeductionMin = 0;

export const getYearendAdjustmentEmployeeResponseHousingLoanDeductionMax = 999999999;
export const getYearendAdjustmentEmployeeResponseHousingLoansItemIdMax = 2147483647;
export const getYearendAdjustmentEmployeeResponseHousingLoansItemRemainingBalanceAtYearendMin = -999999999;

export const getYearendAdjustmentEmployeeResponseHousingLoansItemRemainingBalanceAtYearendMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollDeductionMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollDeductionMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollIncomeTaxMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollIncomeTaxMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusDeductionMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusDeductionMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusIncomeTaxMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusIncomeTaxMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollAmountMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollAmountMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollDeductionAmountMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollDeductionAmountMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollIncomeTaxAmountMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollIncomeTaxAmountMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusAmountMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusAmountMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusDeductionAmountMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusDeductionAmountMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusIncomeTaxAmountMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusIncomeTaxAmountMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePreviousJobIncomeMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePreviousJobIncomeMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePreviousJobDeductionMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePreviousJobDeductionMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePreviousJobWithholdingTaxAmountMin = -999999999;

export const getYearendAdjustmentEmployeeResponsePreviousJobWithholdingTaxAmountMax = 999999999;
export const getYearendAdjustmentEmployeeResponsePreviousJobCompanyNameMax = 255;
export const getYearendAdjustmentEmployeeResponsePreviousJobCompanyAddressMax = 255;


export const getYearendAdjustmentEmployeeResponse = zod.object({
  "employee": zod.object({
  "employee_id": zod.number().optional().describe('従業員ID'),
  "num": zod.string().nullish().describe('従業員番号<br>\n従業員を判別しやすいよう管理することができます。（例: 1人目の正社員を A-001 と入力）'),
  "last_name": zod.string().max(getYearendAdjustmentEmployeeResponseEmployeeLastNameMax).optional().describe('姓 null不可'),
  "first_name": zod.string().max(getYearendAdjustmentEmployeeResponseEmployeeFirstNameMax).optional().describe('名 null不可'),
  "last_name_kana": zod.string().max(getYearendAdjustmentEmployeeResponseEmployeeLastNameKanaMax).optional().describe('姓カナ'),
  "first_name_kana": zod.string().max(getYearendAdjustmentEmployeeResponseEmployeeFirstNameKanaMax).optional().describe('名カナ'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "entry_date": zod.string().date().optional().describe('入社日'),
  "retire_date": zod.string().date().nullish().describe('退職日'),
  "employment_type": zod.string().nullish().describe('雇用形態 board-member: 役員, regular: 正社員, fixed-term: 契約社員, part-time: アルバイト・パート, temporary: 派遣社員, (空文字列): その他'),
  "title": zod.string().nullish().describe('肩書'),
  "zipcode1": zod.string().max(getYearendAdjustmentEmployeeResponseEmployeeZipcode1Max).nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().max(getYearendAdjustmentEmployeeResponseEmployeeZipcode2Max).nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(getYearendAdjustmentEmployeeResponseEmployeePrefectureCodeMin).max(getYearendAdjustmentEmployeeResponseEmployeePrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().max(getYearendAdjustmentEmployeeResponseEmployeeAddressMax).nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().max(getYearendAdjustmentEmployeeResponseEmployeeAddressKanaMax).optional().describe('住民票住所の市区町村以降の住所カナ'),
  "payer_type": zod.enum(['kou', 'otsu', 'hei']).optional().describe('所得税納税者区分 kou: 甲, otsu: 乙, hei: 丙'),
  "widow_type": zod.enum(['na', 'widow', 'one_parent']).optional().describe('寡夫／寡婦かどうか null不可 na: 空白, widow: 寡婦, one_parent: ひとり親'),
  "disability_type": zod.enum(['na', 'general', 'heavy']).optional().describe('障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者'),
  "married": zod.boolean().optional().describe('配偶者の有無'),
  "is_working_student": zod.boolean().optional().describe('勤労学生かどうか'),
  "is_foreigner": zod.boolean().optional().describe('外国人かどうか'),
  "other_company_revenue": zod.number().min(getYearendAdjustmentEmployeeResponseEmployeeOtherCompanyRevenueMin).max(getYearendAdjustmentEmployeeResponseEmployeeOtherCompanyRevenueMax).nullish().describe('その他の事業所の給与収入'),
  "all_other_income": zod.number().min(getYearendAdjustmentEmployeeResponseEmployeeAllOtherIncomeMin).max(getYearendAdjustmentEmployeeResponseEmployeeAllOtherIncomeMax).nullish().describe('給与以外の所得'),
  "householder": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other']).optional().describe('世帯主の続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他'),
  "householder_name": zod.string().max(getYearendAdjustmentEmployeeResponseEmployeeHouseholderNameMax).optional().describe('世帯主の名前'),
  "is_calc_income_tax": zod.boolean().optional().describe('所得税の計算対象かどうか')
}).optional(),
  "dependents": zod.array(zod.object({
  "id": zod.number().optional().describe('家族情報ID'),
  "last_name": zod.string().max(getYearendAdjustmentEmployeeResponseDependentsItemLastNameMax).optional().describe('姓 null不可'),
  "first_name": zod.string().max(getYearendAdjustmentEmployeeResponseDependentsItemFirstNameMax).optional().describe('名 null不可'),
  "last_name_kana": zod.string().max(getYearendAdjustmentEmployeeResponseDependentsItemLastNameKanaMax).optional().describe('姓カナ'),
  "first_name_kana": zod.string().max(getYearendAdjustmentEmployeeResponseDependentsItemFirstNameKanaMax).optional().describe('名カナ'),
  "relationship": zod.enum(['spouse', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other', 'great_grandfather', 'great_grandmother', 'spouses_child']).optional().describe('続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子'),
  "birth_date": zod.string().date().optional().describe('生年月日 null不可 1900年1月1日から現在年+5年12月31日まで登録可能'),
  "social_insurance_and_tax_dependent": zod.enum(['social_insurance_and_tax', 'tax_only', 'social_insurance_only', 'not_dependent']).optional().describe('扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない'),
  "income": zod.number().min(getYearendAdjustmentEmployeeResponseDependentsItemIncomeMin).max(getYearendAdjustmentEmployeeResponseDependentsItemIncomeMax).optional().describe('所得 配偶者は「扶養状況」がsocial_insurance_only又はnot_dependentの場合のみ更新可能。配偶者以外は更新可能。 配偶者で「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合、「給与収入」、「給与以外の所得」から自動で「所得」が計算されます。'),
  "employment_revenue": zod.number().min(getYearendAdjustmentEmployeeResponseDependentsItemEmploymentRevenueMin).max(getYearendAdjustmentEmployeeResponseDependentsItemEmploymentRevenueMax).optional().describe('給与収入 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。'),
  "all_other_income": zod.number().min(getYearendAdjustmentEmployeeResponseDependentsItemAllOtherIncomeMin).max(getYearendAdjustmentEmployeeResponseDependentsItemAllOtherIncomeMax).optional().describe('給与以外の所得 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。'),
  "disability_type": zod.enum(['na', 'general', 'heavy']).optional().describe('障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者'),
  "residence_type": zod.enum(['live_in', 'resident', 'non_resident']).optional().describe('同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)'),
  "zipcode1": zod.string().max(getYearendAdjustmentEmployeeResponseDependentsItemZipcode1Max).nullish().describe('住民票住所の郵便番号1 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号1」を登録'),
  "zipcode2": zod.string().max(getYearendAdjustmentEmployeeResponseDependentsItemZipcode2Max).nullish().describe('住民票住所の郵便番号2 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号2」を登録'),
  "prefecture_code": zod.number().min(getYearendAdjustmentEmployeeResponseDependentsItemPrefectureCodeMin).max(getYearendAdjustmentEmployeeResponseDependentsItemPrefectureCodeMax).optional().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)  「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の都道府県コード」を登録'),
  "address": zod.string().max(getYearendAdjustmentEmployeeResponseDependentsItemAddressMax).optional().describe('住民票住所の市区町村以降の住所 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所」を登録'),
  "address_kana": zod.string().max(getYearendAdjustmentEmployeeResponseDependentsItemAddressKanaMax).optional().describe('住民票住所の市区町村以降の住所カナ 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所カナ」を登録'),
  "annual_remittance_amount": zod.number().min(getYearendAdjustmentEmployeeResponseDependentsItemAnnualRemittanceAmountMin).max(getYearendAdjustmentEmployeeResponseDependentsItemAnnualRemittanceAmountMax).optional().describe('国外居住親族への年間の送金額 「同居・別居」が「同居」、「別居(国内)」の場合は登録不可'),
  "non_resident_dependents_reason": zod.enum(['none', 'over_16_to_under_30_or_over_70', 'study_abroad', 'handicapped', 'over_38_man']).optional().describe('非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払 続柄が「配偶者」または「同居・別居」が「同居」、「別居(国内)」の場合は登録不可'),
  "is_resident_tax_only_deduction": zod.boolean().optional().describe('住民税のみの控除対象かどうか'),
  "retirement_income": zod.number().min(getYearendAdjustmentEmployeeResponseDependentsItemRetirementIncomeMin).max(getYearendAdjustmentEmployeeResponseDependentsItemRetirementIncomeMax).optional().describe('退職所得')
})).optional().describe('家族情報(年末調整対象外の場合は取得できません。)'),
  "insurances": zod.array(zod.object({
  "id": zod.number().min(1).max(getYearendAdjustmentEmployeeResponseInsurancesItemIdMax).optional().describe('保険料id'),
  "type": zod.enum(['life_care_pension_insurance', 'earthquake_non_life_insurance', 'social_insurance', 'other_insurance']).optional().describe('保険の種類 life_care_pension_insurance: 生命保険・介護医療保険・個人年金保険, earthquake_non_life_insurance: 地震保険・旧長期損害保険, social_insurance: 社会保険, other_insurance: その他の保険（小規模企業共済等）'),
  "category": zod.enum(['life', 'care', 'pension', 'earthquake', 'old_long_term_non_life', 'national_pension', 'national_pension_fund_premium', 'national_health', 'care_insurance_deduction_of_pension', 'health', 'employee_pension', 'advanced_elderly_medical', 'sema', 'idc', 'cdc', 'dsma', 'none']).optional().describe('区分<br>\n保険会社等が発行する証明書類に基づいて区分を設定してください。<br>\n保険の種類によって設定可能な値が変わります。<br>\n・life_care_pension_insurance<br>\n　life: 生命保険<br>\n　care: 介護保険<br>\n　pension: 個人年金保険<br>\n・earthquake_non_life_insurance<br>\n　earthquake: 地震保険<br>\n　old_long_term_non_life: 旧長期損害保険<br>\n・social_insurance<br>\n　national_pension: 国民年金<br>\n　national_pension_fund_premium: 国民年金基金<br>\n　national_health: 国民健康保険<br>\n　health: 健康保険<br>\n　care_insurance_deduction_of_pension: 介護保険<br>\n　employee_pension: 厚生年金<br>\n　advanced_elderly_medical: 後期高齢者医療保険<br>\n　none: その他（印刷後に手書き）<br>\n・other_insurance<br>\n　sema: 独立行政法人中小企業基盤整備機構の共済契約の掛金<br>\n　idc: 個人型確定拠出年金（iDeCo）<br>\n　cdc: 企業型確定拠出年金<br>\n　dsma: 心身障害者扶養共済制度に関する契約の掛金<br>'),
  "new_or_old": zod.enum(['new', 'old', 'none']).optional().describe('新旧区分<br>\n区分が生命保険または個人年金保険の時のみ、新制度なら new を、旧制度なら old を指定します。<br>\n上記以外の保険では none を指定してください。'),
  "company_name": zod.string().max(getYearendAdjustmentEmployeeResponseInsurancesItemCompanyNameMax).nullish().describe('保険会社等の名称<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "kind_of_purpose": zod.string().max(getYearendAdjustmentEmployeeResponseInsurancesItemKindOfPurposeMax).nullish().describe('保険等の種類（目的）<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "period": zod.enum(['終身', '0年', '1年', '2年', '3年', '4年', '5年', '6年', '7年', '8年', '9年', '10年', '11年', '12年', '13年', '14年', '15年', '16年', '17年', '18年', '19年', '20年', '21年', '22年', '23年', '24年', '25年', '26年', '27年', '28年', '29年', '30年', '31年', '32年', '33年', '34年', '35年', '36年', '37年', '38年', '39年', '40年', '41年', '42年', '43年', '44年', '45年', '46年', '47年', '48年', '49年', '50年', '51年', '52年', '53年', '54年', '55年', '56年', '57年', '58年', '59年', '60年', '61年', '62年', '63年', '64年', '65年', '66年', '67年', '68年', '69年', '70年', '71年', '72年', '73年', '74年', '75年', '76年', '77年', '78年', '79年', '80年', '81年', '82年', '83年', '84年', '85年', '86年', '87年', '88年', '89年', '90年', '91年', '92年', '93年', '94年', '95年', '96年', '97年', '98年', '99年', '100年', '']).nullish().describe('保険期間又は年金支払期間<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "policyholder_last_name": zod.string().max(getYearendAdjustmentEmployeeResponseInsurancesItemPolicyholderLastNameMax).nullish().describe('保険等の契約者 姓<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "policyholder_first_name": zod.string().max(getYearendAdjustmentEmployeeResponseInsurancesItemPolicyholderFirstNameMax).nullish().describe('保険等の契約者 名<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_last_name": zod.string().max(getYearendAdjustmentEmployeeResponseInsurancesItemRecipientLastNameMax).nullish().describe('保険金等の受取人 姓<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_first_name": zod.string().max(getYearendAdjustmentEmployeeResponseInsurancesItemRecipientFirstNameMax).nullish().describe('保険金等の受取人 名<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_relationship": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other', '']).nullish().describe('保険金等の受取人 あなたとの続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, \"\": 空欄<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "payment_start_date": zod.string().regex(getYearendAdjustmentEmployeeResponseInsurancesItemPaymentStartDateRegExp).nullish().describe('年金の支払開始日 1900年1月1日から現在年+100の12月31日まで登録可能。<br>\n区分が個人年金保険の時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "amount": zod.number().min(getYearendAdjustmentEmployeeResponseInsurancesItemAmountMin).max(getYearendAdjustmentEmployeeResponseInsurancesItemAmountMax).optional().describe('保険料額'),
  "certification_type": zod.enum(['xml']).nullish().describe('電子的控除証明書などの認証方法を利用した場合、その認証方法が反映されます。<br>\nxml: 電子的控除証明書を利用。証明書画像データの提出が免除されます。またrecipient_first_name、recipient_last_name、recipient_relationship以外のカラムが更新不可となります。')
})).optional().describe('保険料情報(年末調整対象外の場合は取得できません。)'),
  "housing_loan_deduction": zod.number().min(getYearendAdjustmentEmployeeResponseHousingLoanDeductionMin).max(getYearendAdjustmentEmployeeResponseHousingLoanDeductionMax).optional().describe('住宅借入金等特別控除(年末調整対象外の場合は取得できません。)'),
  "housing_loans": zod.array(zod.object({
  "id": zod.number().min(1).max(getYearendAdjustmentEmployeeResponseHousingLoansItemIdMax).optional().describe('住宅ローンID'),
  "residence_start_date": zod.string().date().optional().describe('居住開始の年月日'),
  "remaining_balance_at_yearend": zod.number().min(getYearendAdjustmentEmployeeResponseHousingLoansItemRemainingBalanceAtYearendMin).max(getYearendAdjustmentEmployeeResponseHousingLoansItemRemainingBalanceAtYearendMax).optional().describe('住宅借入金等年末残高'),
  "category": zod.enum(['general', 'qualified', 'extension', 'earthquake']).optional().describe('住宅借入金等特別控除区分 general: 住: 一般の住宅借入金等, qualified: 認: 認定住宅の新築等, extension: 増: 特定増改築等, earthquake: 震: 震災特例法による特別控除'),
  "specific_case_type": zod.enum(['not_qualified', 'specified', 'special_specified_or_special_exception', 'exception_special_exception', 'special_residential_house']).optional().describe('特定取得/特別特定取得 not_qualified: 該当しない, specified: 特定取得, special_specified_or_special_exception: 特別特定取得または特別特例取得, exception_special_exception: 特例特別特例取得 special_residential_house 特家')
})).optional().describe('住宅ローン(年末調整対象外の場合は取得できません。)'),
  "payroll_and_bonus": zod.object({
  "fixed_payroll": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollMax).optional().describe('確定給与額'),
  "fixed_payroll_deduction": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollDeductionMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollDeductionMax).optional().describe('確定給与控除額'),
  "fixed_payroll_income_tax": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollIncomeTaxMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedPayrollIncomeTaxMax).optional().describe('確定給与所得税額'),
  "fixed_bonus": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusMax).optional().describe('確定賞与額'),
  "fixed_bonus_deduction": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusDeductionMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusDeductionMax).optional().describe('確定賞与控除額'),
  "fixed_bonus_income_tax": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusIncomeTaxMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusFixedBonusIncomeTaxMax).optional().describe('確定賞与所得税額'),
  "unentered_payroll_amount": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollAmountMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollAmountMax).optional().describe('未入力給与額'),
  "unentered_payroll_deduction_amount": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollDeductionAmountMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollDeductionAmountMax).optional().describe('未入力給与控除額'),
  "unentered_payroll_income_tax_amount": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollIncomeTaxAmountMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredPayrollIncomeTaxAmountMax).optional().describe('未入力給与所得税額'),
  "unentered_bonus_amount": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusAmountMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusAmountMax).optional().describe('未入力賞与額'),
  "unentered_bonus_deduction_amount": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusDeductionAmountMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusDeductionAmountMax).optional().describe('未入力賞与控除額'),
  "unentered_bonus_income_tax_amount": zod.number().min(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusIncomeTaxAmountMin).max(getYearendAdjustmentEmployeeResponsePayrollAndBonusUnenteredBonusIncomeTaxAmountMax).optional().describe('未入力賞与所得税額')
}).optional(),
  "previous_job": zod.object({
  "income": zod.number().min(getYearendAdjustmentEmployeeResponsePreviousJobIncomeMin).max(getYearendAdjustmentEmployeeResponsePreviousJobIncomeMax).optional().describe('前職の支払金額'),
  "deduction": zod.number().min(getYearendAdjustmentEmployeeResponsePreviousJobDeductionMin).max(getYearendAdjustmentEmployeeResponsePreviousJobDeductionMax).optional().describe('前職の社会保険料等の金額'),
  "withholding_tax_amount": zod.number().min(getYearendAdjustmentEmployeeResponsePreviousJobWithholdingTaxAmountMin).max(getYearendAdjustmentEmployeeResponsePreviousJobWithholdingTaxAmountMax).optional().describe('前職の源泉徴収額'),
  "company_name": zod.string().max(getYearendAdjustmentEmployeeResponsePreviousJobCompanyNameMax).optional().describe('前職の社名'),
  "company_address": zod.string().max(getYearendAdjustmentEmployeeResponsePreviousJobCompanyAddressMax).optional().describe('前職の事業所住所'),
  "retire_date": zod.string().date().optional().describe('前職の退職日 現在年-10年1月1日から現在年+5年12月31日まで登録可能')
}).nullish()
})


export const putYearendAdjustmentEmployeePathYearMin = 2000;

export const putYearendAdjustmentEmployeePathYearMax = 2100;
export const putYearendAdjustmentEmployeePathEmployeeIdMax = 2147483647;


export const putYearendAdjustmentEmployeeParams = zod.object({
  "year": zod.number().min(putYearendAdjustmentEmployeePathYearMin).max(putYearendAdjustmentEmployeePathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(putYearendAdjustmentEmployeePathEmployeeIdMax).describe('従業員ID')
})

export const putYearendAdjustmentEmployeeBodyCompanyIdMax = 2147483647;
export const putYearendAdjustmentEmployeeBodyEmployeeLastNameMax = 255;
export const putYearendAdjustmentEmployeeBodyEmployeeFirstNameMax = 255;
export const putYearendAdjustmentEmployeeBodyEmployeeLastNameKanaMax = 255;
export const putYearendAdjustmentEmployeeBodyEmployeeFirstNameKanaMax = 255;
export const putYearendAdjustmentEmployeeBodyEmployeeZipcode1Max = 3;
export const putYearendAdjustmentEmployeeBodyEmployeeZipcode2Max = 4;
export const putYearendAdjustmentEmployeeBodyEmployeePrefectureCodeMin = -1;

export const putYearendAdjustmentEmployeeBodyEmployeePrefectureCodeMax = 46;
export const putYearendAdjustmentEmployeeBodyEmployeeAddressMax = 255;
export const putYearendAdjustmentEmployeeBodyEmployeeAddressKanaMax = 255;
export const putYearendAdjustmentEmployeeBodyEmployeeOtherCompanyRevenueMin = 0;

export const putYearendAdjustmentEmployeeBodyEmployeeOtherCompanyRevenueMax = 1999999999;
export const putYearendAdjustmentEmployeeBodyEmployeeAllOtherIncomeMin = 0;

export const putYearendAdjustmentEmployeeBodyEmployeeAllOtherIncomeMax = 1999999999;
export const putYearendAdjustmentEmployeeBodyEmployeeHouseholderNameMax = 255;


export const putYearendAdjustmentEmployeeBody = zod.object({
  "company_id": zod.number().min(1).max(putYearendAdjustmentEmployeeBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "employee": zod.object({
  "last_name": zod.string().max(putYearendAdjustmentEmployeeBodyEmployeeLastNameMax).describe('姓 null不可'),
  "first_name": zod.string().max(putYearendAdjustmentEmployeeBodyEmployeeFirstNameMax).describe('名 null不可'),
  "last_name_kana": zod.string().max(putYearendAdjustmentEmployeeBodyEmployeeLastNameKanaMax).describe('姓カナ'),
  "first_name_kana": zod.string().max(putYearendAdjustmentEmployeeBodyEmployeeFirstNameKanaMax).describe('名カナ'),
  "zipcode1": zod.string().max(putYearendAdjustmentEmployeeBodyEmployeeZipcode1Max).describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().max(putYearendAdjustmentEmployeeBodyEmployeeZipcode2Max).describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(putYearendAdjustmentEmployeeBodyEmployeePrefectureCodeMin).max(putYearendAdjustmentEmployeeBodyEmployeePrefectureCodeMax).describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().max(putYearendAdjustmentEmployeeBodyEmployeeAddressMax).describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().max(putYearendAdjustmentEmployeeBodyEmployeeAddressKanaMax).optional().describe('住民票住所の市区町村以降の住所カナ'),
  "payer_type": zod.enum(['kou', 'otsu', 'hei']).optional().describe('所得税納税者区分 kou: 甲, otsu: 乙, hei: 丙'),
  "widow_type": zod.enum(['na', 'widow', 'one_parent']).optional().describe('寡夫／寡婦かどうか null不可 na: 空白, widow: 寡婦, one_parent: ひとり親'),
  "disability_type": zod.enum(['na', 'general', 'heavy']).optional().describe('障害者かどうか null不可 na: 空白, general: 障害者, heavy: 特別障害者'),
  "married": zod.boolean().optional().describe('配偶者の有無 null不可'),
  "is_working_student": zod.boolean().optional().describe('勤労学生かどうか null不可'),
  "is_foreigner": zod.boolean().optional().describe('外国人かどうか null不可'),
  "other_company_revenue": zod.number().min(putYearendAdjustmentEmployeeBodyEmployeeOtherCompanyRevenueMin).max(putYearendAdjustmentEmployeeBodyEmployeeOtherCompanyRevenueMax).nullish().describe('その他の事業所の給与収入'),
  "all_other_income": zod.number().min(putYearendAdjustmentEmployeeBodyEmployeeAllOtherIncomeMin).max(putYearendAdjustmentEmployeeBodyEmployeeAllOtherIncomeMax).nullish().describe('給与以外の所得'),
  "householder": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other']).optional().describe('世帯主の続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他'),
  "householder_name": zod.string().max(putYearendAdjustmentEmployeeBodyEmployeeHouseholderNameMax).optional().describe('世帯主の名前')
})
})

export const putYearendAdjustmentEmployeeResponseEmployeesLastNameMax = 255;
export const putYearendAdjustmentEmployeeResponseEmployeesFirstNameMax = 255;
export const putYearendAdjustmentEmployeeResponseEmployeesLastNameKanaMax = 255;
export const putYearendAdjustmentEmployeeResponseEmployeesFirstNameKanaMax = 255;
export const putYearendAdjustmentEmployeeResponseEmployeesZipcode1Max = 3;
export const putYearendAdjustmentEmployeeResponseEmployeesZipcode2Max = 4;
export const putYearendAdjustmentEmployeeResponseEmployeesPrefectureCodeMin = -1;

export const putYearendAdjustmentEmployeeResponseEmployeesPrefectureCodeMax = 46;
export const putYearendAdjustmentEmployeeResponseEmployeesAddressMax = 255;
export const putYearendAdjustmentEmployeeResponseEmployeesAddressKanaMax = 255;
export const putYearendAdjustmentEmployeeResponseEmployeesOtherCompanyRevenueMin = 0;

export const putYearendAdjustmentEmployeeResponseEmployeesOtherCompanyRevenueMax = 1999999999;
export const putYearendAdjustmentEmployeeResponseEmployeesAllOtherIncomeMin = 0;

export const putYearendAdjustmentEmployeeResponseEmployeesAllOtherIncomeMax = 1999999999;
export const putYearendAdjustmentEmployeeResponseEmployeesHouseholderNameMax = 255;


export const putYearendAdjustmentEmployeeResponse = zod.object({
  "employees": zod.object({
  "employee_id": zod.number().optional().describe('従業員ID'),
  "num": zod.string().nullish().describe('従業員番号<br>\n従業員を判別しやすいよう管理することができます。（例: 1人目の正社員を A-001 と入力）'),
  "last_name": zod.string().max(putYearendAdjustmentEmployeeResponseEmployeesLastNameMax).optional().describe('姓 null不可'),
  "first_name": zod.string().max(putYearendAdjustmentEmployeeResponseEmployeesFirstNameMax).optional().describe('名 null不可'),
  "last_name_kana": zod.string().max(putYearendAdjustmentEmployeeResponseEmployeesLastNameKanaMax).optional().describe('姓カナ'),
  "first_name_kana": zod.string().max(putYearendAdjustmentEmployeeResponseEmployeesFirstNameKanaMax).optional().describe('名カナ'),
  "birth_date": zod.string().date().optional().describe('生年月日'),
  "entry_date": zod.string().date().optional().describe('入社日'),
  "retire_date": zod.string().date().nullish().describe('退職日'),
  "employment_type": zod.string().nullish().describe('雇用形態 board-member: 役員, regular: 正社員, fixed-term: 契約社員, part-time: アルバイト・パート, temporary: 派遣社員, (空文字列): その他'),
  "title": zod.string().nullish().describe('肩書'),
  "zipcode1": zod.string().max(putYearendAdjustmentEmployeeResponseEmployeesZipcode1Max).nullish().describe('住民票住所の郵便番号1'),
  "zipcode2": zod.string().max(putYearendAdjustmentEmployeeResponseEmployeesZipcode2Max).nullish().describe('住民票住所の郵便番号2'),
  "prefecture_code": zod.number().min(putYearendAdjustmentEmployeeResponseEmployeesPrefectureCodeMin).max(putYearendAdjustmentEmployeeResponseEmployeesPrefectureCodeMax).nullish().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)'),
  "address": zod.string().max(putYearendAdjustmentEmployeeResponseEmployeesAddressMax).nullish().describe('住民票住所の市区町村以降の住所'),
  "address_kana": zod.string().max(putYearendAdjustmentEmployeeResponseEmployeesAddressKanaMax).optional().describe('住民票住所の市区町村以降の住所カナ'),
  "payer_type": zod.enum(['kou', 'otsu', 'hei']).optional().describe('所得税納税者区分 kou: 甲, otsu: 乙, hei: 丙'),
  "widow_type": zod.enum(['na', 'widow', 'one_parent']).optional().describe('寡夫／寡婦かどうか null不可 na: 空白, widow: 寡婦, one_parent: ひとり親'),
  "disability_type": zod.enum(['na', 'general', 'heavy']).optional().describe('障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者'),
  "married": zod.boolean().optional().describe('配偶者の有無'),
  "is_working_student": zod.boolean().optional().describe('勤労学生かどうか'),
  "is_foreigner": zod.boolean().optional().describe('外国人かどうか'),
  "other_company_revenue": zod.number().min(putYearendAdjustmentEmployeeResponseEmployeesOtherCompanyRevenueMin).max(putYearendAdjustmentEmployeeResponseEmployeesOtherCompanyRevenueMax).nullish().describe('その他の事業所の給与収入'),
  "all_other_income": zod.number().min(putYearendAdjustmentEmployeeResponseEmployeesAllOtherIncomeMin).max(putYearendAdjustmentEmployeeResponseEmployeesAllOtherIncomeMax).nullish().describe('給与以外の所得'),
  "householder": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other']).optional().describe('世帯主の続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他'),
  "householder_name": zod.string().max(putYearendAdjustmentEmployeeResponseEmployeesHouseholderNameMax).optional().describe('世帯主の名前'),
  "is_calc_income_tax": zod.boolean().optional().describe('所得税の計算対象かどうか')
}).optional()
})


export const putYearendAdjustmentPayrollAndBonusPathYearMin = 2000;

export const putYearendAdjustmentPayrollAndBonusPathYearMax = 2100;
export const putYearendAdjustmentPayrollAndBonusPathEmployeeIdMax = 2147483647;


export const putYearendAdjustmentPayrollAndBonusParams = zod.object({
  "year": zod.number().min(putYearendAdjustmentPayrollAndBonusPathYearMin).max(putYearendAdjustmentPayrollAndBonusPathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(putYearendAdjustmentPayrollAndBonusPathEmployeeIdMax).describe('従業員ID')
})

export const putYearendAdjustmentPayrollAndBonusBodyCompanyIdMax = 2147483647;
export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollDeductionAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollDeductionAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollIncomeTaxAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollIncomeTaxAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusDeductionAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusDeductionAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusIncomeTaxAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusIncomeTaxAmountMax = 999999999;


export const putYearendAdjustmentPayrollAndBonusBody = zod.object({
  "company_id": zod.number().min(1).max(putYearendAdjustmentPayrollAndBonusBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "payroll_and_bonus": zod.object({
  "unentered_payroll_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollAmountMin).max(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollAmountMax).optional().describe('未入力給与額'),
  "unentered_payroll_deduction_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollDeductionAmountMin).max(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollDeductionAmountMax).optional().describe('未入力給与控除額'),
  "unentered_payroll_income_tax_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollIncomeTaxAmountMin).max(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredPayrollIncomeTaxAmountMax).optional().describe('未入力給与所得税額'),
  "unentered_bonus_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusAmountMin).max(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusAmountMax).optional().describe('未入力賞与額'),
  "unentered_bonus_deduction_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusDeductionAmountMin).max(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusDeductionAmountMax).optional().describe('未入力賞与控除額'),
  "unentered_bonus_income_tax_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusIncomeTaxAmountMin).max(putYearendAdjustmentPayrollAndBonusBodyPayrollAndBonusUnenteredBonusIncomeTaxAmountMax).optional().describe('未入力賞与所得税額')
})
})

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollDeductionMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollDeductionMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollIncomeTaxMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollIncomeTaxMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusDeductionMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusDeductionMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusIncomeTaxMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusIncomeTaxMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollDeductionAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollDeductionAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollIncomeTaxAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollIncomeTaxAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusDeductionAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusDeductionAmountMax = 999999999;
export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusIncomeTaxAmountMin = -999999999;

export const putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusIncomeTaxAmountMax = 999999999;


export const putYearendAdjustmentPayrollAndBonusResponse = zod.object({
  "payroll_and_bonus": zod.object({
  "fixed_payroll": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollMax).optional().describe('確定給与額'),
  "fixed_payroll_deduction": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollDeductionMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollDeductionMax).optional().describe('確定給与控除額'),
  "fixed_payroll_income_tax": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollIncomeTaxMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedPayrollIncomeTaxMax).optional().describe('確定給与所得税額'),
  "fixed_bonus": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusMax).optional().describe('確定賞与額'),
  "fixed_bonus_deduction": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusDeductionMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusDeductionMax).optional().describe('確定賞与控除額'),
  "fixed_bonus_income_tax": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusIncomeTaxMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusFixedBonusIncomeTaxMax).optional().describe('確定賞与所得税額'),
  "unentered_payroll_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollAmountMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollAmountMax).optional().describe('未入力給与額'),
  "unentered_payroll_deduction_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollDeductionAmountMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollDeductionAmountMax).optional().describe('未入力給与控除額'),
  "unentered_payroll_income_tax_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollIncomeTaxAmountMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredPayrollIncomeTaxAmountMax).optional().describe('未入力給与所得税額'),
  "unentered_bonus_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusAmountMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusAmountMax).optional().describe('未入力賞与額'),
  "unentered_bonus_deduction_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusDeductionAmountMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusDeductionAmountMax).optional().describe('未入力賞与控除額'),
  "unentered_bonus_income_tax_amount": zod.number().min(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusIncomeTaxAmountMin).max(putYearendAdjustmentPayrollAndBonusResponsePayrollAndBonusUnenteredBonusIncomeTaxAmountMax).optional().describe('未入力賞与所得税額')
}).optional()
})


export const putYearendAdjustmentDependentsPathYearMin = 2000;

export const putYearendAdjustmentDependentsPathYearMax = 2100;
export const putYearendAdjustmentDependentsPathEmployeeIdMax = 2147483647;


export const putYearendAdjustmentDependentsParams = zod.object({
  "year": zod.number().min(putYearendAdjustmentDependentsPathYearMin).max(putYearendAdjustmentDependentsPathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(putYearendAdjustmentDependentsPathEmployeeIdMax).describe('従業員ID')
})

export const putYearendAdjustmentDependentsBodyCompanyIdMax = 2147483647;
export const putYearendAdjustmentDependentsBodyDependentsItemIdMax = 2147483647;
export const putYearendAdjustmentDependentsBodyDependentsItemLastNameMax = 255;
export const putYearendAdjustmentDependentsBodyDependentsItemFirstNameMax = 255;
export const putYearendAdjustmentDependentsBodyDependentsItemLastNameKanaMax = 255;
export const putYearendAdjustmentDependentsBodyDependentsItemFirstNameKanaMax = 255;
export const putYearendAdjustmentDependentsBodyDependentsItemBirthDateRegExp = new RegExp('^[1-9][0-9]{3}-[0-9]{2}-[0-9]{2}$');
export const putYearendAdjustmentDependentsBodyDependentsItemIncomeMin = 0;

export const putYearendAdjustmentDependentsBodyDependentsItemIncomeMax = 999999999;
export const putYearendAdjustmentDependentsBodyDependentsItemEmploymentRevenueMin = 0;

export const putYearendAdjustmentDependentsBodyDependentsItemEmploymentRevenueMax = 999999999;
export const putYearendAdjustmentDependentsBodyDependentsItemAllOtherIncomeMin = 0;

export const putYearendAdjustmentDependentsBodyDependentsItemAllOtherIncomeMax = 999999999;
export const putYearendAdjustmentDependentsBodyDependentsItemZipcode1Max = 3;
export const putYearendAdjustmentDependentsBodyDependentsItemZipcode2Max = 4;
export const putYearendAdjustmentDependentsBodyDependentsItemPrefectureCodeMin = -1;

export const putYearendAdjustmentDependentsBodyDependentsItemPrefectureCodeMax = 46;
export const putYearendAdjustmentDependentsBodyDependentsItemAddressMax = 255;
export const putYearendAdjustmentDependentsBodyDependentsItemAddressKanaMax = 255;
export const putYearendAdjustmentDependentsBodyDependentsItemAnnualRemittanceAmountMin = 0;

export const putYearendAdjustmentDependentsBodyDependentsItemAnnualRemittanceAmountMax = 999999999;
export const putYearendAdjustmentDependentsBodyDependentsItemRetirementIncomeMin = 0;

export const putYearendAdjustmentDependentsBodyDependentsItemRetirementIncomeMax = 999999999;


export const putYearendAdjustmentDependentsBody = zod.object({
  "company_id": zod.number().min(1).max(putYearendAdjustmentDependentsBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "dependents": zod.array(zod.object({
  "id": zod.number().min(1).max(putYearendAdjustmentDependentsBodyDependentsItemIdMax).optional().describe('家族情報ID（idがない場合は新規作成になる)'),
  "destroy": zod.boolean().optional().describe('家族情報を削除するか true: 削除する, false: 削除しない'),
  "last_name": zod.string().max(putYearendAdjustmentDependentsBodyDependentsItemLastNameMax).describe('姓 null不可'),
  "first_name": zod.string().max(putYearendAdjustmentDependentsBodyDependentsItemFirstNameMax).describe('名 null不可'),
  "last_name_kana": zod.string().max(putYearendAdjustmentDependentsBodyDependentsItemLastNameKanaMax).optional().describe('姓カナ'),
  "first_name_kana": zod.string().max(putYearendAdjustmentDependentsBodyDependentsItemFirstNameKanaMax).optional().describe('名カナ'),
  "relationship": zod.enum(['spouse', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other', 'great_grandfather', 'great_grandmother', 'spouses_child']).describe('続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子'),
  "birth_date": zod.string().date().regex(putYearendAdjustmentDependentsBodyDependentsItemBirthDateRegExp).describe('生年月日 null不可 1900年1月1日から現在年+5の12月31日まで登録可能'),
  "social_insurance_and_tax_dependent": zod.enum(['social_insurance_and_tax', 'tax_only', 'social_insurance_only', 'not_dependent']).describe('扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない'),
  "income": zod.number().min(putYearendAdjustmentDependentsBodyDependentsItemIncomeMin).max(putYearendAdjustmentDependentsBodyDependentsItemIncomeMax).optional().describe('所得 配偶者は「扶養状況」がsocial_insurance_only又はnot_dependentの場合のみ更新可能。配偶者以外は更新可能。 配偶者で「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合、「給与収入」、「給与以外の所得」から自動で「所得」が計算されます。'),
  "employment_revenue": zod.number().min(putYearendAdjustmentDependentsBodyDependentsItemEmploymentRevenueMin).max(putYearendAdjustmentDependentsBodyDependentsItemEmploymentRevenueMax).optional().describe('給与収入 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。'),
  "all_other_income": zod.number().min(putYearendAdjustmentDependentsBodyDependentsItemAllOtherIncomeMin).max(putYearendAdjustmentDependentsBodyDependentsItemAllOtherIncomeMax).optional().describe('給与以外の所得 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。'),
  "disability_type": zod.enum(['na', 'general', 'heavy']).describe('障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者'),
  "residence_type": zod.enum(['live_in', 'resident', 'non_resident']).describe('同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)'),
  "zipcode1": zod.string().max(putYearendAdjustmentDependentsBodyDependentsItemZipcode1Max).nullish().describe('住民票住所の郵便番号1 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号1」を登録'),
  "zipcode2": zod.string().max(putYearendAdjustmentDependentsBodyDependentsItemZipcode2Max).nullish().describe('住民票住所の郵便番号2 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号2」を登録'),
  "prefecture_code": zod.number().min(putYearendAdjustmentDependentsBodyDependentsItemPrefectureCodeMin).max(putYearendAdjustmentDependentsBodyDependentsItemPrefectureCodeMax).optional().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)  「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の都道府県コード」を登録'),
  "address": zod.string().max(putYearendAdjustmentDependentsBodyDependentsItemAddressMax).optional().describe('住民票住所の市区町村以降の住所 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所」を登録'),
  "address_kana": zod.string().max(putYearendAdjustmentDependentsBodyDependentsItemAddressKanaMax).optional().describe('住民票住所の市区町村以降の住所カナ 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所カナ」を登録'),
  "annual_remittance_amount": zod.number().min(putYearendAdjustmentDependentsBodyDependentsItemAnnualRemittanceAmountMin).max(putYearendAdjustmentDependentsBodyDependentsItemAnnualRemittanceAmountMax).optional().describe('国外居住親族への年間の送金額 「同居・別居」が「同居」、「別居(国内)」の場合は登録不可'),
  "non_resident_dependents_reason": zod.enum(['none', 'over_16_to_under_30_or_over_70', 'study_abroad', 'handicapped', 'over_38_man']).optional().describe('非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払 続柄が「配偶者」または「同居・別居」が「同居」、「別居(国内)」の場合は登録不可'),
  "is_resident_tax_only_deduction": zod.boolean().optional().describe('住民税のみの控除対象かどうか'),
  "retirement_income": zod.number().min(putYearendAdjustmentDependentsBodyDependentsItemRetirementIncomeMin).max(putYearendAdjustmentDependentsBodyDependentsItemRetirementIncomeMax).optional().describe('退職所得')
})).describe('家族情報')
})

export const putYearendAdjustmentDependentsResponseDependentsItemLastNameMax = 255;
export const putYearendAdjustmentDependentsResponseDependentsItemFirstNameMax = 255;
export const putYearendAdjustmentDependentsResponseDependentsItemLastNameKanaMax = 255;
export const putYearendAdjustmentDependentsResponseDependentsItemFirstNameKanaMax = 255;
export const putYearendAdjustmentDependentsResponseDependentsItemIncomeMin = 0;

export const putYearendAdjustmentDependentsResponseDependentsItemIncomeMax = 999999999;
export const putYearendAdjustmentDependentsResponseDependentsItemEmploymentRevenueMin = 0;

export const putYearendAdjustmentDependentsResponseDependentsItemEmploymentRevenueMax = 999999999;
export const putYearendAdjustmentDependentsResponseDependentsItemAllOtherIncomeMin = 0;

export const putYearendAdjustmentDependentsResponseDependentsItemAllOtherIncomeMax = 999999999;
export const putYearendAdjustmentDependentsResponseDependentsItemZipcode1Max = 3;
export const putYearendAdjustmentDependentsResponseDependentsItemZipcode2Max = 4;
export const putYearendAdjustmentDependentsResponseDependentsItemPrefectureCodeMin = -1;

export const putYearendAdjustmentDependentsResponseDependentsItemPrefectureCodeMax = 46;
export const putYearendAdjustmentDependentsResponseDependentsItemAddressMax = 255;
export const putYearendAdjustmentDependentsResponseDependentsItemAddressKanaMax = 255;
export const putYearendAdjustmentDependentsResponseDependentsItemAnnualRemittanceAmountMin = 0;

export const putYearendAdjustmentDependentsResponseDependentsItemAnnualRemittanceAmountMax = 999999999;
export const putYearendAdjustmentDependentsResponseDependentsItemRetirementIncomeMin = 0;

export const putYearendAdjustmentDependentsResponseDependentsItemRetirementIncomeMax = 999999999;


export const putYearendAdjustmentDependentsResponse = zod.object({
  "dependents": zod.array(zod.object({
  "id": zod.number().optional().describe('家族情報ID'),
  "last_name": zod.string().max(putYearendAdjustmentDependentsResponseDependentsItemLastNameMax).optional().describe('姓 null不可'),
  "first_name": zod.string().max(putYearendAdjustmentDependentsResponseDependentsItemFirstNameMax).optional().describe('名 null不可'),
  "last_name_kana": zod.string().max(putYearendAdjustmentDependentsResponseDependentsItemLastNameKanaMax).optional().describe('姓カナ'),
  "first_name_kana": zod.string().max(putYearendAdjustmentDependentsResponseDependentsItemFirstNameKanaMax).optional().describe('名カナ'),
  "relationship": zod.enum(['spouse', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other', 'great_grandfather', 'great_grandmother', 'spouses_child']).optional().describe('続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子'),
  "birth_date": zod.string().date().optional().describe('生年月日 null不可 1900年1月1日から現在年+5年12月31日まで登録可能'),
  "social_insurance_and_tax_dependent": zod.enum(['social_insurance_and_tax', 'tax_only', 'social_insurance_only', 'not_dependent']).optional().describe('扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない'),
  "income": zod.number().min(putYearendAdjustmentDependentsResponseDependentsItemIncomeMin).max(putYearendAdjustmentDependentsResponseDependentsItemIncomeMax).optional().describe('所得 配偶者は「扶養状況」がsocial_insurance_only又はnot_dependentの場合のみ更新可能。配偶者以外は更新可能。 配偶者で「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合、「給与収入」、「給与以外の所得」から自動で「所得」が計算されます。'),
  "employment_revenue": zod.number().min(putYearendAdjustmentDependentsResponseDependentsItemEmploymentRevenueMin).max(putYearendAdjustmentDependentsResponseDependentsItemEmploymentRevenueMax).optional().describe('給与収入 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。'),
  "all_other_income": zod.number().min(putYearendAdjustmentDependentsResponseDependentsItemAllOtherIncomeMin).max(putYearendAdjustmentDependentsResponseDependentsItemAllOtherIncomeMax).optional().describe('給与以外の所得 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。'),
  "disability_type": zod.enum(['na', 'general', 'heavy']).optional().describe('障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者'),
  "residence_type": zod.enum(['live_in', 'resident', 'non_resident']).optional().describe('同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)'),
  "zipcode1": zod.string().max(putYearendAdjustmentDependentsResponseDependentsItemZipcode1Max).nullish().describe('住民票住所の郵便番号1 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号1」を登録'),
  "zipcode2": zod.string().max(putYearendAdjustmentDependentsResponseDependentsItemZipcode2Max).nullish().describe('住民票住所の郵便番号2 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号2」を登録'),
  "prefecture_code": zod.number().min(putYearendAdjustmentDependentsResponseDependentsItemPrefectureCodeMin).max(putYearendAdjustmentDependentsResponseDependentsItemPrefectureCodeMax).optional().describe('住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)  「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の都道府県コード」を登録'),
  "address": zod.string().max(putYearendAdjustmentDependentsResponseDependentsItemAddressMax).optional().describe('住民票住所の市区町村以降の住所 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所」を登録'),
  "address_kana": zod.string().max(putYearendAdjustmentDependentsResponseDependentsItemAddressKanaMax).optional().describe('住民票住所の市区町村以降の住所カナ 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所カナ」を登録'),
  "annual_remittance_amount": zod.number().min(putYearendAdjustmentDependentsResponseDependentsItemAnnualRemittanceAmountMin).max(putYearendAdjustmentDependentsResponseDependentsItemAnnualRemittanceAmountMax).optional().describe('国外居住親族への年間の送金額 「同居・別居」が「同居」、「別居(国内)」の場合は登録不可'),
  "non_resident_dependents_reason": zod.enum(['none', 'over_16_to_under_30_or_over_70', 'study_abroad', 'handicapped', 'over_38_man']).optional().describe('非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払 続柄が「配偶者」または「同居・別居」が「同居」、「別居(国内)」の場合は登録不可'),
  "is_resident_tax_only_deduction": zod.boolean().optional().describe('住民税のみの控除対象かどうか'),
  "retirement_income": zod.number().min(putYearendAdjustmentDependentsResponseDependentsItemRetirementIncomeMin).max(putYearendAdjustmentDependentsResponseDependentsItemRetirementIncomeMax).optional().describe('退職所得')
})).optional().describe('家族情報')
})


export const putYearendAdjustmentPreviousJobPathYearMin = 2000;

export const putYearendAdjustmentPreviousJobPathYearMax = 2100;
export const putYearendAdjustmentPreviousJobPathEmployeeIdMax = 2147483647;


export const putYearendAdjustmentPreviousJobParams = zod.object({
  "year": zod.number().min(putYearendAdjustmentPreviousJobPathYearMin).max(putYearendAdjustmentPreviousJobPathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(putYearendAdjustmentPreviousJobPathEmployeeIdMax).describe('従業員ID')
})

export const putYearendAdjustmentPreviousJobBodyCompanyIdMax = 2147483647;
export const putYearendAdjustmentPreviousJobBodyPreviousJobIncomeMin = -999999999;

export const putYearendAdjustmentPreviousJobBodyPreviousJobIncomeMax = 999999999;
export const putYearendAdjustmentPreviousJobBodyPreviousJobDeductionMin = -999999999;

export const putYearendAdjustmentPreviousJobBodyPreviousJobDeductionMax = 999999999;
export const putYearendAdjustmentPreviousJobBodyPreviousJobWithholdingTaxAmountMin = -999999999;

export const putYearendAdjustmentPreviousJobBodyPreviousJobWithholdingTaxAmountMax = 999999999;
export const putYearendAdjustmentPreviousJobBodyPreviousJobCompanyNameMax = 255;
export const putYearendAdjustmentPreviousJobBodyPreviousJobCompanyAddressMax = 255;


export const putYearendAdjustmentPreviousJobBody = zod.object({
  "company_id": zod.number().min(1).max(putYearendAdjustmentPreviousJobBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "previous_job": zod.object({
  "income": zod.number().min(putYearendAdjustmentPreviousJobBodyPreviousJobIncomeMin).max(putYearendAdjustmentPreviousJobBodyPreviousJobIncomeMax).describe('前職の支払金額'),
  "deduction": zod.number().min(putYearendAdjustmentPreviousJobBodyPreviousJobDeductionMin).max(putYearendAdjustmentPreviousJobBodyPreviousJobDeductionMax).describe('前職の社会保険料等の金額'),
  "withholding_tax_amount": zod.number().min(putYearendAdjustmentPreviousJobBodyPreviousJobWithholdingTaxAmountMin).max(putYearendAdjustmentPreviousJobBodyPreviousJobWithholdingTaxAmountMax).describe('前職の源泉徴収額'),
  "company_name": zod.string().max(putYearendAdjustmentPreviousJobBodyPreviousJobCompanyNameMax).describe('前職の社名'),
  "company_address": zod.string().max(putYearendAdjustmentPreviousJobBodyPreviousJobCompanyAddressMax).describe('前職の事業所住所'),
  "retire_date": zod.string().date().describe('前職の退職日 現在年-10年1月1日から現在年+5年12月31日まで登録可能')
})
})

export const putYearendAdjustmentPreviousJobResponsePreviousJobIncomeMin = -999999999;

export const putYearendAdjustmentPreviousJobResponsePreviousJobIncomeMax = 999999999;
export const putYearendAdjustmentPreviousJobResponsePreviousJobDeductionMin = -999999999;

export const putYearendAdjustmentPreviousJobResponsePreviousJobDeductionMax = 999999999;
export const putYearendAdjustmentPreviousJobResponsePreviousJobWithholdingTaxAmountMin = -999999999;

export const putYearendAdjustmentPreviousJobResponsePreviousJobWithholdingTaxAmountMax = 999999999;
export const putYearendAdjustmentPreviousJobResponsePreviousJobCompanyNameMax = 255;
export const putYearendAdjustmentPreviousJobResponsePreviousJobCompanyAddressMax = 255;


export const putYearendAdjustmentPreviousJobResponse = zod.object({
  "previous_job": zod.object({
  "income": zod.number().min(putYearendAdjustmentPreviousJobResponsePreviousJobIncomeMin).max(putYearendAdjustmentPreviousJobResponsePreviousJobIncomeMax).optional().describe('前職の支払金額'),
  "deduction": zod.number().min(putYearendAdjustmentPreviousJobResponsePreviousJobDeductionMin).max(putYearendAdjustmentPreviousJobResponsePreviousJobDeductionMax).optional().describe('前職の社会保険料等の金額'),
  "withholding_tax_amount": zod.number().min(putYearendAdjustmentPreviousJobResponsePreviousJobWithholdingTaxAmountMin).max(putYearendAdjustmentPreviousJobResponsePreviousJobWithholdingTaxAmountMax).optional().describe('前職の源泉徴収額'),
  "company_name": zod.string().max(putYearendAdjustmentPreviousJobResponsePreviousJobCompanyNameMax).optional().describe('前職の社名'),
  "company_address": zod.string().max(putYearendAdjustmentPreviousJobResponsePreviousJobCompanyAddressMax).optional().describe('前職の事業所住所'),
  "retire_date": zod.string().date().optional().describe('前職の退職日 現在年-10年1月1日から現在年+5年12月31日まで登録可能')
}).nullish()
})


export const destroyYearendAdjustmentPreviousJobPathYearMin = 2000;

export const destroyYearendAdjustmentPreviousJobPathYearMax = 2100;
export const destroyYearendAdjustmentPreviousJobPathEmployeeIdMax = 2147483647;


export const destroyYearendAdjustmentPreviousJobParams = zod.object({
  "year": zod.number().min(destroyYearendAdjustmentPreviousJobPathYearMin).max(destroyYearendAdjustmentPreviousJobPathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(destroyYearendAdjustmentPreviousJobPathEmployeeIdMax).describe('従業員ID')
})

export const destroyYearendAdjustmentPreviousJobQueryCompanyIdMax = 2147483647;


export const destroyYearendAdjustmentPreviousJobQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyYearendAdjustmentPreviousJobQueryCompanyIdMax).describe('事業所ID')
})


export const postYearendAdjustmentInsurancesPathYearMin = 2000;

export const postYearendAdjustmentInsurancesPathYearMax = 2100;
export const postYearendAdjustmentInsurancesPathEmployeeIdMax = 2147483647;


export const postYearendAdjustmentInsurancesParams = zod.object({
  "year": zod.number().min(postYearendAdjustmentInsurancesPathYearMin).max(postYearendAdjustmentInsurancesPathYearMax).describe('作成対象年'),
  "employee_id": zod.number().min(1).max(postYearendAdjustmentInsurancesPathEmployeeIdMax).describe('従業員ID')
})

export const postYearendAdjustmentInsurancesBodyCompanyIdMax = 2147483647;
export const postYearendAdjustmentInsurancesBodyInsuranceCompanyNameMax = 255;
export const postYearendAdjustmentInsurancesBodyInsuranceKindOfPurposeMax = 255;
export const postYearendAdjustmentInsurancesBodyInsurancePolicyholderLastNameMax = 255;
export const postYearendAdjustmentInsurancesBodyInsurancePolicyholderFirstNameMax = 255;
export const postYearendAdjustmentInsurancesBodyInsuranceRecipientLastNameMax = 255;
export const postYearendAdjustmentInsurancesBodyInsuranceRecipientFirstNameMax = 255;
export const postYearendAdjustmentInsurancesBodyInsurancePaymentStartDateRegExp = new RegExp('^([1-2][0-9]{3}-[0-9]{2}-[0-9]{2})?$');
export const postYearendAdjustmentInsurancesBodyInsuranceAmountMin = 0;

export const postYearendAdjustmentInsurancesBodyInsuranceAmountMax = 99999999;


export const postYearendAdjustmentInsurancesBody = zod.object({
  "company_id": zod.number().min(1).max(postYearendAdjustmentInsurancesBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "insurance": zod.object({
  "type": zod.enum(['life_care_pension_insurance', 'earthquake_non_life_insurance', 'social_insurance', 'other_insurance']).describe('保険の種類 life_care_pension_insurance: 生命保険・介護医療保険・個人年金保険, earthquake_non_life_insurance: 地震保険・旧長期損害保険, social_insurance: 社会保険, other_insurance: その他の保険（小規模企業共済等）'),
  "category": zod.enum(['life', 'care', 'pension', 'earthquake', 'old_long_term_non_life', 'national_pension', 'national_pension_fund_premium', 'national_health', 'care_insurance_deduction_of_pension', 'health', 'employee_pension', 'advanced_elderly_medical', 'sema', 'idc', 'cdc', 'dsma', 'none']).describe('区分<br>\n保険会社等が発行する証明書類に基づいて区分を設定してください。<br>\n保険の種類によって設定可能な値が変わります。<br>\n・life_care_pension_insurance<br>\n　life: 生命保険<br>\n　care: 介護保険<br>\n　pension: 個人年金保険<br>\n・earthquake_non_life_insurance<br>\n　earthquake: 地震保険<br>\n　old_long_term_non_life: 旧長期損害保険<br>\n・social_insurance<br>\n　national_pension: 国民年金<br>\n　national_pension_fund_premium: 国民年金基金<br>\n　national_health: 国民健康保険<br>\n　health: 健康保険<br>\n　care_insurance_deduction_of_pension: 介護保険<br>\n　employee_pension: 厚生年金<br>\n　advanced_elderly_medical: 後期高齢者医療保険<br>\n　none: その他（印刷後に手書き）<br>\n・other_insurance<br>\n　sema: 独立行政法人中小企業基盤整備機構の共済契約の掛金<br>\n　idc: 個人型確定拠出年金（iDeCo）<br>\n　cdc: 企業型確定拠出年金<br>\n　dsma: 心身障害者扶養共済制度に関する契約の掛金<br>'),
  "new_or_old": zod.enum(['new', 'old', 'none']).describe('新旧区分<br>\n区分が生命保険または個人年金保険の時のみ、新制度なら new を、旧制度なら old を指定します。<br>\n上記以外の保険では none を指定してください。'),
  "company_name": zod.string().max(postYearendAdjustmentInsurancesBodyInsuranceCompanyNameMax).nullish().describe('保険会社等の名称<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "kind_of_purpose": zod.string().max(postYearendAdjustmentInsurancesBodyInsuranceKindOfPurposeMax).nullish().describe('保険等の種類（目的）<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "period": zod.enum(['終身', '0年', '1年', '2年', '3年', '4年', '5年', '6年', '7年', '8年', '9年', '10年', '11年', '12年', '13年', '14年', '15年', '16年', '17年', '18年', '19年', '20年', '21年', '22年', '23年', '24年', '25年', '26年', '27年', '28年', '29年', '30年', '31年', '32年', '33年', '34年', '35年', '36年', '37年', '38年', '39年', '40年', '41年', '42年', '43年', '44年', '45年', '46年', '47年', '48年', '49年', '50年', '51年', '52年', '53年', '54年', '55年', '56年', '57年', '58年', '59年', '60年', '61年', '62年', '63年', '64年', '65年', '66年', '67年', '68年', '69年', '70年', '71年', '72年', '73年', '74年', '75年', '76年', '77年', '78年', '79年', '80年', '81年', '82年', '83年', '84年', '85年', '86年', '87年', '88年', '89年', '90年', '91年', '92年', '93年', '94年', '95年', '96年', '97年', '98年', '99年', '100年', '']).nullish().describe('保険期間又は年金支払期間<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "policyholder_last_name": zod.string().max(postYearendAdjustmentInsurancesBodyInsurancePolicyholderLastNameMax).nullish().describe('保険等の契約者 姓<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "policyholder_first_name": zod.string().max(postYearendAdjustmentInsurancesBodyInsurancePolicyholderFirstNameMax).nullish().describe('保険等の契約者 名<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_last_name": zod.string().max(postYearendAdjustmentInsurancesBodyInsuranceRecipientLastNameMax).nullish().describe('保険金等の受取人 姓<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_first_name": zod.string().max(postYearendAdjustmentInsurancesBodyInsuranceRecipientFirstNameMax).nullish().describe('保険金等の受取人 名<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_relationship": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other', '']).nullish().describe('保険金等の受取人 あなたとの続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, \"\": 空欄<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "payment_start_date": zod.string().regex(postYearendAdjustmentInsurancesBodyInsurancePaymentStartDateRegExp).nullish().describe('年金の支払開始日 1900年1月1日から現在年+100の12月31日まで登録可能。<br>\n区分が個人年金保険の時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "amount": zod.number().min(postYearendAdjustmentInsurancesBodyInsuranceAmountMin).max(postYearendAdjustmentInsurancesBodyInsuranceAmountMax).describe('保険料額')
})
})


export const putYearendAdjustmentInsurancesPathYearMin = 2000;

export const putYearendAdjustmentInsurancesPathYearMax = 2100;
export const putYearendAdjustmentInsurancesPathEmployeeIdMax = 2147483647;
export const putYearendAdjustmentInsurancesPathIdMax = 2147483647;


export const putYearendAdjustmentInsurancesParams = zod.object({
  "year": zod.number().min(putYearendAdjustmentInsurancesPathYearMin).max(putYearendAdjustmentInsurancesPathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(putYearendAdjustmentInsurancesPathEmployeeIdMax).describe('従業員ID'),
  "id": zod.number().min(1).max(putYearendAdjustmentInsurancesPathIdMax).describe('保険料ID')
})

export const putYearendAdjustmentInsurancesBodyCompanyIdMax = 2147483647;
export const putYearendAdjustmentInsurancesBodyInsuranceCompanyNameMax = 255;
export const putYearendAdjustmentInsurancesBodyInsuranceKindOfPurposeMax = 255;
export const putYearendAdjustmentInsurancesBodyInsurancePolicyholderLastNameMax = 255;
export const putYearendAdjustmentInsurancesBodyInsurancePolicyholderFirstNameMax = 255;
export const putYearendAdjustmentInsurancesBodyInsuranceRecipientLastNameMax = 255;
export const putYearendAdjustmentInsurancesBodyInsuranceRecipientFirstNameMax = 255;
export const putYearendAdjustmentInsurancesBodyInsurancePaymentStartDateRegExp = new RegExp('^([1-2][0-9]{3}-[0-9]{2}-[0-9]{2})?$');
export const putYearendAdjustmentInsurancesBodyInsuranceAmountMin = 0;

export const putYearendAdjustmentInsurancesBodyInsuranceAmountMax = 99999999;


export const putYearendAdjustmentInsurancesBody = zod.object({
  "company_id": zod.number().min(1).max(putYearendAdjustmentInsurancesBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "insurance": zod.object({
  "type": zod.enum(['life_care_pension_insurance', 'earthquake_non_life_insurance', 'social_insurance', 'other_insurance']).describe('保険の種類 life_care_pension_insurance: 生命保険・介護医療保険・個人年金保険, earthquake_non_life_insurance: 地震保険・旧長期損害保険, social_insurance: 社会保険, other_insurance: その他の保険（小規模企業共済等）'),
  "category": zod.enum(['life', 'care', 'pension', 'earthquake', 'old_long_term_non_life', 'national_pension', 'national_pension_fund_premium', 'national_health', 'care_insurance_deduction_of_pension', 'health', 'employee_pension', 'advanced_elderly_medical', 'sema', 'idc', 'cdc', 'dsma', 'none']).describe('区分<br>\n保険会社等が発行する証明書類に基づいて区分を設定してください。<br>\n保険の種類によって設定可能な値が変わります。<br>\n・life_care_pension_insurance<br>\n　life: 生命保険<br>\n　care: 介護保険<br>\n　pension: 個人年金保険<br>\n・earthquake_non_life_insurance<br>\n　earthquake: 地震保険<br>\n　old_long_term_non_life: 旧長期損害保険<br>\n・social_insurance<br>\n　national_pension: 国民年金<br>\n　national_pension_fund_premium: 国民年金基金<br>\n　national_health: 国民健康保険<br>\n　health: 健康保険<br>\n　care_insurance_deduction_of_pension: 介護保険<br>\n　employee_pension: 厚生年金<br>\n　advanced_elderly_medical: 後期高齢者医療保険<br>\n　none: その他（印刷後に手書き）<br>\n・other_insurance<br>\n　sema: 独立行政法人中小企業基盤整備機構の共済契約の掛金<br>\n　idc: 個人型確定拠出年金（iDeCo）<br>\n　cdc: 企業型確定拠出年金<br>\n　dsma: 心身障害者扶養共済制度に関する契約の掛金<br>'),
  "new_or_old": zod.enum(['new', 'old', 'none']).describe('新旧区分<br>\n区分が生命保険または個人年金保険の時のみ、新制度なら new を、旧制度なら old を指定します。<br>\n上記以外の保険では none を指定してください。'),
  "company_name": zod.string().max(putYearendAdjustmentInsurancesBodyInsuranceCompanyNameMax).nullish().describe('保険会社等の名称<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "kind_of_purpose": zod.string().max(putYearendAdjustmentInsurancesBodyInsuranceKindOfPurposeMax).nullish().describe('保険等の種類（目的）<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "period": zod.enum(['終身', '0年', '1年', '2年', '3年', '4年', '5年', '6年', '7年', '8年', '9年', '10年', '11年', '12年', '13年', '14年', '15年', '16年', '17年', '18年', '19年', '20年', '21年', '22年', '23年', '24年', '25年', '26年', '27年', '28年', '29年', '30年', '31年', '32年', '33年', '34年', '35年', '36年', '37年', '38年', '39年', '40年', '41年', '42年', '43年', '44年', '45年', '46年', '47年', '48年', '49年', '50年', '51年', '52年', '53年', '54年', '55年', '56年', '57年', '58年', '59年', '60年', '61年', '62年', '63年', '64年', '65年', '66年', '67年', '68年', '69年', '70年', '71年', '72年', '73年', '74年', '75年', '76年', '77年', '78年', '79年', '80年', '81年', '82年', '83年', '84年', '85年', '86年', '87年', '88年', '89年', '90年', '91年', '92年', '93年', '94年', '95年', '96年', '97年', '98年', '99年', '100年', '']).nullish().describe('保険期間又は年金支払期間<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "policyholder_last_name": zod.string().max(putYearendAdjustmentInsurancesBodyInsurancePolicyholderLastNameMax).nullish().describe('保険等の契約者 姓<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "policyholder_first_name": zod.string().max(putYearendAdjustmentInsurancesBodyInsurancePolicyholderFirstNameMax).nullish().describe('保険等の契約者 名<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_last_name": zod.string().max(putYearendAdjustmentInsurancesBodyInsuranceRecipientLastNameMax).nullish().describe('保険金等の受取人 姓<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_first_name": zod.string().max(putYearendAdjustmentInsurancesBodyInsuranceRecipientFirstNameMax).nullish().describe('保険金等の受取人 名<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_relationship": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other', '']).nullish().describe('保険金等の受取人 あなたとの続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, \"\": 空欄<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "payment_start_date": zod.string().regex(putYearendAdjustmentInsurancesBodyInsurancePaymentStartDateRegExp).nullish().describe('年金の支払開始日 1900年1月1日から現在年+100の12月31日まで登録可能。<br>\n区分が個人年金保険の時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "amount": zod.number().min(putYearendAdjustmentInsurancesBodyInsuranceAmountMin).max(putYearendAdjustmentInsurancesBodyInsuranceAmountMax).describe('保険料額')
})
})

export const putYearendAdjustmentInsurancesResponseInsurancesItemIdMax = 2147483647;
export const putYearendAdjustmentInsurancesResponseInsurancesItemCompanyNameMax = 255;
export const putYearendAdjustmentInsurancesResponseInsurancesItemKindOfPurposeMax = 255;
export const putYearendAdjustmentInsurancesResponseInsurancesItemPolicyholderLastNameMax = 255;
export const putYearendAdjustmentInsurancesResponseInsurancesItemPolicyholderFirstNameMax = 255;
export const putYearendAdjustmentInsurancesResponseInsurancesItemRecipientLastNameMax = 255;
export const putYearendAdjustmentInsurancesResponseInsurancesItemRecipientFirstNameMax = 255;
export const putYearendAdjustmentInsurancesResponseInsurancesItemPaymentStartDateRegExp = new RegExp('^([1-2][0-9]{3}-[0-9]{2}-[0-9]{2})?$');
export const putYearendAdjustmentInsurancesResponseInsurancesItemAmountMin = 0;

export const putYearendAdjustmentInsurancesResponseInsurancesItemAmountMax = 99999999;


export const putYearendAdjustmentInsurancesResponse = zod.object({
  "insurances": zod.array(zod.object({
  "id": zod.number().min(1).max(putYearendAdjustmentInsurancesResponseInsurancesItemIdMax).optional().describe('保険料id'),
  "type": zod.enum(['life_care_pension_insurance', 'earthquake_non_life_insurance', 'social_insurance', 'other_insurance']).optional().describe('保険の種類 life_care_pension_insurance: 生命保険・介護医療保険・個人年金保険, earthquake_non_life_insurance: 地震保険・旧長期損害保険, social_insurance: 社会保険, other_insurance: その他の保険（小規模企業共済等）'),
  "category": zod.enum(['life', 'care', 'pension', 'earthquake', 'old_long_term_non_life', 'national_pension', 'national_pension_fund_premium', 'national_health', 'care_insurance_deduction_of_pension', 'health', 'employee_pension', 'advanced_elderly_medical', 'sema', 'idc', 'cdc', 'dsma', 'none']).optional().describe('区分<br>\n保険会社等が発行する証明書類に基づいて区分を設定してください。<br>\n保険の種類によって設定可能な値が変わります。<br>\n・life_care_pension_insurance<br>\n　life: 生命保険<br>\n　care: 介護保険<br>\n　pension: 個人年金保険<br>\n・earthquake_non_life_insurance<br>\n　earthquake: 地震保険<br>\n　old_long_term_non_life: 旧長期損害保険<br>\n・social_insurance<br>\n　national_pension: 国民年金<br>\n　national_pension_fund_premium: 国民年金基金<br>\n　national_health: 国民健康保険<br>\n　health: 健康保険<br>\n　care_insurance_deduction_of_pension: 介護保険<br>\n　employee_pension: 厚生年金<br>\n　advanced_elderly_medical: 後期高齢者医療保険<br>\n　none: その他（印刷後に手書き）<br>\n・other_insurance<br>\n　sema: 独立行政法人中小企業基盤整備機構の共済契約の掛金<br>\n　idc: 個人型確定拠出年金（iDeCo）<br>\n　cdc: 企業型確定拠出年金<br>\n　dsma: 心身障害者扶養共済制度に関する契約の掛金<br>'),
  "new_or_old": zod.enum(['new', 'old', 'none']).optional().describe('新旧区分<br>\n区分が生命保険または個人年金保険の時のみ、新制度なら new を、旧制度なら old を指定します。<br>\n上記以外の保険では none を指定してください。'),
  "company_name": zod.string().max(putYearendAdjustmentInsurancesResponseInsurancesItemCompanyNameMax).nullish().describe('保険会社等の名称<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "kind_of_purpose": zod.string().max(putYearendAdjustmentInsurancesResponseInsurancesItemKindOfPurposeMax).nullish().describe('保険等の種類（目的）<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "period": zod.enum(['終身', '0年', '1年', '2年', '3年', '4年', '5年', '6年', '7年', '8年', '9年', '10年', '11年', '12年', '13年', '14年', '15年', '16年', '17年', '18年', '19年', '20年', '21年', '22年', '23年', '24年', '25年', '26年', '27年', '28年', '29年', '30年', '31年', '32年', '33年', '34年', '35年', '36年', '37年', '38年', '39年', '40年', '41年', '42年', '43年', '44年', '45年', '46年', '47年', '48年', '49年', '50年', '51年', '52年', '53年', '54年', '55年', '56年', '57年', '58年', '59年', '60年', '61年', '62年', '63年', '64年', '65年', '66年', '67年', '68年', '69年', '70年', '71年', '72年', '73年', '74年', '75年', '76年', '77年', '78年', '79年', '80年', '81年', '82年', '83年', '84年', '85年', '86年', '87年', '88年', '89年', '90年', '91年', '92年', '93年', '94年', '95年', '96年', '97年', '98年', '99年', '100年', '']).nullish().describe('保険期間又は年金支払期間<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "policyholder_last_name": zod.string().max(putYearendAdjustmentInsurancesResponseInsurancesItemPolicyholderLastNameMax).nullish().describe('保険等の契約者 姓<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "policyholder_first_name": zod.string().max(putYearendAdjustmentInsurancesResponseInsurancesItemPolicyholderFirstNameMax).nullish().describe('保険等の契約者 名<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_last_name": zod.string().max(putYearendAdjustmentInsurancesResponseInsurancesItemRecipientLastNameMax).nullish().describe('保険金等の受取人 姓<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_first_name": zod.string().max(putYearendAdjustmentInsurancesResponseInsurancesItemRecipientFirstNameMax).nullish().describe('保険金等の受取人 名<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "recipient_relationship": zod.enum(['myself', 'husband', 'wife', 'father', 'mother', 'child', 'senior_brother', 'junior_brother', 'senior_sister', 'junior_sister', 'grandchild', 'grandfather', 'grandmother', 'father_in_law', 'mother_in_law', 'grandfather_in_law', 'grandmother_in_law', 'other', '']).nullish().describe('保険金等の受取人 あなたとの続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, \"\": 空欄<br>\n保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "payment_start_date": zod.string().regex(putYearendAdjustmentInsurancesResponseInsurancesItemPaymentStartDateRegExp).nullish().describe('年金の支払開始日 1900年1月1日から現在年+100の12月31日まで登録可能。<br>\n区分が個人年金保険の時のみ、入力した値が反映されます。<br>\n上記以外の保険では入力した値は反映されません。'),
  "amount": zod.number().min(putYearendAdjustmentInsurancesResponseInsurancesItemAmountMin).max(putYearendAdjustmentInsurancesResponseInsurancesItemAmountMax).optional().describe('保険料額'),
  "certification_type": zod.enum(['xml']).nullish().describe('電子的控除証明書などの認証方法を利用した場合、その認証方法が反映されます。<br>\nxml: 電子的控除証明書を利用。証明書画像データの提出が免除されます。またrecipient_first_name、recipient_last_name、recipient_relationship以外のカラムが更新不可となります。')
})).optional()
})


export const destroyYearendAdjustmentInsurancesPathYearMin = 2000;

export const destroyYearendAdjustmentInsurancesPathYearMax = 2100;
export const destroyYearendAdjustmentInsurancesPathEmployeeIdMax = 2147483647;
export const destroyYearendAdjustmentInsurancesPathIdMax = 2147483647;


export const destroyYearendAdjustmentInsurancesParams = zod.object({
  "year": zod.number().min(destroyYearendAdjustmentInsurancesPathYearMin).max(destroyYearendAdjustmentInsurancesPathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(destroyYearendAdjustmentInsurancesPathEmployeeIdMax).describe('従業員ID'),
  "id": zod.number().min(1).max(destroyYearendAdjustmentInsurancesPathIdMax).describe('保険料ID')
})

export const destroyYearendAdjustmentInsurancesQueryCompanyIdMax = 2147483647;


export const destroyYearendAdjustmentInsurancesQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyYearendAdjustmentInsurancesQueryCompanyIdMax).describe('事業所ID')
})


export const putYearendAdjustmentHousingLoanDeductionPathYearMin = 2000;

export const putYearendAdjustmentHousingLoanDeductionPathYearMax = 2100;
export const putYearendAdjustmentHousingLoanDeductionPathEmployeeIdMax = 2147483647;


export const putYearendAdjustmentHousingLoanDeductionParams = zod.object({
  "year": zod.number().min(putYearendAdjustmentHousingLoanDeductionPathYearMin).max(putYearendAdjustmentHousingLoanDeductionPathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(putYearendAdjustmentHousingLoanDeductionPathEmployeeIdMax).describe('従業員ID')
})

export const putYearendAdjustmentHousingLoanDeductionBodyCompanyIdMax = 2147483647;
export const putYearendAdjustmentHousingLoanDeductionBodyHousingLoanDeductionMin = 0;

export const putYearendAdjustmentHousingLoanDeductionBodyHousingLoanDeductionMax = 999999999;


export const putYearendAdjustmentHousingLoanDeductionBody = zod.object({
  "company_id": zod.number().min(1).max(putYearendAdjustmentHousingLoanDeductionBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "housing_loan_deduction": zod.number().min(putYearendAdjustmentHousingLoanDeductionBodyHousingLoanDeductionMin).max(putYearendAdjustmentHousingLoanDeductionBodyHousingLoanDeductionMax).describe('住宅借入金等特別控除（必須）')
})

export const putYearendAdjustmentHousingLoanDeductionResponseHousingLoanDeductionMin = 0;

export const putYearendAdjustmentHousingLoanDeductionResponseHousingLoanDeductionMax = 999999999;
export const putYearendAdjustmentHousingLoanDeductionResponseHousingLoansItemIdMax = 2147483647;
export const putYearendAdjustmentHousingLoanDeductionResponseHousingLoansItemRemainingBalanceAtYearendMin = -999999999;

export const putYearendAdjustmentHousingLoanDeductionResponseHousingLoansItemRemainingBalanceAtYearendMax = 999999999;


export const putYearendAdjustmentHousingLoanDeductionResponse = zod.object({
  "housing_loan_deduction": zod.number().min(putYearendAdjustmentHousingLoanDeductionResponseHousingLoanDeductionMin).max(putYearendAdjustmentHousingLoanDeductionResponseHousingLoanDeductionMax).optional().describe('住宅借入金等特別控除'),
  "housing_loans": zod.array(zod.object({
  "id": zod.number().min(1).max(putYearendAdjustmentHousingLoanDeductionResponseHousingLoansItemIdMax).optional().describe('住宅ローンID'),
  "residence_start_date": zod.string().date().optional().describe('居住開始の年月日'),
  "remaining_balance_at_yearend": zod.number().min(putYearendAdjustmentHousingLoanDeductionResponseHousingLoansItemRemainingBalanceAtYearendMin).max(putYearendAdjustmentHousingLoanDeductionResponseHousingLoansItemRemainingBalanceAtYearendMax).optional().describe('住宅借入金等年末残高'),
  "category": zod.enum(['general', 'qualified', 'extension', 'earthquake']).optional().describe('住宅借入金等特別控除区分 general: 住: 一般の住宅借入金等, qualified: 認: 認定住宅の新築等, extension: 増: 特定増改築等, earthquake: 震: 震災特例法による特別控除'),
  "specific_case_type": zod.enum(['not_qualified', 'specified', 'special_specified_or_special_exception', 'exception_special_exception', 'special_residential_house']).optional().describe('特定取得/特別特定取得 not_qualified: 該当しない, specified: 特定取得, special_specified_or_special_exception: 特別特定取得または特別特例取得, exception_special_exception: 特例特別特例取得 special_residential_house 特家')
})).optional().describe('住宅ローン')
})


export const postYearendAdjustmentHousingLoanPathYearMin = 2000;

export const postYearendAdjustmentHousingLoanPathYearMax = 2100;
export const postYearendAdjustmentHousingLoanPathEmployeeIdMax = 2147483647;


export const postYearendAdjustmentHousingLoanParams = zod.object({
  "year": zod.number().min(postYearendAdjustmentHousingLoanPathYearMin).max(postYearendAdjustmentHousingLoanPathYearMax).describe('作成対象年'),
  "employee_id": zod.number().min(1).max(postYearendAdjustmentHousingLoanPathEmployeeIdMax).describe('従業員ID')
})

export const postYearendAdjustmentHousingLoanBodyCompanyIdMax = 2147483647;
export const postYearendAdjustmentHousingLoanBodyHousingLoanResidenceStartDateRegExp = new RegExp('^[2-9][0-9]{3}-[0-9]{2}-[0-9]{2}$');
export const postYearendAdjustmentHousingLoanBodyHousingLoanRemainingBalanceAtYearendMin = -999999999;

export const postYearendAdjustmentHousingLoanBodyHousingLoanRemainingBalanceAtYearendMax = 999999999;


export const postYearendAdjustmentHousingLoanBody = zod.object({
  "company_id": zod.number().min(1).max(postYearendAdjustmentHousingLoanBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "housing_loan": zod.object({
  "residence_start_date": zod.string().date().regex(postYearendAdjustmentHousingLoanBodyHousingLoanResidenceStartDateRegExp).describe('居住開始の年月日 2000年1月1日から現在年+5の12月31日まで登録可能'),
  "remaining_balance_at_yearend": zod.number().min(postYearendAdjustmentHousingLoanBodyHousingLoanRemainingBalanceAtYearendMin).max(postYearendAdjustmentHousingLoanBodyHousingLoanRemainingBalanceAtYearendMax).describe('住宅借入金等年末残高'),
  "category": zod.enum(['general', 'qualified', 'extension', 'earthquake']).describe('住宅借入金等特別控除区分 general: 住: 一般の住宅借入金等, qualified: 認: 認定住宅の新築等, extension: 増: 特定増改築等, earthquake: 震: 震災特例法による特別控除'),
  "specific_case_type": zod.enum(['not_qualified', 'specified', 'special_specified_or_special_exception', 'exception_special_exception', 'special_residential_house']).describe('特定取得/特別特定取得 not_qualified: 該当しない, specified: 特定取得, special_specified_or_special_exception: 特別特定取得または特別特例取得, exception_special_exception: 特例特別特例取得 special_residential_house 特家')
})
})


export const putYearendAdjustmentHousingLoanPathYearMin = 2000;

export const putYearendAdjustmentHousingLoanPathYearMax = 2100;
export const putYearendAdjustmentHousingLoanPathEmployeeIdMax = 2147483647;
export const putYearendAdjustmentHousingLoanPathIdMax = 2147483647;


export const putYearendAdjustmentHousingLoanParams = zod.object({
  "year": zod.number().min(putYearendAdjustmentHousingLoanPathYearMin).max(putYearendAdjustmentHousingLoanPathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(putYearendAdjustmentHousingLoanPathEmployeeIdMax).describe('従業員ID'),
  "id": zod.number().min(1).max(putYearendAdjustmentHousingLoanPathIdMax).describe('住宅ローンID')
})

export const putYearendAdjustmentHousingLoanBodyCompanyIdMax = 2147483647;
export const putYearendAdjustmentHousingLoanBodyHousingLoanResidenceStartDateRegExp = new RegExp('^[2-9][0-9]{3}-[0-9]{2}-[0-9]{2}$');
export const putYearendAdjustmentHousingLoanBodyHousingLoanRemainingBalanceAtYearendMin = -999999999;

export const putYearendAdjustmentHousingLoanBodyHousingLoanRemainingBalanceAtYearendMax = 999999999;


export const putYearendAdjustmentHousingLoanBody = zod.object({
  "company_id": zod.number().min(1).max(putYearendAdjustmentHousingLoanBodyCompanyIdMax).describe('更新対象事業所ID（必須）'),
  "housing_loan": zod.object({
  "residence_start_date": zod.string().date().regex(putYearendAdjustmentHousingLoanBodyHousingLoanResidenceStartDateRegExp).describe('居住開始の年月日 2000年1月1日から現在年+5の12月31日まで登録可能'),
  "remaining_balance_at_yearend": zod.number().min(putYearendAdjustmentHousingLoanBodyHousingLoanRemainingBalanceAtYearendMin).max(putYearendAdjustmentHousingLoanBodyHousingLoanRemainingBalanceAtYearendMax).describe('住宅借入金等年末残高'),
  "category": zod.enum(['general', 'qualified', 'extension', 'earthquake']).describe('住宅借入金等特別控除区分 general: 住: 一般の住宅借入金等, qualified: 認: 認定住宅の新築等, extension: 増: 特定増改築等, earthquake: 震: 震災特例法による特別控除'),
  "specific_case_type": zod.enum(['not_qualified', 'specified', 'special_specified_or_special_exception', 'exception_special_exception', 'special_residential_house']).describe('特定取得/特別特定取得 not_qualified: 該当しない, specified: 特定取得, special_specified_or_special_exception: 特別特定取得または特別特例取得, exception_special_exception: 特例特別特例取得 special_residential_house 特家')
})
})

export const putYearendAdjustmentHousingLoanResponseHousingLoanDeductionMin = 0;

export const putYearendAdjustmentHousingLoanResponseHousingLoanDeductionMax = 999999999;
export const putYearendAdjustmentHousingLoanResponseHousingLoansItemIdMax = 2147483647;
export const putYearendAdjustmentHousingLoanResponseHousingLoansItemRemainingBalanceAtYearendMin = -999999999;

export const putYearendAdjustmentHousingLoanResponseHousingLoansItemRemainingBalanceAtYearendMax = 999999999;


export const putYearendAdjustmentHousingLoanResponse = zod.object({
  "housing_loan_deduction": zod.number().min(putYearendAdjustmentHousingLoanResponseHousingLoanDeductionMin).max(putYearendAdjustmentHousingLoanResponseHousingLoanDeductionMax).optional().describe('住宅借入金等特別控除'),
  "housing_loans": zod.array(zod.object({
  "id": zod.number().min(1).max(putYearendAdjustmentHousingLoanResponseHousingLoansItemIdMax).optional().describe('住宅ローンID'),
  "residence_start_date": zod.string().date().optional().describe('居住開始の年月日'),
  "remaining_balance_at_yearend": zod.number().min(putYearendAdjustmentHousingLoanResponseHousingLoansItemRemainingBalanceAtYearendMin).max(putYearendAdjustmentHousingLoanResponseHousingLoansItemRemainingBalanceAtYearendMax).optional().describe('住宅借入金等年末残高'),
  "category": zod.enum(['general', 'qualified', 'extension', 'earthquake']).optional().describe('住宅借入金等特別控除区分 general: 住: 一般の住宅借入金等, qualified: 認: 認定住宅の新築等, extension: 増: 特定増改築等, earthquake: 震: 震災特例法による特別控除'),
  "specific_case_type": zod.enum(['not_qualified', 'specified', 'special_specified_or_special_exception', 'exception_special_exception', 'special_residential_house']).optional().describe('特定取得/特別特定取得 not_qualified: 該当しない, specified: 特定取得, special_specified_or_special_exception: 特別特定取得または特別特例取得, exception_special_exception: 特例特別特例取得 special_residential_house 特家')
})).optional().describe('住宅ローン')
})


export const destroyYearendAdjustmentHousingLoanPathYearMin = 2000;

export const destroyYearendAdjustmentHousingLoanPathYearMax = 2100;
export const destroyYearendAdjustmentHousingLoanPathEmployeeIdMax = 2147483647;
export const destroyYearendAdjustmentHousingLoanPathIdMax = 2147483647;


export const destroyYearendAdjustmentHousingLoanParams = zod.object({
  "year": zod.number().min(destroyYearendAdjustmentHousingLoanPathYearMin).max(destroyYearendAdjustmentHousingLoanPathYearMax).describe('更新対象年'),
  "employee_id": zod.number().min(1).max(destroyYearendAdjustmentHousingLoanPathEmployeeIdMax).describe('従業員ID'),
  "id": zod.number().min(1).max(destroyYearendAdjustmentHousingLoanPathIdMax).describe('住宅ローンID')
})

export const destroyYearendAdjustmentHousingLoanQueryCompanyIdMax = 2147483647;


export const destroyYearendAdjustmentHousingLoanQueryParams = zod.object({
  "company_id": zod.number().min(1).max(destroyYearendAdjustmentHousingLoanQueryCompanyIdMax).describe('事業所ID')
})

